-- phpMyAdmin SQL Dump
-- version 4.4.15.5
-- http://www.phpmyadmin.net
--
-- Host: localhost:3306
-- Generation Time: Jul 16, 2016 at 08:38 AM
-- Server version: 5.5.49-log
-- PHP Version: 7.0.6

SET SQL_MODE = "NO_AUTO_VALUE_ON_ZERO";
SET time_zone = "+00:00";


/*!40101 SET @OLD_CHARACTER_SET_CLIENT=@@CHARACTER_SET_CLIENT */;
/*!40101 SET @OLD_CHARACTER_SET_RESULTS=@@CHARACTER_SET_RESULTS */;
/*!40101 SET @OLD_COLLATION_CONNECTION=@@COLLATION_CONNECTION */;
/*!40101 SET NAMES utf8mb4 */;

--
-- Database: `desertodeibarbaridb`
--

-- --------------------------------------------------------

--
-- Table structure for table `livello`
--

CREATE TABLE IF NOT EXISTS `livello` (
  `idlivello` int(11) NOT NULL,
  `numero` int(11) NOT NULL,
  `nome` varchar(250) NOT NULL,
  `json` text NOT NULL
) ENGINE=InnoDB AUTO_INCREMENT=11 DEFAULT CHARSET=latin1;

--
-- Dumping data for table `livello`
--

INSERT INTO `livello` (`idlivello`, `numero`, `nome`, `json`) VALUES
(1, 1, 'Bastiani, la fortezza', '{\r\n  "nomeLivello": "Bastiani, la fortezza",\r\n  "numeroLivello": 1,\r\n  "costoAiuti": 0,\r\n\r\n  "dialogoIniziale":\r\n  [\r\n    {"nome": "Ortiz",\r\n    "testo": "Buongiorno, capitano Simeoni. Io sono il generale Ortiz, a capo dell&#x27;Ottava Armata delle United Terrestrial Forces, nome in codice UTF-8. Sar&#xE0; a me che dovrai fare rapporto nei mesi a venire. Chiaro?"},\r\n    {"nome": "Simeoni",\r\n    "testo": "Signors&#xEC;, signore."},\r\n    {"nome": "Ortiz",\r\n    "testo": "Ottimo. Come puoi ben vedere, abbiamo appena subito un attacco del Nemico. Vorremmo reagire ma... purtroppo le difese del pianeta Bastiani sono inutilizzabili."},\r\n    {"nome": "Simeoni",\r\n    "testo": "Inutilizzabili, signore?"},\r\n    {"nome": "Ortiz",\r\n    "testo": "Esattamente, capitano. Come se qualcuno avesse inserito una sicura di sparo. Ed &#xE8; qui che entri in gioco tu. Il tempo &#xE8; poco, ma confido in te. Sai cos&#x27;&#xE8; un codice sorgente? Come sicuramente ti avranno spiegato all&#x27;Accademia, ogni arma terrestre contiene una grossa parte di informatica."},\r\n    {"nome": "Simeoni",\r\n    "testo": "Esatto, signore."},\r\n    {"nome": "Ortiz",\r\n    "testo": "Questa parte di informatica consiste in un insieme di istruzioni su ci&#xF2; che le armi devono fare. Tali istruzioni devono essere scritte in un linguaggio comprensibile alle armi: un linguaggio di questo genere viene chiamato linguaggio di programmazione. L&#x27;insieme di istruzioni, scritte in un linguaggio di programmazione viene chiamato codice sorgente. Quando l&#x27;arma prende il codice sorgente, esso diventa un programma. Mi sono spiegato bene?"},\r\n    {"nome": "Simeoni",\r\n    "testo": "Affermativo, signore."},\r\n    {"nome": "Ortiz",\r\n    "testo": "Il tuo primo compito sar&#xE0; quello di modificare il codice sorgente per le armi di Bastiani. I nostri tecnici ti hanno fornito una postazione di comando su cui lavorare. Ho per&#xF2; una brutta notizia."},\r\n    {"nome": "Simeoni",\r\n    "testo": "Brutta notizia, signore?"},\r\n    {"nome": "Ortiz",\r\n    "testo": "Il linguaggio di programmazione utilizzato per la scrittura dei programmi militari si chiama JS. Purtroppo tutti i documenti relativi a questo linguaggio sono... spariti. Non ne esiste una sola testimonianza in tutta la galassia. Archivi militari, archivi civili, biblioteche, universit&#xE0;... nulla! Come se non fosse mai esistito."},\r\n    {"nome": "Simeoni",\r\n    "testo": "Bene, signore. La difficolt&#xE0; &#xE8; mia amica. Spero solo di essere in grado di capire questo linguaggio il prima possibile."},\r\n    {"nome": "Ortiz",\r\n    "testo": "Non preoccuparti, ho lasciato qualche commento di aiuto al codice. Come ben sai un commento &#xE8; una parte del codice sorgente che non descrive un&#x27;istruzione, ma semplicemente aiuta chi legge il codice nel comprendere ci&#xF2; che c&#x27;&#xE8; scritto."},\r\n    {"nome": "Simeoni",\r\n    "testo": "Grazie signore."},\r\n    {"nome": "Ortiz",\r\n    "testo": "Di nulla. Per qualunque dubbio, chiedi. Come prima cosa noterai che il sistema richiede un accesso automatico, effettuato tramite il controllo della tua retina. Se questo non funziona, non preoccuparti: raramente va tutto bene. Dovrai dunque eseguire un accesso manuale, modificando alcuni file che si occupano di tale controllo. Troverai comunque una descrizione pi&#xF9; dettagliata nel documento che ti ho lasciato."},\r\n    {"nome": "Simeoni",\r\n    "testo": "Signors&#xEC;, signore."},\r\n    {"nome": "Ortiz",\r\n    "testo": "Mi aspetto grandi cose da te, capitano. Non deludermi."}\r\n  ],\r\n\r\n  "dialogoFinale":\r\n  [\r\n    {"nome": "Simeoni",\r\n    "testo": "A rapporto, generale Ortiz."},\r\n    {"nome": "Ortiz",\r\n    "testo": "Bel lavoro Simeoni, con quel sistema. Era ora che arrivasse qualcuno in grado di gestirlo..."},\r\n    {"nome": "Simeoni",\r\n    "testo": "Grazie signore! Ho altri ordini, signore?"},\r\n    {"nome": "Ortiz",\r\n    "testo": "No, non per oggi. Vai a riposarti, sapendo che finalmente possiamo provare a respingere quei maledetti. Gli incursori hanno segnalato movimenti al confine del deserto... domani sar&#xE0; una giornata lunga, nell&#x27;eterna notte di Bastiani."}\r\n  ],\r\n\r\n  "manuale": "Un linguaggio di programmazione possiede una grammatica: in esso esistono alcune parole dal significato speciale, chiamate <b>parole chiave<\\/b>. <br>\\nLa prima parole chiave da imparare &#xE8; <b>var<\\/b>. <br>\\nPrendi per esempio la riga:\\n<pre><code>var x;\\n<\\/code><\\/pre>\\nEssa indica che ogni volta che nel codice sorgente compare la parola <i>x<\\/i>, essa rappresenta la <b>variabile<\\/b> cos&#xEC; chiamata. <br>\\nRicorda: ogni istruzione deve finire con il carattere &#x22;<tt>;<\\/tt>&#x22;.\\nUna variabile altro non &#xE8; che un contenitore, una &#x22;scatola&#x22; in cui inserire dei valori. <br>\\nPrendi per esempio l&#x27;istruzione:\\n<pre><code>var x = 4;\\n<\\/code><\\/pre>\\nLa variabile di nome <i>x<\\/i> ora contiene un valore numerico, in questo caso 4. <br>\\nEsistono differenti tipologie di valori che si possono inserire in una variabile: i <b>tipi<\\/b> di valore pi&#xF9; utilizzati sono valori numerici e stringhe. <br>\\nEsempi di valori numerici sono: 4, 6, 12.5, 24.3, ma anche operazioni aritmetiche come 16+5, 4*3, 5-12 o 24\\/6. <br>\\nUna <b>stringa<\\/b> &#xE8; invece un insieme di caratteri, come &#x22;Bastiani&#x22;, &#x22;Ortiz&#x22; o &#x22;battaglia&#x22;. Pu&#xF2; anche contenere numeri: per esempio, &#x22;UTF-8&#x22; &#xE8; una stringa. <br>\\nUn&#x27;operazione utile da effettuare sulle stringhe &#xE8; la cosiddetta <b>concatenazione<\\/b>, cio&#xE8; l&#x27;unione di due o pi&#xF9; stringhe. Per esempio:\\n<pre><code>var stringaPrimaParte = &#x22;anti&#x22;;\\nvar stringaSecondaParte = &#x22;missile&#x22;;\\nvar stringaDiProva = stringaPrimaParte + stringaSecondaParte;\\n<\\/code><\\/pre>\\nindica che nella variabile <tt>stringaDiProva<\\/tt> &#xE8; contenuta la stringa &#x22;antimissile&#x22;.\\nNota bene! Il nome della variabile pu&#xF2; contenere lettere e numeri, pi&#xF9; il carattere speciale &#x22;_&#x22;, ma nient&#x27;altro. Il nome di una variabile non pu&#xF2; mai iniziare con un numero, ma pu&#xF2; averne in mezzo ed anche alla fine. Per esempio:\\n<pre><code>var 7Nani;\\n<\\/code><\\/pre>\\n&#xE8; errato, mentre:\\n<pre><code>var numero1;\\nvar caricatore6Cannone;\\n<\\/code><\\/pre>\\nsono corrette.\\nNota bene! <i>var<\\/i> &#xE8; una parola chiave, per cui non potrai utilizzarla come nome per le variabili. Per esempio, l&#x27;istruzione:\\n<pre><code>var var = 2;\\n<\\/code><\\/pre>\\nrestituir&#xE0; un errore.\\nQuesto vale per tutte le parole chiave che incontrerai in futuro.\\nNota bene! I nomi da assegnare alle variabili devono essere significativi. Per esempio, la variabile <tt>nomeSoldato<\\/tt> indica che stiamo creando una variabile che conterr&#xE0; una stringa indicante il nome di un soldato; chiamandola, per esempio, <tt>stringa<\\/tt> o in un altro modo, sarebbe stato pi&#xF9; difficile capire il suo scopo.",\r\n\r\n  "codiceLivello": "function Livello1 ( callbackFineLivello ) {\\n  CoreLevel.call( this, callbackFineLivello );\\n}\\n\\nLivello1.prototype = Object.create( CoreLevel.prototype );\\nLivello1.prototype.constructor = Livello1;\\n\\nLivello1.prototype.inizializzaMirino = function ( ) {\\n  if ( controlloAccesso() === true ) {\\n    this.mirino = new Mirino( this.canvas.width \\/ 2, this.canvas.height \\/ 2, 10.0 );\\n  } else {\\n    this.mirino = new Mirino( this.canvas.width \\/ 2, this.canvas.height \\/ 2, 0 );\\n  }\\n}\\n\\nLivello1.prototype.inizializzaTorrette = function () {\\n  var nMissili = 10;\\n  var nSoldati = 10;\\n  var Tmin = 50;\\n  var Tmax = 1000;\\n  var deltaTempo = 70;\\n  var deltaRaffreddamento = 3;\\n  \\n  var coloreMissili0 = [ ''blue'', ''blue'', ''blue'', ''blue'', ''blue'', ''blue'', ''blue'', ''blue'', ''blue'', ''blue''];\\n  coloreMissili0[ rand( 0, 9 ) ] = ''red'';\\n  coloreMissili0[ rand( 0, 9 ) ] = ''#33CCFF'';\\n  coloreMissili0[ rand( 0, 9 ) ] = ''red'';\\n  coloreMissili0[ rand( 0, 9 ) ] = ''#33CCFF'';       \\n  coloreMissili0[ rand( 0, 9 ) ] = ''red'';\\n  this.coreGame.aggiungiBatteriaAntimissile(\\n    new BatteriaAntimissile ( 35, 410, nMissili, nSoldati, coloreMissili0, Tmin, Tmax, deltaTempo, deltaRaffreddamento, this.coreGame )\\n  );\\n  \\n  coloreMissili1 = [ ''blue'', ''blue'', ''blue'', ''blue'', ''blue'', ''blue'', ''blue'', ''blue'', ''blue'', ''blue''];\\n  coloreMissili1[ rand( 0, 9 ) ] = ''red'';\\n  coloreMissili1[ rand( 0, 9 ) ] = ''#33CCFF'';\\n  coloreMissili1[ rand( 0, 9 ) ] = ''red'';\\n  coloreMissili1[ rand( 0, 9 ) ] = ''#33CCFF'';       \\n  coloreMissili1[ rand( 0, 9 ) ] = ''red'';\\n  this.coreGame.aggiungiBatteriaAntimissile(\\n    new BatteriaAntimissile ( 255, 410, nMissili, nSoldati, coloreMissili1, Tmin, Tmax, deltaTempo, deltaRaffreddamento, this.coreGame )\\n  );\\n  \\n  var coloreMissili2 = [ ''blue'', ''blue'', ''blue'', ''blue'', ''blue'', ''blue'', ''blue'', ''blue'', ''blue'', ''blue''];\\n  coloreMissili2[ rand( 0, 9 ) ] = ''red'';\\n  coloreMissili2[ rand( 0, 9 ) ] = ''#33CCFF'';\\n  coloreMissili2[ rand( 0, 9 ) ] = ''red'';\\n  coloreMissili2[ rand( 0, 9 ) ] = ''#33CCFF'';       \\n  coloreMissili2[ rand( 0, 9 ) ] = ''red'';\\n  this.coreGame.aggiungiBatteriaAntimissile(\\n    new BatteriaAntimissile ( 475, 410, nMissili, nSoldati, coloreMissili2, Tmin, Tmax, deltaTempo, deltaRaffreddamento, this.coreGame )\\n  );\\n};\\n\\nLivello1.prototype.inizializzaArmiNemiche = function () {\\n  var areaPertenza = this.coreGame.canvas.width;\\n  var ritardoMassimo = 100 + this.numeroOndata * 0.05;\\n  var velMin = 1.0 + this.numeroOndata * 0.05;\\n  var velMax = 1.2 + this.numeroOndata * 0.05;\\n  var numeroMissili = 10 + Math.floor( this.numeroOndata );\\n  var ritardoRand;\\n  var bersagli = this.coreGame.bersagliAttaccabili();\\n  \\n  for( var i = 0; i < numeroMissili ; i++ ) {\\n    var xRand = rand( 0, areaPertenza );\\n    var velRand = rand( velMin, velMax );\\n    ritardoRand = rand( 0, ritardoMassimo );\\n    this.coreGame.missiliNemici.push( new MissileNemico( {\\n      coloreTestata: ''yellow'',\\n      coloreScia: ''red'',\\n      massimoRaggioEsplosione: 30\\n    }, bersagli, areaPertenza, xRand, velRand,  ritardoRand, this.coreGame) );\\n  }\\n}\\n\\nLivello1.prototype.sparo = function ( x, y, tasto ) {\\n  var indiceTorretta = this.scegliTorretta( x, y, tasto);\\n  var raggio = 30;\\n  var xModificata = x + rand( -raggio, raggio );\\n  var yModificata = y + rand( -raggio, raggio );\\n  \\n  var vel = 0;\\n  var incrementoTemperatura = 150;\\n  var coloreScia = ''blue'';\\n  var raggioEsplosione = 2;\\n  \\n  if( indiceTorretta === -1 )\\n    return;\\n  \\n  var torretta = this.coreGame.batterieAntimissile[indiceTorretta];\\n    \\n  if( torretta.tipoMunizioni[ torretta.numeroMissili - 1 ] === ''blue'' ) { \\n    vel = 7; coloreScia = ''blue''; raggioEsplosione = 20;\\n  }\\n  if( torretta.tipoMunizioni[ torretta.numeroMissili - 1 ] === ''red'' ) { \\n    vel = 8; coloreScia = ''red''; raggioEsplosione = 2;\\n  }\\n  if( torretta.tipoMunizioni[ torretta.numeroMissili - 1 ] === ''#33CCFF'' ) { \\n    vel = 0.5; coloreScia = ''#33CCFF''; raggioEsplosione = 30;\\n  }\\n    \\n  if ( sbloccaSparo() === false ) {\\n    console.log(\\"Sicura attiva!\\");\\n    return;\\n  }\\n  \\n  this.coreGame.missiliTerrestri.push( new MissileTerrestre( {\\n    xDiPartenza: this.coreGame.batterieAntimissile[ indiceTorretta ].x,\\n    yDiPartenza: this.coreGame.batterieAntimissile[ indiceTorretta ].y,\\n    xDiArrivo: xModificata,\\n    yDiArrivo: yModificata,\\n    coloreTestata: ''yellow'',\\n    coloreScia: coloreScia,\\n    massimoRaggioEsplosione: raggio,\\n    distanzaPerFrame: vel\\n  }, this.coreGame ) );\\n  this.coreGame.aggiornaPunteggioMissiliSparati();\\n  this.coreGame.batterieAntimissile[ indiceTorretta ].numeroMissili--;\\n  this.coreGame.batterieAntimissile[ indiceTorretta ].temperatura += incrementoTemperatura;\\n}\\n\\nLivello1.prototype.calcolaCoefficienteOndata = function () {\\n  return this.numeroOndata * 1.2;\\n}\\n\\n\\/\\/ interfaccia test - codice utente\\nvar controlloAccesso = function () {\\n  var risultato = autenticazioneManuale();\\n  var nome = risultato[ 0 ];\\n  var matricola = risultato[ 1 ];\\n  var password = risultato[ 2 ];\\n  var stringa = risultato[ 3 ];\\n  \\n  if (\\n    nome === \\"Cpt Simeoni\\"\\n    && matricola === 150716\\n    && password === \\"utf-8_tuono\\"\\n    && stringa === risultato[ 0 ] + \\"%\\" + risultato[ 1 ] + \\"<\\" + risultato[ 2 ] + \\">\\"\\n  ) {\\n    console.log(\\"Informazioni inserite correttamente.\\\\nBuon proseguimento con il sistema Hob-2000.\\");\\n    return true;\\n  } else {\\n    console.log(\\n      \\"Nome: \\" + nome\\n      + \\"\\\\nMatricola: \\" + matricola\\n      + \\"\\\\nPassword: \\" + Array(password.length + 1).join(\\"*\\")\\n      + \\"\\\\nStringa: \\" + stringa\\n      + \\"\\\\nInformazioni non corrette.\\"\\n    );\\n    return false;\\n  }\\n}\\n\\n\\/\\/ interfaccia test - codice utente\\nvar sbloccaSparo = function ( ) {\\n  var base = rand(1, Math.sqrt(Number.MAX_VALUE));\\n  var altezza = rand(1, Math.sqrt(Number.MAX_VALUE));\\n  if( base * altezza === verificaPresenzaCervelloOperatore( base, altezza ) ) {\\n    console.log(\\"Formula corretta, verifica completata.\\");\\n    return true;\\n  } else {\\n    console.log(\\"Formula errata, forma di vita intelligente non rilevata.\\");\\n    return false;\\n  }\\n}",\r\n\r\n  "fileVirtuali":\r\n  [\r\n    {"nomeFile": "Benvenuto.hob",\r\n    "consultazione": true,\r\n    "codice": "\\/*\\n __   __  _______  _______         _______  _______  _______  _______ \\n|  | |  ||       ||  _    |       |       ||  _    ||  _    ||  _    |\\n|  |_|  ||   _   || |_|   | ____  |____   || | |   || | |   || | |   |\\n|       ||  | |  ||       ||____|  ____|  || | |   || | |   || | |   |\\n|       ||  |_|  ||  _   |        | ______|| |_|   || |_|   || |_|   |\\n|   _   ||       || |_|   |       | |_____ |       ||       ||       |\\n|__| |__||_______||_______|       |_______||_______||_______||_______|\\nQuesto file \\u00e8 stato generato automaticamente dal sistema antimissilistico\\nHOB-2000.\\n\\n\\nBuongiorno, sono il sistema antimissilistico HOB-2000, per comunicarvi che\\nl''autenticazione automatica \\u00e8 fallita. Se proprio desiderate procedere, avete la possibilit\\u00e0 di utilizzare l''autenticazione manuale.\\n\\nGrazie per aver scelto HOB-2000.\\nCopyright (C) 4096 Orsa Minore Software Inc. - Tutti i diritti riservati\\n\\u00c8 possibile utilizzare, distribuire o modificare questo file secondo i termini della licenza galattica GGPA-DA1979, che sfortunatamente non verr\\u00e0 scritta se non nel prossimo secolo.\\n*\\/"},\r\n    {"nomeFile": "AutenticazioneManuale.js",\r\n    "consultazione": false,\r\n    "codice": "\\/**********\\nIl codice seguente permette l''autenticazione manuale di un operatore, tramite la creazione di una parola di accesso ottenuta dalla concatenazione di pi\\u00f9 stringhe.\\nATTENZIONE! Utilizzare solo in caso di fallimento dell''autenticazione automatica.\\n\\nInserire il proprio nome utente nella variabile \\"nome\\", la propria matricola nella variabile \\"matricola\\" e la propria password nella variabile \\"password\\".\\nCreare poi la corretta stringaAccesso, utilizzando la concatenazione di variabili che contengono una stringa.\\n**********\\/\\n\\n\\/* \\/\\\\\\/\\\\\\/\\\\ Gen. Ortiz \\/\\\\\\/\\\\\\/\\\\\\nSe hai bisogno di ricordarti cosa devi fare, controlla la sezione \\"Obiettivo\\" corrispondente al nome di questo file, presente sulla tua plancia di comando.*\\/\\nvar autenticazioneManuale = function () {\\n\\/\\/###START_MODIFICABILE###\\n  \\/\\/ Ricorda: il simbolo = permette di assegnare il valore alla variabile.\\n  var nome = \\"captano\\";\\n  var matricola = 0;\\n  var password = \\"utf\\";\\n  \\/\\/ Ricorda: il simbolo + tra due variabili di tipo stringa indica la loro concatenazione.\\n  var stringaAccesso = \\"UTF-8\\" + nome + \\"&&--\\"+ password + \\"%\\" + matricola;\\n\\/\\/###END_MODIFICABILE###\\n  \\n  return [nome, matricola, password, stringaAccesso];\\n}",\r\n    "test": "(function () {\\n  var risultato = autenticazioneManuale();\\n  if (\\n    risultato[ 0 ] === \\"Cpt Simeoni\\"\\n    && risultato[ 1 ] === 150716\\n    && risultato[ 2 ] === \\"utf-8_tuono\\"\\n    && risultato[ 3 ] === risultato[ 0 ] + \\"%\\" + risultato[ 1 ] + \\"<\\" + risultato[ 2 ] + \\">\\"\\n  ) {\\n    return true;\\n  } else {\\n    return false;\\n  }\\n}) ();",\r\n    "descrizione": "Nota: ogni obiettivo &#xE8; legato ad un file modificabile. Come puoi vedere l&#x27;obiettivo ha lo stesso nome del file a cui &#xE8; collegato.\\nL&#x27;obiettivo &#xE8; costruire la frase d&#x27;accesso corretta per sbloccare il sistema di puntamento e sparo. Devi dunque inserire:\\n<li>nella variabile <tt>nome<\\/tt>, la stringa &#x22;Cpt Simeoni&#x22;;<\\/li>\\n<li>nella variabile <tt>matricola<\\/tt>, il numero 150716;<\\/li>\\n<li>nella variabile <tt>password<\\/tt>, la stringa &#x22;utf-8_tuono&#x22;;<\\/li> <br>\\nDovrai poi inserire nella variabile <tt>stringaAccesso<\\/tt> la corretta composizione della parola d&#x27;accesso, che dovr&#xE0; essere della forma: <br>\\n<tt>nome%matricola&#x3C;password&#x3E;<\\/tt>.",\r\n    "aiuto": "Come prima cosa si devono effettuare i seguenti assegnamenti:\\n<pre><code>var nome = &#x22;Cpt Simeoni&#x22;;\\nvar matricola = 150716;\\nvar password = &#x22;utf-8_tuono&#x22;;\\n<\\/code><\\/pre>\\nPoi cambiare la concatenazione di stringhe per riempire la variabile <tt>stringaAccesso<\\/tt>:\\n<pre><code>var stringaAccesso = nome + &#x22;%&#x22; + matricola + &#x22;&#x3C;&#x22; + password + &#x22;&#x3E;&#x22;;\\n<\\/code><\\/pre>",\r\n    "messaggioFallimento": "Autenticazione manuale non riuscita."},\r\n    {"nomeFile": "VerificaCervello.js",\r\n    "consultazione": false,\r\n    "codice": "\\/**********\\nIl codice che segue \\u00e8 necessario per verificare la presenza di un operatore umano.\\nIl quesito posto \\u00e8 semplice: la variabile \\"areaRettangolo\\" deve contenere la corretta formula per il calcolo dell''area di un rettangolo.\\n**********\\/\\nvar verificaPresenzaCervelloOperatore = function ( base, altezza ) {\\n\\/\\/###START_MODIFICABILE###\\n  var areaRettangolo = base + altezza;\\n\\/\\/###END_MODIFICABILE###\\n  return areaRettangolo;\\n}",\r\n    "test": "( function() {\\n  var base = rand(1, Math.sqrt(Number.MAX_VALUE));\\n  var altezza = rand(1, Math.sqrt(Number.MAX_VALUE));\\n  if( base * altezza === verificaPresenzaCervelloOperatore( base, altezza ) ) {\\n    return true;\\n  } else {\\n    return false;\\n  }\\n} ) ();",\r\n    "descrizione": "In questo file si verifica la presenza di un operatore umano, cio&#xE8; dotato di cervello. <br>\\nPer ottenere l&#x27;accesso &#xE8; necessario che la variabile <tt>area<\\/tt> contenga la formula corretta per il calcolo dell&#x27;area di un rettangolo.",\r\n    "aiuto": "Per passare l&#x27;autenticazione manuale &#xE8; necessario modificare l&#x27;operazione per il calcolo dell&#x27;area di un rettangolo, rendendo la variabile <tt>area<\\/tt> nel seguente modo:\\n<pre><code>var area = base * altezza;\\n<\\/code><\\/pre>",\r\n    "messaggioFallimento": "Formula non corretta."}\r\n  ]\r\n}'),
(2, 2, 'Il pianeta misterioso', '{\r\n  "nomeLivello": "Il pianeta misterioso",\r\n  "numeroLivello": 2,\r\n  "costoAiuti": 2500,\r\n\r\n  "dialogoIniziale":\r\n  [\r\n    {"nome": "Ortiz",\r\n    "testo": "Capitano, le modifiche che hai apportato al sistema si sono rivelate inutili! Possiamo sparare e puntare, ma i missili non raggiungono correttamente il bersaglio! Hai qualche giustificazione?"},\r\n    {"nome": "Simeoni",\r\n    "testo": "Signore, ho fatto solo quello che mi &#xE8; stato chiesto, cio&#xE8; sbloccare il sistema antimissili. Se ci sono da apportare altre modifiche al codice sorgente lo far&#xF2;, ma mi servirebbe un punto preciso dal quale partire..."},\r\n    {"nome": "Ortiz",\r\n    "testo": "Stai pretendendo troppo, capitano. Siamo al fronte, non a scuola. Devi cavartela da solo! E devi stare attento, oppure la corte marziale potrebbe sentire il tuo nome."},\r\n    {"nome": "Simeoni",\r\n    "testo": "Ma, signore..."},\r\n    {"nome": "Ortiz",\r\n    "testo": "Niente ma! Ora vai subito alla sala di comando! &#xC8; un ordine!"},\r\n    {"nome": "Simeoni",\r\n    "testo": "Signors&#xEC;, signore."},\r\n    {"nome": "Simeoni",\r\n    "testo": "..."},\r\n    {"nome": "Simeoni",\r\n    "testo": "E tu chi saresti? Stavi origliando?"},\r\n    {"nome": "Prosdocimo",\r\n    "testo": "Sembrava parecchio arrabbiato il generale, eh eh eh..."},\r\n    {"nome": "Simeoni",\r\n    "testo": "Allora stavi origliando! Spiegami chi sei e forse non dir&#xF2; al generale che ci stavi ascoltando."},\r\n    {"nome": "Prosdocimo",\r\n    "testo": "Prosdocimo, al tuo servizio! Eh eh eh..."},\r\n    {"nome": "Simeoni",\r\n    "testo": "Ah ma io ti conosco! Sei il vecchio che si occupa delle pulizie qua al quartier generale."},\r\n    {"nome": "Prosdocimo",\r\n    "testo": "Esattamente! E ho le orecchie ancora buone, nonostante l&#x27;et&#xE0;. E forse so pure come aiutarti."},\r\n    {"nome": "Simeoni",\r\n    "testo": "Tu? Un povero vecchio? Ma non farmi ridere."},\r\n    {"nome": "Prosdocimo",\r\n    "testo": "Eh eh eh non hai tutti i torti. Ma ti ripeto, conosco molte cose. Per esempio: sai che sul pianeta Bastiani soffia un vento diverso dal vento che soffia sulla Terra? E possiede una forza gravitazionale otto volte pi&#xF9; potente di quella presente sul pianeta Colombre? Le armi lo sanno..."},\r\n    {"nome": "Simeoni",\r\n    "testo": "Spiegati meglio, ti ascolto."},\r\n    {"nome": "Prosdocimo",\r\n    "testo": "Ecco, bravo. Le armi hanno dei file di configurazione che impostano la forza di sparo e la calibrazione del mirino in base al pianeta su cui si trovano. Devi modificare quei file: probabilmente le armi funzionano, ma sparano in modo errato perch&#xE9; pensano di essere su qualche altro pianeta, come Buzzati o Buttafuoco..."},\r\n    {"nome": "Simeoni",\r\n    "testo": "Grazie, vec... Prosdocimo. Spero che queste informazioni mi vengano utili."},\r\n    {"nome": "Prosdocimo",\r\n    "testo": "Lo saranno, giovane capitano. Parola di Prosdocimo! Per&#xF2; facciamo cos&#xEC;: non dire al tuo generale che ti ho aiutato e che hai utilizzato questo file. Eh eh eh..."}\r\n  ],\r\n  \r\n  "dialogoFinale":\r\n  [\r\n    {"nome": "Simeoni",\r\n    "testo": "Capitano Simeoni a rapporto signore."},\r\n    {"nome": "Ortiz",\r\n    "testo": "Bene. Sapevo che il discorsetto che ti ho fatto stamattina sarebbe servito a qualcosa. Io non sar&#xF2; per sempre su questo pianeta ed &#xE8; giusto che tu sappia anche cavartela da solo. Ho solo una curiosit&#xE0;: come sei riuscito a risolvere questo problema? Devo ammettere che sono colpito..."},\r\n    {"nome": "Simeoni",\r\n    "testo": "Signore, ho solo osservato i missili lanciati nel cielo. Usavano meno propellente, non abbastanza per la forza gravitazionale di Bastiani. Poi il mirino era decisamente sfalsato, come se fosse stato impostato per un vento molto pi&#xF9; forte. Ma non voglio annoiare nessuno, signore."},\r\n    {"nome": "Ortiz",\r\n    "testo": "Comunque ottimo lavoro capitano. Sei congedato, puoi andare a dormire. Domani un&#x27;altra lunga giornata ci attende, nell&#x27;eterna notte di Bastiani... "}\r\n  ],\r\n  \r\n  "manuale": "Un altro punto fondamentale nei codici sorgenti del sistema antimissilistico Hob-2000 &#xE8; rappresentato dalle <b>istruzioni di controllo<\\/b>.\\nUn&#x27;istruzione di controllo si basa su una nuova tipologia di valore che pu&#xF2; essere inserito in una variabile, chiamato <b>booleano<\\/b>.\\nUna variabile booleana pu&#xF2; assumere due valori differenti:\\n<li> <i>true<\\/i>, se essa rappresenta un concetto vero;<\\/li>\\n<li> <i>false<\\/i>, se essa rappresenta un concetto falso.<\\/li> <br>\\nPer rappresentare il vero e il falso &#xE8; possibile utilizzare sia le parole chiave appropriate (rispettivamente <i>true<\\/i> e <i>false<\\/i>), oppure diversi tipi di operatori:\\n<li> <tt>a === b<\\/tt>, vero se <tt>a<\\/tt> &#xE8; uguale a <tt>b<\\/tt>;<\\/li>\\n<li> <tt>a !== b<\\/tt>, vero se <tt>a<\\/tt> &#xE8; diverso da <tt>b<\\/tt>;<\\/li>\\n<li> <tt>a &#x3E; b<\\/tt>, vero se <tt>a<\\/tt> &#xE8; maggiore di <tt>b<\\/tt>;<\\/li>\\n<li> <tt>a &#x3C; b<\\/tt>, vero se <tt>a<\\/tt> &#xE8; minore di <tt>b<\\/tt>;<\\/li>\\n<li> <tt>a &#x3E;= b<\\/tt>, vero se <tt>a<\\/tt> &#xE8; maggiore o uguale di <tt>b<\\/tt>;<\\/li>\\n<li> <tt>a &#x3C;= b<\\/tt>, vero se <tt>a<\\/tt> &#xE8; minore o uguale a <tt>b<\\/tt>;<\\/li>\\n<li> <tt>!a<\\/tt>, vero se <tt>a<\\/tt> ha come valore <i>false<\\/i>.<\\/li> <br>\\nEsempi di variabile contenente un valore vero possono essere:\\n<pre><code>var b1 = 5 &#x3E; 4;\\nvar b2 = true;\\nvar b3 = !false;\\n<\\/code><\\/pre>\\nEsempi di variabile che contengono un valore falso possono essere:\\n<pre><code>var b4 = 3 &#x3E;= 6;\\nvar b5 = false;\\nvar b6 = !true;\\n<\\/code><\\/pre>\\nLe istruzioni di controllo hanno bisogno delle variabili booleane. Esistono tre istruzioni di controllo.\\nLa prima &#xE8; identificata dalla parola chiave <b>if<\\/b>. Eccone un esempio:\\n<pre><code>var x = 0;\\nif ( a === true ) {\\n  var x = 1;\\n}\\n<\\/code><\\/pre>\\nLa variabile <tt>x<\\/tt> parte con il valore 0 al proprio interno. A questo punto se <tt>a<\\/tt> &#xE8; una variabile booleana che contiene un valore vero, allora <tt>x<\\/tt> prender&#xE0; il valore 1 al proprio interno; altrimenti, cio&#xE8; se <tt>a<\\/tt> &#xE8; falsa, <tt>x<\\/tt> non verr&#xE0; aggiornata perch&#xE9; la parte di codice all&#x27;interno delle parentesi graffe non verr&#xE0; eseguita.\\nCome si pu&#xF2; notare, le istruzioni di controllo sono semafori che, in base al valore che si ha all&#x27;interno delle parentesi tonde, decidono l&#x27;andamento del codice.\\nUna seconda tipologia di istruzione di controllo si basa sulle parole chiave <b>if<\\/b> ed <b>else<\\/b>. Eccone un esempio:\\n<pre><code>var x;\\nif ( a === false ) {\\n  x = 1;\\n} else {\\n  x = 0;\\n}\\n<\\/code><\\/pre>\\nQuesta istruzione descrive lo stesso meccanismo visto nell&#x27;esempio precedente: se la variabile <tt>a<\\/tt> &#xE8; falsa, <tt>x<\\/tt> conterr&#xE0; il valore 1; altrimenti (<i>else<\\/i>, in inglese), conterr&#xE0; il valore 0.\\nL&#x27;ultima istruzione di controllo da comprendere &#xE8; quella chiamata <b>if-else if<\\/b>. Eccone un esempio:\\n<pre><code>var x = 0;\\nif ( a === false ) {\\n  x = 1;\\n} else if ( b &#x3E;= 4 ) {\\n  x = 2;\\n}\\n<\\/code><\\/pre>\\nQuesta istruzione descrive un meccanismo leggermente differente da quello visto in precedenza. Se la variabile <tt>a<\\/tt> &#xE8; falsa, allora <tt>x<\\/tt> conterr&#xE0; il valore 1; altrimenti, cio&#xE8; se <tt>a<\\/tt> &#xE8; vera, si controlla se <tt>b<\\/tt> &#xE8; maggiore o uguale di 4. Se ci&#xF2; &#xE8; vero, allora <tt>x<\\/tt> conterr&#xE0; il valore 2, altrimenti, cio&#xE8; se <tt>b<\\/tt> &#xE8; minore di 4, non si fa nulla.",\r\n\r\n  "codiceLivello": "function Livello2 ( callbackFineLivello ) {\\n  CoreLevel.call( this, callbackFineLivello );  \\n}\\n\\nLivello2.prototype = Object.create( CoreLevel.prototype );\\nLivello2.prototype.constructor = Livello2;\\n\\nLivello2.prototype.inizializzaMirino = function () {\\n  this.mirino = new Mirino( this.canvas.width \\/ 2, this.canvas.height \\/ 2, 10.0 );\\n}\\n\\nLivello2.prototype.inizializzaArmiNemiche = function () {  \\n  var areaPertenza = this.coreGame.canvas.width;\\n  var ritardoMassimo = 100 * (this.numeroOndata * 0.05);\\n  var velMin = 1.0 + this.numeroOndata * 0.05;\\n  var velMax = 1.2 + this.numeroOndata * 0.05;\\n  var numeroMissili = 10 + Math.floor( this.numeroOndata );\\n  var ritardoRand;\\n  var bersagli = this.coreGame.bersagliAttaccabili();\\n  \\n  for( var i = 0; i < numeroMissili ; i++ ) {\\n    var xRand = rand( 0, areaPertenza );\\n    var velRand = rand( velMin, velMax );\\n    ritardoRand = rand( 0, ritardoMassimo );\\n    this.coreGame.missiliNemici.push( new MissileNemico( {\\n      coloreTestata: ''yellow'',\\n      coloreScia: ''red'',\\n      massimoRaggioEsplosione: 30\\n    }, bersagli, areaPertenza, xRand, velRand,  ritardoRand, this.coreGame) );\\n  }\\n}\\n\\nLivello2.prototype.inizializzaTorrette = function () {\\n  var nMissili = 10;\\n  var nSoldati = 10;\\n  var Tmin = 50;\\n  var Tmax = 1000;\\n  var deltaTempo = 70;\\n  var deltaRaffreddamento = 3;\\n  \\n  var coloreMissili0 = [ ''blue'', ''blue'', ''blue'', ''blue'', ''blue'', ''blue'', ''blue'', ''blue'', ''blue'', ''blue''];\\n  coloreMissili0[ rand( 0, 9 ) ] = ''red'';\\n  coloreMissili0[ rand( 0, 9 ) ] = ''#33CCFF'';\\n  coloreMissili0[ rand( 0, 9 ) ] = ''red'';\\n  coloreMissili0[ rand( 0, 9 ) ] = ''#33CCFF'';       \\n  coloreMissili0[ rand( 0, 9 ) ] = ''red'';\\n  this.coreGame.aggiungiBatteriaAntimissile(\\n    new BatteriaAntimissile ( 35, 410, nMissili, nSoldati, coloreMissili0, Tmin, Tmax, deltaTempo, deltaRaffreddamento, this.coreGame )\\n  );\\n  \\n  coloreMissili1 = [ ''blue'', ''blue'', ''blue'', ''blue'', ''blue'', ''blue'', ''blue'', ''blue'', ''blue'', ''blue''];\\n  coloreMissili1[ rand( 0, 9 ) ] = ''red'';\\n  coloreMissili1[ rand( 0, 9 ) ] = ''#33CCFF'';\\n  coloreMissili1[ rand( 0, 9 ) ] = ''red'';\\n  coloreMissili1[ rand( 0, 9 ) ] = ''#33CCFF'';       \\n  coloreMissili1[ rand( 0, 9 ) ] = ''red'';\\n  this.coreGame.aggiungiBatteriaAntimissile(\\n    new BatteriaAntimissile ( 255, 410, nMissili, nSoldati, coloreMissili1, Tmin, Tmax, deltaTempo, deltaRaffreddamento, this.coreGame )\\n  );\\n  \\n  var coloreMissili2 = [ ''blue'', ''blue'', ''blue'', ''blue'', ''blue'', ''blue'', ''blue'', ''blue'', ''blue'', ''blue''];\\n  coloreMissili2[ rand( 0, 9 ) ] = ''red'';\\n  coloreMissili2[ rand( 0, 9 ) ] = ''#33CCFF'';\\n  coloreMissili2[ rand( 0, 9 ) ] = ''red'';\\n  coloreMissili2[ rand( 0, 9 ) ] = ''#33CCFF'';       \\n  coloreMissili2[ rand( 0, 9 ) ] = ''red'';\\n  this.coreGame.aggiungiBatteriaAntimissile(\\n    new BatteriaAntimissile ( 475, 410, nMissili, nSoldati, coloreMissili2, Tmin, Tmax, deltaTempo, deltaRaffreddamento, this.coreGame )\\n  );\\n};\\n\\nLivello2.prototype.sparo = function ( x, y, tasto ) {\\n  var indiceTorretta = this.scegliTorretta( x, y, tasto);\\n   if( indiceTorretta === -1 )\\n    return;\\n  var torretta = this.coreGame.batterieAntimissile[ indiceTorretta ];\\n  \\n  var raggio = 30;\\n  var xModificata = x;\\n  var yModificata = y;\\n  if ( controlloPermessiCalibrazione() === false || controlloConfigurazioneParametriPianeti() === false ) {\\n    xModificata += rand( -raggio, raggio );\\n    yModificata += rand( -raggio, raggio );\\n  }\\n  \\n  var vel = 0;\\n  var incrementoTemperatura = 150;\\n  var coloreScia = ''blue'';\\n  var raggioEsplosione = 2;\\n  if( torretta.tipoMunizioni[ torretta.numeroMissili - 1 ] === ''blue'' ) { \\n    vel = 7; coloreScia = ''blue''; raggioEsplosione = 20; \\n  }\\n  if( torretta.tipoMunizioni[ torretta.numeroMissili - 1 ] === ''red'' ) { \\n    vel = 8; coloreScia = ''red''; raggioEsplosione = 2; \\n  }\\n  if( torretta.tipoMunizioni[ torretta.numeroMissili - 1 ] === ''#33CCFF'' ) { \\n    vel = 0.5; coloreScia = ''#33CCFF''; raggioEsplosione = 30; \\n  }\\n  \\n  this.coreGame.missiliTerrestri.push( new MissileTerrestre( {\\n    xDiPartenza: torretta.x,\\n    yDiPartenza: torretta.y,\\n    xDiArrivo: xModificata,\\n    yDiArrivo: yModificata,\\n    coloreTestata: ''yellow'',\\n    coloreScia: coloreScia,\\n    massimoRaggioEsplosione: raggioEsplosione,\\n    distanzaPerFrame: vel\\n  }, this.coreGame ) );\\n  this.coreGame.aggiornaPunteggioMissiliSparati();\\n  torretta.numeroMissili--;\\n  torretta.temperatura += incrementoTemperatura;\\n}\\n\\nLivello2.prototype.calcolaCoefficienteOndata = function () {\\n  return this.numeroOndata * 1.2;\\n}\\n\\n\\/\\/ interfaccia test - codice utente\\n\\nvar controlloPermessiCalibrazione = function () {\\n  var risultato = sbloccoPermessiCalibrazione();\\n  if (\\n    risultato[ 0 ] === true\\n    && risultato[ 1 ] === true\\n    && risultato[ 2 ] === 2\\n  ) {\\n    console.log(\\"Permessi di calibrazione mira sbloccati.\\\\n Procedere al sistema di configurazione planetario.\\");\\n    return true;\\n  } else {\\n    console.log(\\n      \\"Sblocco Calibrazione: \\" + risultato[ 0 ]\\n      + \\"\\\\nAccesso Configurazione Pianeti: \\" + risultato[ 1 ]\\n      + \\"\\\\nCodice Pianeta: \\" + risultato[ 2 ]\\n      + \\"\\\\nInformazioni non corrette.\\"\\n    );\\n    return false;\\n  } \\n}\\n\\nvar controlloConfigurazioneParametriPianeti = function () {\\n  var risultato = configurazioneParametriPianeti();\\n  var nome = risultato[ 0 ];\\n  var grav = risultato[ 1 ];\\n  var vento = risultato[ 2 ];\\n  var atmosfera = risultato[ 3 ];\\n  var settore = risultato[ 4 ];\\n  \\n  if (\\n    nome === \\"Bastiani\\"\\n    && grav === 4.2\\n    && vento === 23\\n    && atmosfera === \\"respirabile\\"\\n    && settore === 7\\n  ) {\\n    console.log(\\"Configurazione sistema antimissile... Pianeta Bastiani. Informazioni aggiornate correttamente.\\\\nBuon proseguimento con il sistema Hob-2000.\\");\\n    return true;\\n  } else {\\n    console.log(\\n      \\"Nome pianeta: \\" + nome\\n      + \\"\\\\nForza Gravitazionale: \\" + grav\\n      + \\"\\\\nVento: \\" + vento\\n      + \\"\\\\nAtmosfera: \\" + atmosfera\\n      + \\"\\\\nSettore Galattico: \\" + settore\\n      + \\"\\\\nInformazioni non corrette.\\"\\n    );\\n    return false;\\n  }\\n}",\r\n\r\n  "fileVirtuali":\r\n  [\r\n    {"nomeFile": "PermessiCalibrazione.js",\r\n    "consultazione": false,\r\n    "codice": "\\/**********\\nBenvenuto nel file di sblocco dei permessi di calibrazione.\\nIl seguente file permette di sbloccare ed accedere alle funzionalit\\u00e0 di configurazione planetaria, fondamentali per la corretta impostazione delle armi.\\n**********\\/\\n\\n\\/\\/ Variabile contenente il codice del pianeta su cui si trovano le armi.\\nvar _codicePianeta;\\n\\n\\/\\/ Codice per lo sblocco dei permessi di calibrazione,\\n\\/\\/ contenente anche lo sblocco di configurazione planetaria.\\n\\/\\/ Attenzione! Senza lo sblocco della calibrazione attiva,\\n\\/\\/ non sar\\u00e0 possibile attivare la configurazione planetaria.\\nvar sbloccoPermessiCalibrazione = function () {\\n\\/\\/###START_MODIFICABILE###\\n  \\/\\/ Variabile di sblocco del sistema di calibrazione.\\n  var sbloccoCalibrazione = false;\\n\\/\\/###END_MODIFICABILE###\\n  var accessoConfigurazionePianeti = false;\\n  \\/\\/ Variabili contenenti i codici planetari.\\n  var codiceTerra = 1;\\n  var codiceBastiani = 2;\\n  var codiceColombre = 3;\\n  var codiceButtafuoco = 4;\\n  var codiceBarnabo = 5;\\n  var codiceBuzzati = 6;\\n  \\n  if ( sbloccoCalibrazione === true ) {\\n    accessoConfigurazionePianeti = true;\\n  }\\n\\/\\/###START_MODIFICABILE###\\n  \\/\\/ Attenzione! Modificare solo se il pianeta desiderato non \\u00e8 quello di default.\\n  if ( accessoConfigurazionePianeti === true ) {\\n\\/\\/###END_MODIFICABILE###\\n    _codicePianeta = codiceTerra;\\n  } else {\\n    \\/\\/ Assegnare alla variabile il codice del pianeta desiderato.\\n    _codicePianeta = codiceBastiani;\\n  }\\n  \\n  return [sbloccoCalibrazione, accessoConfigurazionePianeti, _codicePianeta]\\n}",\r\n    "test": "(function () {\\n  var risultato = sbloccoPermessiCalibrazione();\\n  if (\\n    risultato[ 0 ] === true\\n    && risultato[ 1 ] === true\\n    && risultato[ 2 ] === 2\\n  ) {\\n    return true;\\n  } else {\\n    return false;\\n  }\\n}) ();",\r\n    "descrizione": "L&#x27;obiettivo &#xE8; quello di sbloccare la calibrazione del mirino.<br>\\nCome prima cosa sar&#xE0; dunque necessario rendere vera la variabile <tt>sbloccoCalibrazione<\\/tt>.<br>\\nFatto questo &#xE8; necessario modificare la condizione del secondo <i>if<\\/i>, in modo tale da entrare nella parte di codice raggiungibile dall&#x27;<i>else<\\/i>: in questo modo viene impostata correttamente la variabile <tt>_codicePianeta<\\/tt>.",\r\n    "aiuto": "Come prima cosa &#xE8; necessario rendere vera la variabile <tt>sbloccoCalibrazione<\\/tt>, nel seguente modo:\\n<pre><code>var sbloccoCalibrazione = true;\\n<\\/code><\\/pre>\\nIl secondo passo prevede di cambiare la condizione dell&#x27;<i>if<\\/i>, rendedola come segue:\\n<pre><code>if ( accessoConfigurazionePianeti === false )\\n<\\/code><\\/pre>",\r\n    "messaggioFallimento": "Permessi non sbloccati."},\r\n    {"nomeFile": "ConfigPlanetaria.js",\r\n    "consultazione": false,\r\n    "codice": "\\/**********\\nBenvenuto nel file di configurazione planetaria del sistema Hob-2000.\\nTroverai in elenco le caratteristiche di ogni pianeta, necessarie per il corretto funzionamento del sistema stesso.\\nOgni pianeta ha cinque caratteristiche: il nome, la forza gravitazionale, il vento, l''atmosfera e il settore galattico.\\nTali caratteristiche influiscono pesantemente sulle capacit\\u00e0 di sparo, rendendo potenzialmente inutilizzabili le armi se configurate per il pianeta errato.\\n**********\\/\\n\\nvar configurazioneParametriPianeti = function () {\\n  var nomePianeta;\\n  var forzaGravitazionale;\\n  var vento;\\n  var atmosfera;\\n  var settoreGalattico;\\n  console.log(\\"Il codice del pianeta selezionato \\u00e8: \\" + _codicePianeta);  \\n\\/\\/###START_MODIFICABILE###\\n  if ( _codicePianeta === 1 ) {\\n\\/\\/###END_MODIFICABILE###\\n    nomePianeta = \\"Terra\\";\\n    forzaGravitazionale = 1;\\n    vento = 1;\\n    atmosfera = \\"respirabile\\";\\n    settoreGalattico = 0;\\n\\/\\/###START_MODIFICABILE###\\n  } else if ( _codicePianeta === 2 ) {\\n\\/\\/###END_MODIFICABILE###\\n    nomePianeta = \\"Buzzati\\";\\n    forzaGravitazionale = 2;\\n    vento = 19.06;\\n    atmosfera = \\"respirabile\\";\\n    settoreGalattico = 5;\\n\\/\\/###START_MODIFICABILE###\\n  } else if ( _codicePianeta === 3 ) {\\n\\/\\/###END_MODIFICABILE###\\n    nomePianeta = \\"Colombre\\";\\n    forzaGravitazionale = 0.5;\\n    vento = 0.7;\\n    atmosfera = \\"non_respirabile\\";\\n    settoreGalattico = 6;\\n\\/\\/###START_MODIFICABILE###\\n  } else if ( _codicePianeta === 4 ) {\\n\\/\\/###END_MODIFICABILE###\\n    nomePianeta = \\"Buttafuoco\\";\\n    forzaGravitazionale = 4.5;\\n    vento = 80;\\n    atmosfera = \\"non_respirabile\\";\\n    settoreGalattico = 3;\\n\\/\\/###START_MODIFICABILE###\\n  } else if ( _codicePianeta === 5 ) {\\n\\/\\/###END_MODIFICABILE###\\n    nomePianeta = \\"Barnabo\\";\\n    forzaGravitazionale = 13;\\n    vento = 0;\\n    atmosfera = \\"parzialmente_respirabile\\";\\n    settoreGalattico = 1;\\n\\/\\/###START_MODIFICABILE###\\n  } else if ( _codicePianeta === 6 ) {\\n\\/\\/###END_MODIFICABILE###\\n    nomePianeta = \\"Bastiani\\";\\n    forzaGravitazionale = 4.2;\\n    vento = 23;\\n    atmosfera = \\"respirabile\\";\\n    settoreGalattico = 7;\\n    \\/\\/ \\/\\\\\\/\\\\\\/\\\\ \\u00a3Nos****Kn\\u00a3$%BsorJOJSONHbooooooLK666dbw**\\n    \\/\\/ **&fgHJS666&78765&4%4$$L\\u00a3sC&GSTntadjr \\/\\\\\\/\\\\\\/\\\\\\n  } else if ( _codicePianeta === \\"00110111\\" ) {\\n    nomePianeta = \\"01000001 01101110 01100111 01110101 01110011 01110100 01101001 01101110 01100001\\";\\n    forzaGravitazionale = \\"00110010 00101110 00110011\\";\\n    vento = \\"01101110 01101111 01101110 01011111 01110000 01110010 01100101 01110011 01100101 01101110 01110100 01100101\\";\\n    atmosfera = \\"01110010 01100101 01110011 01110000 01101001 01110010 01100001 01100010 01101001 01101100 01100101\\";\\n    settoreGalattico = \\"00111000\\";\\n  }\\n  \\n  return [nomePianeta, forzaGravitazionale, vento, atmosfera, settoreGalattico];\\n}",\r\n    "test": "(function () {\\n  var risultato = configurazioneParametriPianeti();\\n  if (\\n    risultato[ 0 ] === \\"Bastiani\\"\\n    && risultato[ 1 ] === 4.2\\n    && risultato[ 2 ] === 23\\n    && risultato[ 3 ] === \\"respirabile\\"\\n    && risultato[ 4 ] === 7\\n  ) {\\n    return true;\\n  } else {\\n    return false;\\n  }\\n}) ();",\r\n    "descrizione": "L&#x27;obiettivo &#xE8; quello di modificare correttamente il grosso blocco di istruzioni <i>if-else if<\\/i>, in modo che venga eseguito il codice corretto per il pianeta Bastiani.",\r\n    "aiuto": "Per avere la corretta configurazione di puntamento e sparo &#xE8; necessario entrare nel corretto pezzo del blocco di istruzioni <i>if-else if<\\/i>: il modo migliore &#xE8; quello di sostituire il codice del pianeta con 6, dunque inserire prima del primo <i>if<\\/i> la seguente istruzione:\\n<pre><code>_codicePianeta = 6;\\n<\\/code><\\/pre>",\r\n    "messaggioFallimento": "Configurazione planetaria non corretta."}\r\n  ]\r\n}');
INSERT INTO `livello` (`idlivello`, `numero`, `nome`, `json`) VALUES
(3, 3, 'Il pilota', '{\r\n  "nomeLivello": "Il pilota",\r\n  "numeroLivello": 3,\r\n  "costoAiuti": 2500,\r\n\r\n  "dialogoIniziale":\r\n  [\r\n    {"nome": "Prosdocimo",\r\n    "testo": "Eh eh eh!"},\r\n    {"nome": "Simeoni",\r\n    "testo": "Cos&#x27;hai da ridere, Prosdocimo?"},\r\n    {"nome": "Prosdocimo",\r\n    "testo": "Non ti ha convocato, eh? Il generale..."},\r\n    {"nome": "Simeoni",\r\n    "testo": "No, effettivamente &#xE8; strano. Avr&#xE0; da fare, alla fine detiene il comando di tutta la linea di fuoco di Bastiani."},\r\n    {"nome": "Prosdocimo",\r\n    "testo": "Certo, certo, anche se questo &#xE8; il punto che soffre maggiormente gli attacchi del Nemico. Poi, c&#x27;&#xE8; quel pianeta misterioso..."},\r\n    {"nome": "Simeoni",\r\n    "testo": "Quello nel file di configurazione planetaria? Quelle scritte solo di 0 e 1? Hai ragione, c&#x27;&#xE8; qualcosa di misterioso. Ma un soldato non ha tempo per i misteri, quando c&#x27;&#xE8; una guerra da combattere."},\r\n    {"nome": "Prosdocimo",\r\n    "testo": "Certo, certo. Vedo che le torrette hanno qualche problema..."},\r\n    {"nome": "Simeoni",\r\n    "testo": "Non avvicinarti, &#xE8; pur sempre un&#x27;area militare."},\r\n    {"nome": "Prosdocimo",\r\n    "testo": "Eh eh eh, hai ragione. Per&#xF2; secondo me... secondo me le torrette hanno qualche problema. Per l&#x27;esattezza due: uno sulle munizioni caricate ed uno sul sistema di raffreddamento."},\r\n    {"nome": "Simeoni",\r\n    "testo": "A volte mi chiedo come tu faccia a sapere tutte queste cose."},\r\n    {"nome": "Prosdocimo",\r\n    "testo": "Non preoccuparti, pensa solo che ti sto aiutando. Per carit&#xE0; umana o amicizia: sta a te deciderlo. Comunque, lo sai che esistono diversi tipi di cariche per le munizioni,  vero?"},\r\n    {"nome": "Simeoni",\r\n    "testo": "Me l&#x27;hanno spiegato durante l&#x27;addestramento: munizioni al plasma, al plutonio e soniche. Qual &#xE8; il punto?"},\r\n    {"nome": "Prosdocimo",\r\n    "testo": "Il punto &#xE8; che quelle al plutonio e quelle soniche potrebbero essere, come dire, fallate. Eh eh eh..."},\r\n    {"nome": "Simeoni",\r\n    "testo": "Dunque devo utilizzare solo quelle al plasma?"},\r\n    {"nome": "Prosdocimo",\r\n    "testo": "Esattamente. Scarta le altre, vedrai che il sistema te lo permette."},\r\n    {"nome": "Simeoni",\r\n    "testo": "Per quanto riguarda il sistema di raffreddamento? Io non vedo nessun problema."},\r\n    {"nome": "Prosdocimo",\r\n    "testo": "Beh, se per te le torrette esplodono a causa di un problema inesistente, hai un problema tu. Eh eh eh. Il sistema di raffreddamento &#xE8; stato manomesso: le torrette invece che fermarsi quando si surriscaldano, esplodono. Bum. Eh eh eh."},\r\n    {"nome": "Simeoni",\r\n    "testo": "Devo controllare il codice relativo a quel sistema... grazie Prosdocimo. Ti sono debitore."},\r\n    {"nome": "Prosdocimo",\r\n    "testo": "Attento a dire queste cose, potrei prenderti alla lettera. Eh eh eh..."}\r\n  ],\r\n  \r\n  "dialogoFinale":\r\n  [\r\n    {"nome": "Simeoni",\r\n    "testo": "Capitano Simeoni a rapporto, signore."},\r\n    {"nome": "Ortiz",\r\n    "testo": "Ottimo lavoro Simeoni, con quelle torrette."},\r\n    {"nome": "Simeoni",\r\n    "testo": "Grazie, signore."},\r\n    {"nome": "Ortiz",\r\n    "testo": "Non dormire sugli allori, per&#xF2;. Il Nemico continua a batterci, anche se forse... le cose stanno per cambiare."},\r\n    {"nome": "Simeoni",\r\n    "testo": "Scoperto qualcosa, signore?"},\r\n    {"nome": "Ortiz",\r\n    "testo": "Abbiamo abbattuto un caccia nemico, a pochi chilometri da qui. Il pilota &#xE8; conciato male, ma lo stiamo sistemando. Spero di riuscire ad interrogarlo, questa notte. Potremmo ricavare grandi benefici da questo incontro. &#xC8; il primo prigioniero che riusciamo a prendere... e dunque il primo punto di contatto tra le nostre culture. Gli esseri umani non hanno mai parlato con nessuno che venisse dall&#x27;altro capo del deserto dei Barbari... sar&#xE0; sicuramente interessante."},\r\n    {"nome": "Simeoni",\r\n    "testo": "Immagino di non poter partecipare a questo colloquio, signore."},\r\n    {"nome": "Ortiz",\r\n    "testo": "Immagini bene. Ma se tutto va come deve andare... parlerai presto con lei."},\r\n    {"nome": "Simeoni",\r\n    "testo": "Lei?"},\r\n    {"nome": "Ortiz",\r\n    "testo": "Ti ho gi&#xE0; detto troppo, solo perch&#xE9; in fondo mi sei simpatico. Ora vai a dormire, capitano. Domani un&#x27;altra..."},\r\n    {"nome": "Simeoni",\r\n    "testo": "... lunga giornata ci attende nell&#x27;eterna notte di Bastiani."}\r\n  ],\r\n  \r\n  "manuale": "Un punto molto importante del codice sorgente del sistema antimissilistico Hob-2000 riguarda il concetto di <b>ciclo<\\/b>.<br>\\nUn ciclo &#xE8; formato da due cose: una condizione ed un corpo. Il corpo viene eseguito finch&#xE9; vale la condizione.<br>\\nEsistono due tipi principali di ciclo: il primo &#xE8; identificato dalla parola chiave <b>for<\\/b>, il secondo dalla parola chiave <b>while<\\/b>.<br>\\nIl ciclo <i>for<\\/i> &#xE8; strutturato nella seguente maniera:\\n<pre><code>var x = 0;\\nfor ( var i = 0; i &#x3C; lunghezza; i++ ) {\\n&#x9;x++;\\n}\\n<\\/code><\\/pre>\\nNota bene! La scorciatoia <tt>i++<\\/tt> ha lo stesso significato dell&#x27;istruzione <tt>i = i + 1<\\/tt>. Stesso vale per <tt>x++<\\/tt>.<br>\\nQuesta scrittura ha un significato semplice: partendo da 0, si controlla il valore di <tt>i<\\/tt>. L&#x27;istruzione interna al <i>for<\\/i>, cio&#xE8; <tt>x++<\\/tt>, viene eseguita finch&#xE9; <tt>i<\\/tt>, che viene incrementata ad ogni giro del ciclo, non &#xE8; lunga come <tt>lunghezza<\\/tt>. Scomponiamo le operazioni:<br>\\n<li> viene creata una variabile <tt>i<\\/tt>, che contiene il valore 0;<\\/li>\\n<li> se <tt>i<\\/tt> &#xE8; minore di <tt>lunghezza<\\/tt>, si va avanti, altrimenti si esce dal ciclo;<\\/li>\\n<li> <tt>i<\\/tt> viene incrementata, cio&#xE8; contiene ora il valore 0+1, cio&#xE8; 1;<\\/li>\\n<li> si esegue il codice interno al ciclo, dunque <tt>x<\\/tt> diventa uguale a 1;<\\/li>\\n<li> si controlla se <tt>i<\\/tt> (ora uguale a 1) &#xE8; minore di <tt>lunghezza<\\/tt>: se lo &#xE8;, si torna dentro al ciclo, altrimenti si esce.<\\/li>\\nIl ciclo viene dunque ripetuto <tt>lunghezza<\\/tt> volte.<br>\\nIl secondo tipo di ciclo &#xE8; quello identificato dalla parola chiave <i>while<\\/i>. Eccone un esempio:\\n<pre><code>var x = 0;\\nwhile ( x &#x3C; 5 ) {\\n&#x9;x++;\\n}\\n<\\/code><\\/pre>\\nIl significato di questo ciclo &#xE8; semplice: finch&#xE9; <tt>x<\\/tt> &#xE8; minore di 5, viene eseguita la parte di codice interna al <i>while<\\/i>.<br>\\nI cicli sono molto utili, soprattuto se si pensa al concetto di <b>array<\\/b>. Un array &#xE8; una variabile che contiene pi&#xF9; valori. Un esempio di array pu&#xF2; essere il seguente:\\n<pre><code>var numeri = [1, 2, 3, 4];\\n<\\/code><\\/pre>\\nquesto array contiene i numeri da 1 a 4.<br>\\nPer inserire successivamente un elemento in un array, &#xE8; necessario utilizzare l&#x27;istruzione di <tt>push<\\/tt>. Per esempio, se vogliamo aggiungere l&#x27;elemento 5 nell&#x27;array <tt>numeri<\\/tt>, &#xE8; necessario effettuare la seguente istruzione:\\n<pre><code>numeri.push( 5 );\\n<\\/code><\\/pre>\\nL&#x27;array che risulta da questa istruzione sar&#xE0; il seguente:\\n<pre><code>[1, 2, 3, 4, 5]\\n<\\/code><\\/pre>\\nNota bene! Ogni elemento di un array ha un numero, che indica la sua posizione all&#x27;interno dell&#x27;array stesso. Tale numero parte da 0, e viene cos&#xEC; utilizzato:\\n<pre><code>var a = numeri[ 0 ];\\nvar b = numeri[ 4 ];\\n<\\/code><\\/pre>\\nIn questo codice, <tt>a<\\/tt> contiene il valore 1, che occupa la posizione 0 all&#x27;interno dell&#x27;array; la variabile <tt>b<\\/tt> contiene invece il valore 5, che occupa la posizione 4.<br>\\nUn&#x27;operazione molto importante applicabile agli array &#xE8; quella per determinarne la lunghezza.<br>\\nSi prenda un esempio di array di stringhe:\\n<pre><code>var personaggi = [\\"Simeoni\\", \\"Ortiz\\", \\"Prosdocimo\\"];\\n<\\/code><\\/pre>\\nLa lunghezza di un array corrisponde al numero di elementi che esso contiene: in questo caso &#xE8; pari a 3, dato che <tt>personaggi<\\/tt> contiene tre stringhe. Per ottenere tale numero &#xE8; necessario effettuare la seguente operazione:\\n<pre><code>var lunghezzaArray = personaggi.length;\\n<\\/code><\\/pre>\\nLa variabile <tt>lunghezzaArray<\\/tt> contiene il numero 3, che &#xE8; il numero di elementi presenti in <tt>personaggi<\\/tt>.",\r\n\r\n  "codiceLivello": "function Livello3 ( callbackFineLivello ) {\\n  CoreLevel.call( this, callbackFineLivello );\\n}\\n\\nLivello3.prototype = Object.create( CoreLevel.prototype );\\nLivello3.prototype.constructor = Livello3;\\n\\nLivello3.prototype.inizializzaArmiNemiche = function () {\\n  var areaPertenza = this.coreGame.canvas.width;\\n  var ritardoMassimo = 300 * (this.numeroOndata * 0.05);\\n  var velMin = 1.1 + this.numeroOndata * 0.05;\\n  var velMax = 1.3 + this.numeroOndata * 0.05;\\n  var numeroMissili = 15 + Math.floor( this.numeroOndata );\\n  var ritardoRand;\\n  var bersagli = this.coreGame.bersagliAttaccabili();\\n  \\n  for( var i = 0; i < numeroMissili ; i++ ) {\\n    var xRand = rand( 0, areaPertenza );\\n    var velRand = rand( velMin, velMax );\\n    ritardoRand = rand( 0, ritardoMassimo );\\n    this.coreGame.missiliNemici.push( new MissileNemico( {\\n      coloreTestata: ''yellow'',\\n      coloreScia: ''red'',\\n      massimoRaggioEsplosione: 30\\n    }, bersagli, areaPertenza, xRand, velRand,  ritardoRand, this.coreGame) );\\n  }\\n}\\n\\nLivello3.prototype.calcolaCoefficienteOndata = function ( ) {\\n  return this.numeroOndata * 1.2;\\n}\\n\\nLivello3.prototype.inizializzaTorrette = function ( ) {\\n  var coloreMissili = [];\\n  var nSoldati = 10;\\n  var Tmin = 50;\\n  var Tmax = 1000;\\n  var deltaTempo = 70;\\n  var deltaRaffreddamento = 3;\\n  var nMissili = 0;\\n  \\n  \\/\\/ Inizializzo munizioni per torrette\\n  this.munizioni = [];\\n  this.munizioni[0] = [];\\n  this.munizioni[1] = [];\\n  this.munizioni[2] = [];\\n  \\n  this.munizioni[0] = meccanismoCaricamento();\\n  this.munizioni[1] = meccanismoCaricamento();\\n  this.munizioni[2] = meccanismoCaricamento();\\n  \\n  var scegliColoreMissile = function ( tipo ) {\\n    switch( tipo ) { \\n      case ''plutonio'': return ''#33CCFF'';\\n      case ''plasma'': return ''blue'';\\n      case ''sonico'': return ''red'';\\n    }\\n  }\\n  \\n  coloreMissili = [];\\n  nMissili = (this.munizioni[0]).length;\\n  $.each( this.munizioni[0], function ( i, m ) {\\n    coloreMissili[i] = scegliColoreMissile( m.nucleoEsplosivo );    \\n  } );\\n  this.coreGame.aggiungiBatteriaAntimissile(\\n    new BatteriaAntimissile ( 35, 410, nMissili, nSoldati, coloreMissili, Tmin, Tmax, deltaTempo, deltaRaffreddamento, this.coreGame )\\n  );\\n  \\n  coloreMissili = [];\\n  nMissili = (this.munizioni[1]).length;\\n  $.each( this.munizioni[1], function ( i, m ) { \\n    coloreMissili[i] = scegliColoreMissile( m.nucleoEsplosivo );\\n  } );\\n  this.coreGame.aggiungiBatteriaAntimissile(\\n    new BatteriaAntimissile ( 255, 410, nMissili, nSoldati, coloreMissili, Tmin, Tmax, deltaTempo, deltaRaffreddamento, this.coreGame )\\n  );\\n  \\n  coloreMissili = [];\\n  nMissili = (this.munizioni[2]).length;\\n  $.each( this.munizioni[2], function ( i, m ) { \\n    coloreMissili[i] = scegliColoreMissile( m.nucleoEsplosivo );\\n  } );\\n  this.coreGame.aggiungiBatteriaAntimissile(\\n    new BatteriaAntimissile ( 475, 410, nMissili, nSoldati, coloreMissili, Tmin, Tmax, deltaTempo, deltaRaffreddamento, this.coreGame )\\n  );\\n};\\n\\nLivello3.prototype.scegliTorretta = function ( x, y, tasto ) {\\n  var indiceTorretta = 0;\\n  switch(tasto) {\\n    case 49: indiceTorretta = 0; break;\\n    case 50: indiceTorretta = 1; break;\\n    case 51: indiceTorretta = 2; break;\\n    default: return -1;\\n  }\\n  \\n  var torrettaAttuale = this.coreGame.batterieAntimissile[ indiceTorretta ];\\n  \\n  if ( torrettaAttuale.stato === BatteriaAntimissile.ATTIVA \\n      && torrettaAttuale.numeroMissili > 0 \\n      && torrettaAttuale.blocco === false )  \\n    return indiceTorretta;\\n  \\n  return -1;\\n};\\n\\nLivello3.prototype.sparo = function ( x, y, tasto ) {\\n  var indiceTorretta = this.scegliTorretta( x, y, tasto );\\n  \\n  if( indiceTorretta === -1 )\\n    return;\\n  \\n  var torretta = this.coreGame.batterieAntimissile[ indiceTorretta ];\\n  var n = torretta.numeroMissili - 1;\\n  var missile;\\n  \\n  if( this.munizioni[indiceTorretta][n].nucleoEsplosivo === ''plutonio'' ) {\\n    this.coreGame.missiliTerrestri.push( new MissileTerrestre( {\\n      xDiPartenza: torretta.x,\\n      yDiPartenza: torretta.y,\\n      xDiArrivo: x,\\n      yDiArrivo: y,\\n      coloreTestata: ''yellow'',\\n      coloreScia: ''#33CCFF'',\\n      massimoRaggioEsplosione: 30,\\n      distanzaPerFrame: 0.5\\n    }, this.coreGame ) );\\n  }\\n  if( this.munizioni[indiceTorretta][n].nucleoEsplosivo === ''sonico'' ) {\\n    this.coreGame.missiliTerrestri.push( new MissileTerrestre( {\\n      xDiPartenza: torretta.x,\\n      yDiPartenza: torretta.y,\\n      xDiArrivo: x,\\n      yDiArrivo: y,\\n      coloreTestata: ''yellow'',\\n      coloreScia: ''red'',\\n      massimoRaggioEsplosione: 2,\\n      distanzaPerFrame: 8\\n    }, this.coreGame ) );\\n  }\\n  if( this.munizioni[indiceTorretta][n].nucleoEsplosivo === ''plasma'' ) {\\n    this.coreGame.missiliTerrestri.push( new MissileTerrestre( {\\n      xDiPartenza: torretta.x,\\n      yDiPartenza: torretta.y,\\n      xDiArrivo: x,\\n      yDiArrivo: y,\\n      coloreTestata: ''yellow'',\\n      coloreScia: ''blue'',\\n      massimoRaggioEsplosione: 20,\\n      distanzaPerFrame: 7\\n    }, this.coreGame ) );\\n  }\\n  \\n  this.coreGame.aggiornaPunteggioMissiliSparati();\\n  torretta.numeroMissili--;\\n  torretta.temperatura += 200;\\n  var temperaturaMinima = this.calcolaTempMinima( torretta.temperatura );\\n  torretta.temperaturaSblocco = temperaturaMinima;\\n  if( torretta.temperatura >= 799 ) {\\n    torretta.blocco = true;\\n  }\\n}\\n\\n\\/\\/ interfaccia test - codice TAB 1\\n\\nvar _tipo = [''plasma'', ''plutonio'', ''sonico''];\\nvar _numeroMunizioni; \\nvar _munizioni = [];\\n\\nvar prelevaCarico = function( ) {\\n  var nMunizioniPlutonio = rand( 0, 4 );\\n  var nMunizioniSoniche = 4 - nMunizioniPlutonio;\\n  \\n  _numeroMunizioni = 10 + 4;\\n  _munizioni = [];\\n  for( _i = 0; _i < _numeroMunizioni; ++_i ) {\\n    var t = _tipo[0];\\n    \\n    var x = rand(0, 2);\\n    if ( x === 1 && nMunizioniPlutonio > 0 ) { \\n      t = _tipo[x]; nMunizioniPlutonio--; \\n    }\\n    if ( x === 2 && nMunizioniSoniche > 0 ) { \\n      t = _tipo[x]; nMunizioniSoniche--; \\n    }\\n    _munizioni[_i] = { id: _i, nucleoEsplosivo: t };\\n  }\\n  \\n  return _munizioni;\\n}\\n\\n\\/\\/ interfaccia test - codice TAB 2\\n\\nLivello3.prototype.calcolaTempMinima = function ( T ) {\\n  _temperatura = T\\n  _deltaTemperatura = 1;\\n  _contatoreCicli = 0;\\n  sistemaRaffreddamento();\\n  return _temperatura;\\n}\\n\\nvar _temperatura;\\nvar _contatoreCicli;\\nvar _deltaTemperatura;\\nvar rilevaTemperatura = function ( ) {\\n  return _temperatura;\\n}\\n\\nvar azionaPompeRaffreddamento = function ( ) {\\n  _temperatura -= _deltaTemperatura;\\n  _contatoreCicli++;\\n}",\r\n  \r\n  "fileVirtuali":\r\n  [\r\n    {"nomeFile": "CaricatoreMunizioni.js",\r\n    "consultazione": false,\r\n    "codice": "\\/**********\\nBenvenuto nel file di caricamento delle torrette del sistema Hob-2000.\\nOgni torretta preleva dal magazzino i missili, uno ad uno, per inserirli automaticamente nel caricatore della torretta.\\nSe sono presenti tipologie di proiettili difettose, modificare il codice seguente.\\n**********\\/\\n\\n\\/\\/ Questo codice viene ripetuto per ogni torretta automaticamente.\\nvar meccanismoCaricamento = function ( ) {\\n  \\/\\/ Variabile contenente il carico del magazzino.\\n  var magazzino = prelevaCarico();\\n  var numeroMunizioniMagazzino = magazzino.length;\\n  \\/\\/ Array vuoti per il caricatore della torretta e\\n  \\/\\/ per il deposito dei missili difettosi.\\n  var caricatoreTorretta = [];\\n  var proiettiliScartati = [];\\n  \\n\\/\\/###START_MODIFICABILE###\\n  for( i = 0; i < numeroMunizioniMagazzino; ++i ) {\\n    \\/\\/ Variabile contenente il proiettile i-esimo del magazzino.\\n    var proiettile = magazzino[i];\\n    \\/\\/ Se i missili al plutonio sono difettosi,\\n    \\/\\/ inserirli nell''array dei missili scartati.\\n    if( proiettile.nucleoEsplosivo === ''plutonio'' ) {\\n      caricatoreTorretta.push( proiettile );\\n    }\\n    \\/\\/ Se i missili al plasma sono difettosi,\\n    \\/\\/ inserirli nell''array dei missili scartati.\\n    if( proiettile.nucleoEsplosivo === ''plasma'' ) {\\n      caricatoreTorretta.push( proiettile  );\\n    }\\n    \\/\\/ Se i missili sonici sono difettosi,\\n    \\/\\/ inserirli nell''array dei missili scartati.\\n    if( proiettile.nucleoEsplosivo === ''sonico'' ) {\\n      caricatoreTorretta.push( proiettile );\\n    }\\n\\/\\/###END_MODIFICABILE###    \\n    if( caricatoreTorretta.length >= 10 )\\n      break;\\n  }\\n  return caricatoreTorretta;\\n}",\r\n    "test": "(\\nfunction () {\\n  \\n  var munizioni = meccanismoCaricamento();\\n  var unici = [];\\n  var esito = true;\\n\\n  $.each( munizioni, function ( i, m ) {\\n    if( _munizioni.indexOf( m ) < 0 ) { esito = false; }\\n    if( m.nucleoEsplosivo !== ''plasma'') { esito = false; }\\n    if( unici[m.id] !== undefined ) { esito = false; }\\n    \\n    unici[m.id] = true;\\n  });\\n  return esito;\\n} ) ();",\r\n    "descrizione": "L&#x27;obiettivo &#xE8; quello di inserire nel caricatore delle torrette solo le munizioni al plasma. I due array, caricatoreTorretta e proiettiliScartati devono essere utilizzati correttamente, inserendo nel primo solo le munizioni al plasma e nel secondo solo le munizioni scartate, cio&#xE8; quelle al plutonio e quelle soniche.",\r\n    "aiuto": "Per risolvere il caricamento errato delle munizioni, &#xE8; necessario modificare due istruzioni all&#x27;interno del for.<br>\\nLa prima &#xE8; la seguente:\\n<pre><code>if( proiettile.nucleoEsplosivo === &#x27;plutonio&#x27; ) {\\n&#x9;caricatoreTorretta.push( proiettile );\\n}\\n<\\/code><\\/pre>\\nche deve diventare:\\n<pre><code>if( proiettile.nucleoEsplosivo === &#x27;plutonio&#x27; ) {\\n  proiettiliScartati.push( proiettile  );\\n}\\n<\\/code><\\/pre>\\nLa seconda &#xE8; la seguente:\\n<pre><code>if( proiettile.nucleoEsplosivo === &#x27;sonico&#x27; ) {\\n&#x9;caricatoreTorretta.push( proiettile );\\n}\\n<\\/code><\\/pre>\\nche deve diventare:\\n<pre><code>if( proiettile.nucleoEsplosivo === &#x27;sonico&#x27; ) {\\n  proiettiliScartati.push( proiettile  );\\n}\\n<\\/code><\\/pre>",\r\n    "messaggioFallimento": "Sono presenti ancora missili difettosi nel caricatore."},\r\n    {"nomeFile": "SistemaRaffreddamento.js",\r\n    "consultazione": false,\r\n    "codice": "\\/**********\\nBenvenuto nel file di raffreddamento torrette del sistema Hob-2000.\\nIl codice seguente permette di modificare la soglia di temperatura minima, cio\\u00e8 la soglia di temperatura dalla quale \\u00e8 possibile ricominciare a sparare in caso di surriscaldamento della torretta.\\n\\nQuesto codice vale per tutte le torrette.\\n**********\\/\\nvar sistemaRaffreddamento = function ( ) {\\n  T = rilevaTemperatura();\\n  \\/\\/ Variabile contenente la soglia di temperatura minima. raggiunta la quale la torretta si sblocca.\\n  var sogliaTemperaturaMinima = 500;\\n  \\n  if( T >= 799 ) {\\n\\/\\/###START_MODIFICABILE###\\n    \\/\\/ Ciclo per la gestione delle pompe di raffreddamento.\\n    \\/\\/ La torretta deve essere raffreddata fino a che la temperatura T\\n    \\/\\/ non scende sotto la soglia minima.\\n    while( T <= sogliaTemperaturaMinima ) {\\n      azionaPompeRaffreddamento();\\n      T = rilevaTemperatura();\\n    }\\n\\/\\/###END_MODIFICABILE###\\n  }\\n}",\r\n    "test": "( function () {\\n  var esito = true;\\n  \\n  _deltaTemperatura = 1;\\n  _temperatura = 799;\\n  _contatoreCicli = 0;\\n  sistemaRaffreddamento();\\n  if( _temperatura + _contatoreCicli !== 799 ) {\\n    esito = false;\\n  }\\n    \\n  if( _contatoreCicli <= 0 ) {\\n    esito = false;\\n  }\\n  \\n  return esito; \\n}\\n) ();",\r\n    "descrizione": "L&#x27;obiettivo &#xE8; quello di impostare la corretta gestione del sistema di raffreddamento.<br>\\nLa soglia di temperatura minima &#xE8; la temperatura alla quale le torrette surriscaldate tornano a funzionare.<br>\\nIl sistema di raffreddamento delle torrette funziona nel modo seguente:\\n<li> ogni volta che una torretta supera i 799&#xB0;C, si blocca; <\\/li>\\n<li> a questo punto le pompe di raffreddamento abbassano la temperatura della torretta; <\\/li>\\n<li> raggiunta la soglia di temperatura minima, la torretta si sblocca e ricomincia a sparare. <\\/li>\\nIl punto da modificare &#xE8; la condizione del ciclo while: il ciclo deve rimanere attivo se la temperatura &#xE8; maggiore o uguale alla soglia decisa in precedenza.",\r\n    "aiuto": "La condizione del ciclo deve essere modificata nel seguente modo:\\n<pre><code>while( T &#x3E;= sogliaTemperaturaMinima )\\n<\\/code><\\/pre>",\r\n    "messaggioFallimento": "Il meccanismo di raffreddamento ha ancora dei problemi."}\r\n  ]\r\n}'),
(4, 4, 'Nelle fauci del Nemico', '{\r\n  "nomeLivello": "Nelle fauci del Nemico",\r\n  "numeroLivello": 4,\r\n  "costoAiuti": 2500,\r\n\r\n  "dialogoIniziale":\r\n  [\r\n    {"nome": "Ortiz",\r\n    "testo": "Entra pure, capitano."},\r\n    {"nome": "Simeoni",\r\n    "testo": "Ordini, generale?"},\r\n    {"nome": "Ortiz",\r\n    "testo": "S&#xEC;, ma dopo. Prima vorrei parlare di un certo file di configurazione per la calibrazione planetaria delle armi. Hai usato quel file, vero? Per sistemare le torrette l&#x27;altro giorno?"},\r\n    {"nome": "Simeoni",\r\n    "testo": "Non lo nego, signore."},\r\n    {"nome": "Ortiz",\r\n    "testo": "Non avevi il permesso di ficcare il naso in quel file! Sei solo un capitano! Qui stiamo parlando di difese che vengono utilizzate in tutta la galassia! Ti rendi conto di quello che sarebbe potuto accadere, se solo avessi sbagliato a manomettere quel file? E soprattutto, chi ti ha detto dell&#x27;esistenza di quel file?"},\r\n    {"nome": "Simeoni",\r\n    "testo": "L&#x27;ho trovato per caso signore. Stavo cercando di risolvere i problemi al sistema di puntamento e sparo. La fretta era tanta e non ho fatto complimenti."},\r\n    {"nome": "Ortiz",\r\n    "testo": "Non &#xE8; che qualche membro ausiliario della base ti ha aiutato? Qui dentro c&#x27;&#xE8; molta gente che deve imparare a tenere la bocca chiusa... e me ne occuper&#xF2; personalmente! Non posso tollerare che un capitano, con la responsabilit&#xE0; delle difese di un pianeta sotto attacco scavalchi le regole in questo modo!"},\r\n    {"nome": "Simeoni",\r\n    "testo": "Signore, alla fine ho salvato delle vite. Le vite dei nostri soldati, dei nostri compagni. Non mi pento di quello che ho fatto. E le posso giurare di aver fatto tutto da solo."},\r\n    {"nome": "Ortiz",\r\n    "testo": "Hai una bella faccia tosta, a non pentirti e a giurare il falso. Dovrei sbatterti davanti alla corte marziale, ma credo nelle seconde possibilit&#xE0;: far&#xF2; finta di crederti. D&#x27;altronde sei l&#x27;unico che pu&#xF2; svolgere la prossima missione... fate entrare il prigioniero!"},\r\n    {"nome": "Zurlin",\r\n    "testo": "Ehi ehi ehi, gi&#xF9; quelle mani! Ho dato la mia parola sulla spontaneit&#xE0; della mia collaborazione. Non c&#x27;&#xE8; bisogno di spingere."},\r\n    {"nome": "Ortiz",\r\n    "testo": "Capitano, ti presento Zurlin, il pilota del Nemico abbattuto ieri."},\r\n    {"nome": "Zurlin",\r\n    "testo": "Ciao, caro."},\r\n    {"nome": "Ortiz",\r\n    "testo": "Zurlin ha promesso di collaborare con noi. Pu&#xF2; aprirci una porta per entrare nel codice delle navi del Nemico. Si sta parlando di hacking."},\r\n    {"nome": "Simeoni",\r\n    "testo": "Interessante. Spiegami un po&#x27;, Zurlin: cosa dovrei fare?"},\r\n    {"nome": "Zurlin",\r\n    "testo": "Allora caro, come prima cosa ci sar&#xE0; da creare un&#x27;arma sabotata, che poi andr&#xE0; caricata nel codice della nave, in modo che il vostro Nemico usi questa invece che le armi antiterrestre che utilizza normalmente. Non potrai esagerare con le modifiche... altrimenti potrebbero accorgersene subito."},\r\n    {"nome": "Simeoni",\r\n    "testo": "Ottimo."},\r\n    {"nome": "Zurlin",\r\n    "testo": "Calmo, caro. A quel punto sar&#xE0; necessario effettuare un attacco a forza bruta alla password della nave, in modo che le modifiche che hai fatto alle armi possano essere salvate nel loro sistema. Ho gi&#xE0; fatto preparare alcuni file da cui puoi partire, ma non sar&#xE0; facile, caro..."},\r\n    {"nome": "Simeoni",\r\n    "testo": "E smettila di chiamarmi caro."},\r\n    {"nome": "Zurlin",\r\n    "testo": "Certo, caro."},\r\n    {"nome": "Ortiz",\r\n    "testo": "Basta con i convenevoli. Simeoni, questa &#xE8; la tua ultima possibilit&#xE0;. Vedi di tenerlo bene a mente."}\r\n  ],\r\n  \r\n  "dialogoFinale":\r\n  [\r\n    {"nome": "Ortiz",\r\n    "testo": "Un ottimo lavoro, direi."},\r\n    {"nome": "Simeoni",\r\n    "testo": "Grazie, generale. Grazie... Zurlin."},\r\n    {"nome": "Zurlin",\r\n    "testo": "Prego, caro."},\r\n    {"nome": "Ortiz",\r\n    "testo": "Portate via Zurlin. Cella 42. Con te non ho ancora finito."},\r\n    {"nome": "Zurlin",\r\n    "testo": "Ma certo, caro."},\r\n    {"nome": "Ortiz",\r\n    "testo": "Bene, ora che quel... quella prigioniera se n&#x27;&#xE8; andata, passiamo a noi. Mi &#xE8; piaciuto come hai condotto l&#x27;operazione. Hai sfruttato bene la seconda possibilit&#xE0; che ti ho dato e non voglio che si dica che non premio i miei uomini. Complimenti, maggiore Simeoni."},\r\n    {"nome": "Simeoni",\r\n    "testo": "Maggiore? Grazie, signore."},\r\n    {"nome": "Ortiz",\r\n    "testo": "Non gongolare troppo. La notte eterna di Bastiani ha ancora tanto da chiederti... e dovrai farti trovare pronto. Inutile ricordarti che non tollerer&#xF2; altre interferenze come quella del file di configurazione. Sono stato chiaro, maggiore?"},\r\n    {"nome": "Simeoni",\r\n    "testo": "Trasparente."}\r\n  ],\r\n  \r\n  "manuale": "Una <b>funzione<\\/b> &#xE8; un particolare tipo di valore per una variabile, ed &#xE8; una sequenza di istruzioni che definisce una particolare operazione. Una funzione pu&#xF2; avere dei parametri in ingresso oppure dei risultati in uscita.<br>\\nPer esempio, una funzione che possiede parametri in entrata e risultati in uscita &#xE8; la seguente:\\n<pre><code>var calcolaSomma = function ( a, b ) {\\n&#x9;return a + b;\\n}\\n<\\/code><\\/pre>\\nI parametri in ingresso sono <tt>a<\\/tt> e <tt>b<\\/tt>, che rappresentano le variabili da sommare, mentre <b>return<\\/b> &#xE8; una parola chiave, che indica che ci&#xF2; che la segue &#xE8; il risultato in uscita. Per utilizzare una funzione &#xE8; necessario chiamarla, tramite una chiamata di funzione. Ecco un esempio per la funzione <tt>calcolaSomma()<\\/tt>:\\n<pre><code>var risultato = calcolaSomma ( 4, 5 );\\n<\\/code><\\/pre>\\nIn <tt>risultato<\\/tt> verr&#xE0; inserito il risultato della funzione, dunque 9.<br>\\nUn particolare tipo di funzione &#xE8; la <b>funzione ricorsiva<\\/b>, cio&#xE8; una funzione che richiama se stessa pi&#xF9; volte, in modo da produrre un determinato tipo di risultato. Un esempio di funzione ricorsiva pu&#xF2; essere quella che calcola il fattoriale di un numero:\\n<pre><code>var fattoriale = function ( numero ) {\\n&#x9;if ( numero &#x3C; 0 ) {\\n&#x9;&#x9;return -1;\\n&#x9;}\\n&#x9;else if ( num == 0 ) {\\n&#x9;&#x9;return 1;\\n&#x9;}\\n&#x9;else {\\n&#x9;&#x9;return ( numero * fattoriale( numero - 1 ) );\\n&#x9;}\\n}\\n<\\/code><\\/pre>\\nIl risultato ritornato dalla funzione <tt>fattoriale( numero )<\\/tt> sar&#xE0; il valore del fattoriale di <tt>numero<\\/tt>.<br>\\nL&#x27;ultimo tassello della grammatica del linguaggio di programmazione &#xE8; il concetto di <b>classe<\\/b>. Una classe definisce un nuovo tipo di valore, che viene caratterizzato da una serie di caratteristiche, chiamati campi. Ecco un esempio, per la classe Soldato:\\n<pre><code>\\nfunction Soldato ( matricola, arma, battaglione ) {\\n&#x9;this.matricola = matricola;\\n&#x9;this.arma = arma;\\n&#x9;this.battaglione = battaglione;\\n}\\n<\\/code><\\/pre>\\nLa parola chiave <b>this<\\/b> indica che la parola che segue descrive una caratteristica propria della classe.<br>\\nLa classe viene poi usata per creare degli <b>oggetti<\\/b>, cio&#xE8;, nel caso della classe <tt>Soldato<\\/tt>, tanti soldati, ognuno con le sue caratteristiche.<br>\\nUna classe viene creata tramite la parola chiave <i>function<\\/i>, perch&#xE9; viene chiamata per la creazione di oggetti proprio come se fosse una funzione.<br>\\nPer creare nuovi soldati, dunque, &#xE8; necessario eseguire le seguenti istruzioni:\\n<pre><code>var soldatoFanteria = new Soldato ( 1, &#x22;fucile al plasma&#x22;, &#x22;UTF-8, 42 battaglione&#x22; );\\nvar soldatoArtiglieria = new Soldato ( 2, &#x22;granate a rimbalzo&#x22;, &#x22;UTF-16, 30 battaglione&#x22; );\\nvar soldatoScelto = new Soldato ( 3, &#x22;phaser sonici&#x22;, &#x22;UTF-32, 1 battaglione&#x22; );\\n<\\/code><\\/pre>",\r\n\r\n  "codiceLivello": "function Livello4 ( callbackFineLivello ) {\\n  CoreLevel.call( this, callbackFineLivello );\\n}\\n\\nLivello4.prototype = Object.create( CoreLevel.prototype );\\nLivello4.prototype.constructor = Livello4;\\n\\nLivello4.prototype.inizializzaMirino = function () {\\n  this.mirino = new Mirino( this.canvas.width \\/ 2, this.canvas.height \\/ 2, 10.0 );\\n}\\n\\nLivello4.prototype.inizializzaArmiNemiche = function () {\\n  var batteria;\\n  \\n  hackingPassword();\\n  \\n  if ( _login === false ) {\\n    var combinazioniPossibili = [];\\n    var combinazione = [''*'', ''*'', ''*''];\\n    generaPassword( combinazioniPossibili, combinazione, 0 );\\n    console.log( \\"Password generate: \\" )\\n    $.each( combinazioniPossibili, function ( i, c ) {\\n      var stringa = \\"Tentativo #\\" + (i+1) + \\": \\";\\n      $.each( c, function( i, x ) { stringa = stringa + x + \\" \\"; } );\\n      console.log( stringa )\\n    } )\\n    \\n    console.log(\\"Autenticazione per salvataggio modifiche al sistema Ibrido non riuscita.\\");\\n  } else {    \\n    console.log(\\"Autenticazione per il salvataggio modifiche al sistema Ibrido riuscita.\\")\\n  }\\n  \\n  if ( controlloArmaNemicaSabotata() === true && _login === true ) {\\n    batteria = controlloInizializzazioneBatteriaAntiterrestri();\\n  } else {\\n    batteria = new BatteriaAntiterrestre();\\n  } \\n  \\n  var areaPertenza = this.coreGame.canvas.width;\\n  var ritardoMassimo = batteria.tempoRicaricaMassimo * this.numeroOndata * 0.05;\\n  var xRand;\\n  var velRand;\\n  var ritardoRand;\\n  var bersagli = this.coreGame.bersagliAttaccabili();\\n  var numeroMissili = batteria.numeroMissili + Math.floor( this.numeroOndata );\\n  \\n  var raggio = 10;\\n  \\n  if ( batteria.tipoMunizione === \\"massima_esplosione\\" ) {\\n    raggio = 30;\\n  }\\n    \\n  for( var i = 0; i < numeroMissili ; i++ ) {\\n    xRand = rand( 0, areaPertenza );\\n    velRand = rand( 1.1 + this.numeroOndata * 0.05, \\n      batteria.propellente\\/2.6 + this.numeroOndata * 0.05 );\\n    ritardoRand = rand( 0, ritardoMassimo );\\n    this.coreGame.missiliNemici.push( new MissileNemico( {\\n      coloreTestata: ''yellow'',\\n      coloreScia: ''red'',\\n      massimoRaggioEsplosione: raggio\\n    }, bersagli, areaPertenza, xRand, velRand,  ritardoRand, this.coreGame) );\\n  }\\n}\\n\\nLivello4.prototype.sparo = function ( x, y, tasto ) {\\n  var indiceTorretta = this.scegliTorretta( x, y, tasto);\\n  if( indiceTorretta === -1 ) {\\n    return;\\n  }\\n  \\n  var torretta = this.coreGame.batterieAntimissile[ indiceTorretta ];\\n  \\n  var raggio = 30;\\n  var vel = 7;\\n  var incrementoTemperatura = 0;\\n  var velMirino = 16;\\n  \\n  if( indiceTorretta === 0 ) { incrementoTemperatura = 200; vel = 10; velMirino = 30; }\\n  if( indiceTorretta === 1 ) { incrementoTemperatura = 200; vel = 2.5; velMirino = 3; }\\n  if( indiceTorretta === 2 ) { incrementoTemperatura = 200; vel = 5; velMirino = 30; }\\n  \\n  this.coreGame.mirino.distanzaPerFrame = velMirino;\\n  \\n  this.coreGame.missiliTerrestri.push( new MissileTerrestre( {\\n    xDiPartenza: torretta.x,\\n    yDiPartenza: torretta.y,\\n    xDiArrivo: x,\\n    yDiArrivo: y,\\n    coloreTestata: ''yellow'',\\n    coloreScia: ''blue'',\\n    massimoRaggioEsplosione: raggio,\\n    distanzaPerFrame: vel\\n  }, this.coreGame ) );\\n  this.coreGame.aggiornaPunteggioMissiliSparati();\\n  torretta.numeroMissili--;\\n  torretta.temperatura += incrementoTemperatura;\\n  \\n  torretta.temperaturaSblocco = 500;\\n  if( torretta.temperatura >= 799 ) {\\n    torretta.blocco = true;\\n  }\\n}\\n\\nLivello4.prototype.calcolaCoefficienteOndata = function () {\\n  return this.numeroOndata * 1.2;\\n}\\n\\n\\/\\/ interfaccia test - codice utente\\nfunction BatteriaAntiterrestre () {\\n  this.tempoRicaricaMassimo = 100;\\n  this.propellente = 5;\\n  this.numeroMissili = 20;\\n  this.tipoMunizione = \\"massima_efficacia\\";\\n}\\n\\nvar controlloArmaNemicaSabotata = function () {\\n  var arma = new ArmaNemicaSabotata();\\n  var risultato = true;\\n  if ( arma.tempoRicaricaMassimo < 150 ) {\\n    console.log( \\"Attenzione: tempo di ricarica troppo basso!\\" );\\n    risultato = false;\\n  }\\n  if ( arma.tempoRicaricaMassimo > 200 ) {\\n    console.log( \\"Attenzione: tempo di ricarica troppo alto!\\" );\\n    risultato = false;\\n  }\\n  if ( arma.propellente < 3 ) {\\n    console.log( \\"Attenzione: propellente obsoleto!\\" );\\n    risultato = false;\\n  }\\n  if ( arma.propellente > 3.5 ) {\\n    console.log( \\"Attenzione: propellente troppo potente!\\" );\\n    risultato = false;\\n  }\\n  if ( arma.numeroMissili > 15 ) {\\n    console.log( \\"Attenzione: troppi missili caricati!\\" );\\n    risultato = false;\\n  }\\n  if ( arma.numeroMissili < 10 ) {\\n    console.log( \\"Attenzione: numero missili insufficiente!\\" );\\n    risultato = false;\\n  }\\n  if ( arma.tipoMunizione !== \\"massima_esplosione\\" ) {\\n    console.log( \\"Attenzione: tipologia di munizioni inesistente!\\" );\\n    risultato = false;\\n  }\\n  return risultato;\\n}\\n\\nvar controlloInizializzazioneBatteriaAntiterrestri = function () {\\n  var batteria = inizializzaBatteriaAntiterrestri();\\n  if ( batteria instanceof ArmaNemicaSabotata ) {\\n    console.log(\\"Arma nemica sabotata correttamente.\\");\\n  } else {\\n    console.log(\\"Arma nemica non sabotata!\\");\\n  }\\n  return batteria;\\n}\\n  var _simboli = [''A'', ''B'', ''C''];\\n  var _password = [\\n    _simboli[ rand( 0, 2 ) ],\\n    _simboli[ rand( 0, 2 ) ],\\n    _simboli[ rand( 1, 2 ) ]\\n  ];\\n\\nvar _login = false;\\n\\nvar autenticazioneOperatoreNonTerrestre = function ( tentativo ) {\\n  if (\\n    tentativo[0] === _password[0]\\n    && tentativo[1] === _password[1]\\n    && tentativo[2] === _password[2]\\n  ) {\\n    console.log(\\"Password trovata.\\");\\n    _login = true;\\n    return true;\\n  } else {\\n    _login = false;\\n    return false;\\n  }\\n}\\n\\nvar copiaArray = function ( array ) {\\n  return array.slice( 0 );\\n}",\r\n  \r\n  "fileVirtuali":\r\n  [\r\n    {"nomeFile": "ArmaSabotata.js",\r\n    "consultazione": false,\r\n    "codice": "\\/**********\\nCiao, caro. Il codice che vedi di seguito \\u00e8 una mia idea su come potrebbe essere un''arma sabotata da caricare al posto di quelle standard all''interno del codice del Nemico.\\nAggiusta i parametri della classe per rendere l''arma pi\\u00f9 consona alle tue esigenze.\\nSaluti,\\nZurlin\\n**********\\/\\n  \\nfunction ArmaNemicaSabotata () {\\n\\/\\/###START_MODIFICABILE###\\n  \\/\\/ Campo per il tempo di ricarica massimo delle torrette antiterrestri.\\n  this.tempoRicaricaMassimo = 100;\\n  \\/\\/ Campo per la tipologia di propellente.\\n  \\/\\/ Pi\\u00f9 \\u00e8 alto il numero, migliore \\u00e8 il propellente.\\n  this.propellente = 5;\\n  \\/\\/ Campo per il numero di missili della torretta antiterrestre.\\n  this.numeroMissili = 20;\\n  \\/\\/ Tipologia di munizione.\\n  \\/\\/ Pu\\u00f2 essere \\"massima_efficacia\\" oppure \\"massima_esplosione\\".\\n  this.tipoMunizione = \\"massima_efficacia\\";\\n\\/\\/###END_MODIFICABILE###\\n}",\r\n    "test": "(function () {\\n  var arma = new ArmaNemicaSabotata;\\n  if (\\n    arma.tempoRicaricaMassimo >= 150\\n    && arma.tempoRicaricaMassimo <= 200\\n    && arma.propellente >= 3\\n    && arma.propellente <= 3.5\\n    && arma.numeroMissili <= 15\\n    && arma.numeroMissili >= 10\\n    && arma.tipoMunizione === \\"massima_esplosione\\"\\n  ) {\\n    return true;\\n  } else {\\n    return false;\\n  }\\n}) ();",\r\n    "descrizione": "L&#x27;obiettivo &#xE8; modificare le caratteristiche della classe dell&#x27;arma sabotata, che poi dovr&#xE0; essere caricata al posto delle armi funzionanti nel codice del Nemico. <br> Si deve dunque alzare il tempo di ricarica massimo, cio&#xE8; il tempo che ogni torretta impiega a ricaricare il cannone; poi ridurre il numero del propellente, poich&#xE9; pi&#xF9; &#xE8; basso, pi&#xF9; indica propellente scadente; poi diminuire il numero di missili contenuti nel caricatore; infine cambiare il tipo di missile da <i>massima_efficacia<\\/i> a <i>massima_esplosione<\\/i>. Quest&#x27;ultima modifica permette di avere un maggior numero di esplosioni a catena: aumentando infatti la carica esplosiva del missile, se viene abbattuto in aria, ne distrugger&#xE0; molti altri intorno.",\r\n    "aiuto": "Le caratteristiche della classe andranno cambiate nel seguente modo:\\n<pre><code>this.tempoRicaricaMassimo = 200;\\nthis.propellente = 3;\\nthis.numeroMissili = 10;\\nthis.tipoMunizione = &#x22;massima_esplosione&#x22;;\\n<\\/code><\\/pre>",\r\n    "messaggioFallimento": "Errore nel sabotaggio dell''arma."},\r\n    {"nomeFile": "CaricamentoArma.js",\r\n    "consultazione": false,\r\n    "codice": "\\/**********\\nFile di creazione delle batterie antiterrestri.\\nRicordiamo che \\u00e8 necessario autenticarsi in seguito a qualunque modifica.\\n**********\\/\\n\\nvar inizializzaBatteriaAntiterrestri = function () {\\n\\/\\/###START_MODIFICABILE###\\n  \\/\\/ Variabile contenente la batteria antiterrestre\\n  \\/\\/ di tipo standard.\\n  var batteria = new BatteriaAntiterrestre();\\n  return batteria;\\n\\/\\/###END_MODIFICABILE###\\n}",\r\n    "test": "(function () {\\n  var risultato = inizializzaBatteriaAntiterrestri();\\n  if ( risultato instanceof ArmaNemicaSabotata ) {\\n    return true;\\n  } else {\\n    return false;\\n  }\\n}) ();",\r\n    "descrizione": "L&#x27;obiettivo &#xE8; caricare la classe dell&#x27;arma sabotata al posto della classe delle armi normali utilizzata dal Nemico.",\r\n    "aiuto": "Bisogna creare un oggetto non di classe BatteriaAntiterrestre(), ma di classe ArmaNemicaSabotata().\\n<pre><code>var batteria = new ArmaNemicaSabotata();\\n<\\/code><\\/pre>",\r\n    "messaggioFallimento": "Errore di inserimento arma sabotata."},\r\n    {"nomeFile": "HackingPassword.js",\r\n    "consultazione": false,\r\n    "codice": "\\/**********\\nCiao, caro.\\nNella funzione generaPassword() hai un esempio di funzione ricorsiva per il calcolo della password necessaria per salvare le modifiche.\\nQuesto codice prova ad indovinare la password generando tutte le combinazioni possibili dei caratteri ''A'', ''B'' e ''C''.\\nNella funzione hackingPassword() queste combinazioni vengono mandate al server centrale del Nemico, continuando finch\\u00e9 non viene approvata una delle combinazioni.\\nSpero di non aver fatto errori.\\nSaluti,\\nZurlin\\n**********\\/\\n\\n\\/\\/ Simboli utilizzati per la password.\\nvar simboli = [''A'', ''B'', ''C''];\\n\\/**********\\nFunzione per la generazione di tutte le password possibili.\\nProvo tutti i simboli per la prima cifra:\\n    - A * *\\n    - B * * \\n    - C * *\\nA questo punto il gioco \\u00e8 fatto: per le restanti cifre * * ripeto la stessa procedura come se volessi generare tutte le combinazioni di una password di lunghezza 2:\\n    - A * * -> A A *\\n            -> A B *\\n            -> A C *\\ne cos\\u00ec via... \\n**********\\/\\nvar generaPassword = function ( combinazioniPossibili, combinazione, k ) {\\n  var combinazione = copiaArray( combinazione );\\n  \\/\\/ k indica il numero della cifra che si sta cercando di indovinare\\n\\/\\/###START_MODIFICABILE###\\n  if (k === 2) {\\n\\/\\/###END_MODIFICABILE###\\n    combinazioniPossibili.push( combinazione );\\n  }\\n  else {\\n  \\tvar i = 0;\\n    for( i; i < 3; i++ ) {\\n      combinazione[ k ] = simboli[ i ];\\n      generaPassword( combinazioniPossibili, combinazione, k + 1 );\\n    }\\n  }\\n}\\n\\n\\/\\/ Funzione per il test delle combinazioni.\\nvar hackingPassword = function () {\\n  var combinazioniPossibili = [];\\n  \\/\\/ Variabile con la combinazione di partenza.\\n  var combinazione = [''*'', ''*'', ''*''];\\n  \\/\\/ Chiamata alla funzione di generazione delle password,\\n  \\/\\/ che inserisce tutte quelle possibili nella variabile\\n  \\/\\/ combinazioniPossibili.\\n  generaPassword( combinazioniPossibili, combinazione, 0 );\\n  \\n  var hacking = false;\\n  \\/\\/ Questo ciclo scorre tutte le combinazioni\\n  \\/\\/ e le manda una ad una al server del Nemico.\\n  for ( var i = 0; i < combinazioniPossibili.length; ++i ) {\\n    \\/\\/ Qui viene chiamata la funzione per il test della password.\\n    hacking = autenticazioneOperatoreNonTerrestre( combinazioniPossibili[ i ] );\\n    \\/\\/ Se la password \\u00e8 corretta, usciamo dal ciclo.\\n    if ( hacking === true ) {\\n      break;\\n    }\\n  }\\n  return hacking;\\n}",\r\n    "test": "( function () {\\n  hackingPassword();\\n  var risultato = _login;\\n  return risultato;\\n}\\n) ();",\r\n    "descrizione": "L&#x27;obiettivo &#xE8; creare tutte le combinazioni possibili di password per forzare il salvataggio delle nostre modifiche. L&#x27;importante &#xE8; che, essendoci tre caratteri, il ciclo e la funzione ricorsiva vengano chiamate tre volte.",\r\n    "aiuto": "Per eseguire la ricorsione il numero corretto di volte, &#xE8; necessario modificare la funzione <tt>generaPassword()<\\/tt>, in particolare il controllo effettuato dall&#x27;<i>if<\\/i>:\\n<pre><code>if ( k === 3 )\\n<\\/code><\\/pre>\\nQuesto per creare tutte le combinazioni possibili.",\r\n    "messaggioFallimento": "Generazione password fallita."}\r\n  ]\r\n}');
INSERT INTO `livello` (`idlivello`, `numero`, `nome`, `json`) VALUES
(5, 5, 'Gli Ibridi', '{\r\n  "nomeLivello": "Gli Ibridi",\r\n  "numeroLivello": 5,\r\n  "costoAiuti": 3000,\r\n\r\n  "dialogoIniziale":\r\n  [\r\n    {"nome": "Simeoni",\r\n    "testo": "Salve, Zurlin."},\r\n    {"nome": "Zurlin",\r\n    "testo": "Ciao caro. Non sei a parlare con il tuo bel generale?"},\r\n    {"nome": "Simeoni",\r\n    "testo": "Non &#xE8; affar tuo."},\r\n    {"nome": "Zurlin",\r\n    "testo": "Non mi sembra un buon modo per cominciare. Del resto, se sei qui, vuol dire che hai bisogno di me..."},\r\n    {"nome": "Simeoni",\r\n    "testo": "D&#x27;accordo, scusami. La vita del soldato spesso fa dimenticare le buone maniere. E la curiosit&#xE0; mi mette fretta."},\r\n    {"nome": "Zurlin",\r\n    "testo": "Curiosit&#xE0;? Immaginavo... vuoi sapere da dove vengo vero? Vuoi sapere cosa si cela oltre buio del deserto, cosa vive oltre la vostra piccola galassia?"},\r\n    {"nome": "Simeoni",\r\n    "testo": "Diciamo che l&#x27;unico pregio di questa maledetta guerra &#xE8; l&#x27;avermi fatto capire che l&#x27;universo &#xE8; immenso... e noi non siamo che briciole davanti alla sua vastit&#xE0;."},\r\n    {"nome": "Zurlin",\r\n    "testo": "Una buona risposta, caro. Del resto, la curiosit&#xE0; accomuna noi a voi. Facciamo cos&#xEC;: mi stai simpatico, caro. Ho deciso che risponder&#xF2; a tre delle tue domande. Tre sole. Null&#x27;altro."},\r\n    {"nome": "Simeoni",\r\n    "testo": "E tu cosa ci guadagni?"},\r\n    {"nome": "Zurlin",\r\n    "testo": "Diciamo che mi devi un favore."},\r\n    {"nome": "Simeoni",\r\n    "testo": "D&#x27;accordo. Prima domanda: da dove vieni?"},\r\n    {"nome": "Zurlin",\r\n    "testo": "Dal pianeta Tronk, dall&#x27;altro capo del deserto. L&#xEC; la mia razza ha sempre vissuto, guardando le stelle come d&#xE8;i e non come destinazioni. Una civilt&#xE0; barbara, per dirla come voi terrestri. Poi, un secolo fa, abbiamo cominciato a sviluppare tecnologie sempre pi&#xF9; avanzate, fino ad accorgerci che le stelle e l&#x27;universo erano immensi, ma esplorabili. Prossima domanda, caro."},\r\n    {"nome": "Simeoni",\r\n    "testo": "Un secolo solo per sviluppare armi e navi capaci di viaggiare a velocit&#xE0; ultraluce... come avete fatto?"},\r\n    {"nome": "Zurlin",\r\n    "testo": "Buona domanda, terrestre. Siete stati voi. Un secolo fa, raccontano le nostre storie, arrivarono navi terrestri dal cielo. Scappavano dalla miseria dei pianeti dell&#x27;orlo della vostra galassia... come Bastiani. Pianeti poveri e dimenticati dal governo. Masse di disperati hanno costruito navi ultraluce dai rottami ed hanno iniziato una seconda colonizzazione, questa volta pacifica, che ha portato all&#x27;unione dei nostri popoli. Un&#x27;unione che mi piace definire letterale: voi ci chiamate il Nemico, ma il termine corretto sarebbe... Ibridi. Siamo l&#x27;alba di una nuova razza, mezzi terrestri e mezzi tronk, che si sta affacciando nel vasto panorama dell&#x27;universo. E siamo curiosi e... spaventati."},\r\n    {"nome": "Simeoni",\r\n    "testo": "E perch&#xE9; combattete?"},\r\n    {"nome": "Zurlin",\r\n    "testo": "Noi non volevamo attaccarvi. Stiamo scappando. Abbiamo provato a venire in pace ma... siete stati voi ad attaccarci per primi, invece che accoglierci. In pieno stile terrestre."},\r\n    {"nome": "Simeoni",\r\n    "testo": "Scappate da cosa?"},\r\n    {"nome": "Zurlin",\r\n    "testo": "Ah ah ah. Tre domande, umano. Non una di pi&#xF9;. Ma voglio farti un regalo, caro. Sappi che non sei l&#x27;unico terrestre a conoscere questa storia."},\r\n    {"nome": "Simeoni",\r\n    "testo": "Cosa?"},\r\n    {"nome": "Zurlin",\r\n    "testo": "Ah ah ah. Non crucciarti, caro. Ed ora vattene alla tua sala di comando. Sono sicuro che gli Ibridi vi stiano attaccando di nuovo."},\r\n    {"nome": "Simeoni",\r\n    "testo": "..."},\r\n    {"nome": "Ortiz",\r\n    "testo": "Eccoti, maggiore. Ho un compito da affidarti."},\r\n    {"nome": "Simeoni",\r\n    "testo": "Signors&#xEC;, signore."},\r\n    {"nome": "Ortiz",\r\n    "testo": "La situazione delle torrette &#xE8; ormai ingestibile. Come ben sai ogni batteria di tre torrette presenta anomalie che non sono pi&#xF9; sostenibili. Il tuo compito sar&#xE0; quello di prendere le parti migliori da ogni torretta e renderle tutte utilizzabili."},\r\n    {"nome": "Simeoni",\r\n    "testo": "Sissignore. Devo sapere altro?"},\r\n    {"nome": "Ortiz",\r\n    "testo": "Le torrette hanno tre componenti fondamentali. La prima &#xE8; l&#x27;energia del compressore del gas, che si occupa dello sparo del missile; la seconda &#xE8; l&#x27;energia destinata allo spostamento del cannone; la terza &#xE8; la pressione del carburante. Questi tre valori devono essere esatti, cio&#xE8; n&#xE9; troppo alti, n&#xE9; troppo bassi. Dando troppa energia, per esempio, si aumenterebbe la velocit&#xE0; di riscaldamento della torretta; abbassandola troppo si avrebbe un&#x27;esagerata lentezza da parte del meccanismo. Hai capito?"},\r\n    {"nome": "Simeoni",\r\n    "testo": "Sissignore."},\r\n    {"nome": "Ortiz",\r\n    "testo": "Bene. Buona fortuna, maggiore."}\r\n  ],\r\n  \r\n  "dialogoFinale":\r\n  [\r\n    {"nome": "Ortiz",\r\n    "testo": "Ottimo lavoro, maggiore."},\r\n    {"nome": "Simeoni",\r\n    "testo": "Grazie, generale. Si sa niente della detenuta?"},\r\n    {"nome": "Ortiz",\r\n    "testo": "Stai attento con la curiosit&#xE0;. Anche se in questo caso &#xE8; giustificabile."},\r\n    {"nome": "Simeoni",\r\n    "testo": "Chiedo scusa, signore."},\r\n    {"nome": "Ortiz",\r\n    "testo": "Comunque no, si &#xE8; chiusa in uno strano silenzio. Mi inquieta, quella... quella donna. Ha una calma glaciale, anche per essere un soldato. &#xC8; tutto, Simeoni."},\r\n    {"nome": "Simeoni",\r\n    "testo": "..."},\r\n    {"nome": "Prosdocimo",\r\n    "testo": "Se n&#x27;&#xE8; andato? Il generale?"},\r\n    {"nome": "Simeoni",\r\n    "testo": "S&#xEC;, Prosdocimo."},\r\n    {"nome": "Prosdocimo",\r\n    "testo": "Eh eh eh... non mi piace quell&#x27;uomo. Ieri l&#x27;ho sentito parlare per ore e, quando &#xE8; uscito dalla stanza, sono entrato."},\r\n    {"nome": "Simeoni",\r\n    "testo": "Prosdocimo devi stare attento. L&#x27;ultima volta mi ha quasi sbattuto davanti alla corte marziale, a causa della nostra curiosit&#xE0;."},\r\n    {"nome": "Prosdocimo",\r\n    "testo": "Tranquillo. Posso entrare nel suo ufficio. Del resto, faccio le pulizie. Eh eh eh."},\r\n    {"nome": "Simeoni",\r\n    "testo": "Non sei molto credibile come uomo delle pulizie. Un giorno dovrai raccontarmi la tua storia."},\r\n    {"nome": "Prosdocimo",\r\n    "testo": "Ti prometto che lo far&#xF2;. Un giorno... eh eh eh. Comunque, il tuo generale stava parlando da solo. Ha parlato per ore, come ti ho detto. Ma dalla stanza &#xE8; uscito solo lui. E non ha telefoni, n&#xE9; ricevitori..."}\r\n  ],\r\n  \r\n  "manuale": "Preso un oggetto, &#xE8; possibile accedere alle sue caratteristiche. Si prenda come esempio la classe Soldato vista in precedenza:\\n<pre><code>\\nfunction Soldato ( matricola, arma, battaglione ) {\\n&#x9;this.matricola = matricola;\\n&#x9;this.arma = arma;\\n&#x9;this.battaglione = battaglione;\\n}\\n<\\/code><\\/pre>\\nInizializziamo tre soldati di esempio:\\n<pre><code>var soldatoFanteria = new Soldato ( 1, &#x22;fucile al plasma&#x22;, &#x22;UTF-8, 42 battaglione&#x22; );\\nvar soldatoArtiglieria = new Soldato ( 2, &#x22;granate a rimbalzo&#x22;, &#x22;UTF-16, 30 battaglione&#x22; );\\nvar soldatoScelto = new Soldato ( 3, &#x22;cannoni sonici&#x22;, &#x22;UTF-32, 1 battaglione&#x22; );\\n<\\/code><\\/pre>\\nPer accedere alla caratteristica <tt>arma<\\/tt> di un soldato, &#xE8; necessario utilizzare un&#x27;istruzione come la seguente:\\n<pre><code>var armaSoldatoFanteria = soldatoFanteria.arma;\\n<\\/code><\\/pre>\\nLa variabile <tt>armaSoldatoFanteria<\\/tt> contiene ora la stringa &#x22;fucile al plasma&#x22;. Ovviamente il meccanismo per estrarre le altre caratteristiche &#xE8; uguale:\\n<pre><code>var matricolaSoldatoArtiglieria = soldatoArtiglieria.matricola;\\n<\\/code><\\/pre>\\nconterr&#xE0; 2, mentre:\\n<pre><code>var battaglioneSoldatoScelto = soldatoScelto.battaglione;\\n<\\/code><\\/pre>\\nconterr&#xE0; &#x22;UTF-32, 1 battaglione&#x22;.",\r\n\r\n  "codiceLivello": "function Livello5 ( callbackFineLivello ) {\\n  CoreLevel.call( this, callbackFineLivello );\\n  \\n  var _magazzino = [\\n    { combustibile: ''O2'' }, { combustibile: ''H2O2'' }, { combustibile: ''O2'' },\\n    { combustibile: ''H2O2'' }, { combustibile: ''H2'' }, { combustibile: ''H2O2'' },\\n    { combustibile: ''H2'' }, { combustibile: ''O2'' }, { combustibile: ''H2'' },\\n    { combustibile: ''O2'' }, { combustibile: ''H2'' }, { combustibile: ''H2O2'' },\\n    { combustibile: ''H2O2'' }, { combustibile: ''H2O2'' }, { combustibile: ''O2'' },\\n    { combustibile: ''H2'' }, { combustibile: ''O2'' }, { combustibile: ''H2'' },\\n    { combustibile: ''O2'' }, { combustibile: ''H2'' }, { combustibile: ''H2O2'' },\\n    { combustibile: ''H2O2'' }, { combustibile: ''H2O2'' }, { combustibile: ''O2'' },\\n    { combustibile: ''H2'' }, { combustibile: ''O2'' }, { combustibile: ''H2'' },\\n    { combustibile: ''O2'' }, { combustibile: ''H2'' }, { combustibile: ''H2O2'' },\\n    { combustibile: ''H2O2'' }, { combustibile: ''H2O2'' }, { combustibile: ''O2'' },\\n    { combustibile: ''H2'' }, { combustibile: ''O2'' }, { combustibile: ''H2'' },\\n    { combustibile: ''O2'' }, { combustibile: ''H2'' }, { combustibile: ''H2O2'' },\\n    { combustibile: ''H2O2'' }, { combustibile: ''H2O2'' }, { combustibile: ''O2'' },\\n    { combustibile: ''H2O2'' }, { combustibile: ''H2O2'' }, { combustibile: ''O2'' },\\n    { combustibile: ''H2'' }, { combustibile: ''O2'' }, { combustibile: ''H2'' },\\n    { combustibile: ''O2'' }, { combustibile: ''H2'' }, { combustibile: ''H2O2'' },\\n    { combustibile: ''H2O2'' }, { combustibile: ''H2O2'' }, { combustibile: ''O2'' },\\n    { combustibile: ''H2'' }, { combustibile: ''O2'' }, { combustibile: ''H2'' },\\n    { combustibile: ''O2'' }, { combustibile: ''H2'' }, { combustibile: ''H2O2'' },\\n    { combustibile: ''H2O2'' }, { combustibile: ''H2O2'' }, { combustibile: ''O2'' },\\n    { combustibile: ''H2'' }, { combustibile: ''O2'' }, { combustibile: ''H2'' },\\n    { combustibile: ''O2'' }, { combustibile: ''H2'' }, { combustibile: ''H2O2'' },\\n    { combustibile: ''H2O2'' }, { combustibile: ''H2O2'' }, { combustibile: ''O2'' }\\n  ];\\n  \\n  this.torretta = [];\\n  this.torretta[0] = new TorrettaDestra( _magazzino, new _Caricatore( ), new _Compressore( ), new _Generatore( ), new _Mirino( ));\\n  this.torretta[1] = new TorrettaCentrale( _magazzino, new _Caricatore( ), new _Compressore( ), new _Generatore( ), new _Mirino( ));\\n  this.torretta[2] = new TorrettaSinistra( _magazzino, new _Caricatore( ), new _Compressore( ), new _Generatore( ), new _Mirino( ));\\n  \\n  this.torretta[0].caricaMissile(); \\n  this.torretta[1].caricaMissile();\\n  this.torretta[2].caricaMissile();\\n}\\n\\nLivello5.prototype = Object.create( CoreLevel.prototype );\\nLivello5.prototype.constructor = Livello5;\\n\\nLivello5.prototype.inizializzaArmiNemiche = function () {\\n  var areaPertenza = this.coreGame.canvas.width;\\n  var ritardoMassimo = 500 * (this.numeroOndata * 0.05);\\n  var velMin = 1.3 + this.numeroOndata * 0.05;\\n  var velMax = 1.4 + this.numeroOndata * 0.05;\\n  var numeroMissili = 18 + Math.floor( this.numeroOndata );\\n  var ritardoRand;\\n  var bersagli = this.coreGame.bersagliAttaccabili();\\n  \\n  for( var i = 0; i < numeroMissili ; i++ ) {\\n    var xRand = rand( 0, areaPertenza );\\n    var velRand = rand( velMin, velMax );\\n    ritardoRand = rand( 0, ritardoMassimo );\\n    this.coreGame.missiliNemici.push( new MissileNemico( {\\n      coloreTestata: ''yellow'',\\n      coloreScia: ''red'',\\n      massimoRaggioEsplosione: 30\\n    }, bersagli, areaPertenza, xRand, velRand,  ritardoRand, this.coreGame) );\\n  }\\n}\\n\\nLivello5.prototype.calcolaCoefficienteOndata = function ( ) {\\n  return this.numeroOndata * 1.2;\\n}\\n\\nLivello5.prototype.sparo = function ( x, y, tasto ) {\\n  var indiceTorretta = this.scegliTorretta( x, y, tasto );\\n  if( indiceTorretta === -1 )\\n    return;\\n  var torretta = this.coreGame.batterieAntimissile[ indiceTorretta ];\\n  var torrettaVirtuale = this.torretta[ indiceTorretta ];\\n  \\n  torrettaVirtuale.generatore._capacita = 100;\\n  torrettaVirtuale.spara( x, y );\\n  \\n  this.coreGame.mirino.distanzaPerFrame = torrettaVirtuale.mirino._velocita;\\n  \\n  this.opzioniMissili = {\\n    coloreTestata: ''yellow'',\\n    coloreScia: ''blue'',\\n    massimoRaggioEsplosione: 20,\\n    distanzaPerFrame: torrettaVirtuale.compressore._pressione\\n  }\\n  \\n  this.opzioniMissili.xDiPartenza = torretta.x;\\n  this.opzioniMissili.yDiPartenza = torretta.y;\\n  this.opzioniMissili.xDiArrivo = x;\\n  this.opzioniMissili.yDiArrivo = y;\\n  this.coreGame.missiliTerrestri.push( \\n    new MissileTerrestre( this.opzioniMissili, this.coreGame ) \\n  );\\n  \\n  this.coreGame.aggiornaPunteggioMissiliSparati();\\n  torretta.numeroMissili--;\\n  torretta.temperatura += ((100 - torrettaVirtuale.generatore._capacita) \\/ 100) * 200;\\n  torretta.temperaturaSblocco = 500;\\n  if( torretta.temperatura >= 799 ) {\\n    torretta.blocco = true;\\n  }\\n}\\n\\nfunction _Caricatore ( ) { this._missili = []; this._i = 0; this._missileSparato; }\\n_Caricatore.prototype.getParametri = function () {  return this._missili; }\\n_Caricatore.prototype.immagazzinaMissile = function ( missile, generatore ) {\\n  this._i++;\\n  this._missili.push( missile );\\n}\\n_Caricatore.prototype.caricaProiettile = function ( generatore ) {\\n  var energiaErogata = generatore.prelevaEnergia( 5 );\\n  if( energiaErogata > 0 ) {\\n    this._i--;\\n    return this._missili[this._i];\\n  } else {\\n    return null;\\n  }\\n}\\n_Caricatore.prototype.innescaFuoco = function ( missile, compressore, generatore ) {\\n  var energiaErogata = generatore.prelevaEnergia( 5 );\\n  if( energiaErogata > 0 ) {\\n    this._missileSparato = missile;\\n  } else {\\n    return null;\\n  }\\n}\\n\\nfunction _Generatore ( ) { this._capacita = 100; }\\n_Generatore.prototype.getParametri = function () {  return this._capacita; }\\n_Generatore.prototype.prelevaEnergia = function ( energia ) {\\n  if( this._capacita - energia < 0 ) {\\n    var capacitaMassima = this._capacita;\\n    this._capacita = 0;\\n    return capacitaMassima;\\n  }\\n  this._capacita -= energia;\\n  return energia;\\n}\\n\\nfunction _Mirino ( ) { this._velocita = 10.0; }\\n_Mirino.prototype.getParametri = function () { return this._velocita; }\\n_Mirino.prototype.spostaMirino = function ( x, y, energia, generatore ) {\\n  var energiaErogata = generatore.prelevaEnergia( energia );\\n  \\n  if( energiaErogata > 10 )\\n    energiaErogata = 10;\\n  this._velocita = (energiaErogata \\/ 10.0) * 30.0;\\n}\\n\\nfunction _Compressore ( ) { this._pressione = 0.0; } \\n_Compressore.prototype.getParametri = function () { return this._pressione; }\\n_Compressore.prototype.aumentaPressione = function ( combustibile, pressione, energia, generatore ) {\\n  var energiaErogata = generatore.prelevaEnergia( energia );\\n  var coefficientePressione = 0.0;\\n  \\n  if( pressione > 30 )\\n    pressione = 30;\\n  \\n  coefficientePressione = 1 - (Math.abs(15 - pressione) \\/ (30 - 15));\\n  \\n  if( energiaErogata > 30 )\\n    energiaErogata = 30;\\n  this._pressione = (energiaErogata \\/ 30.0) * 15.0 * coefficientePressione;\\n}",\r\n  \r\n  "fileVirtuali":\r\n  [\r\n    \r\n    {"nomeFile": "ConfigTorrettaSx.js",\r\n    "consultazione": false,\r\n    "codice": "\\/**********\\nBenvenuto nel file di configurazione della torretta sinistra del sistema Hob-2000.\\nOgni torretta contiene tre variabili fondamentali: l''energia per il compressore del gas di propulsione, l''energia per lo spostamento del cannone e la pressione del carburante del missile.\\nCambiare queste configurazioni solo se si notano malfunzionamenti nel meccanismo di sparo delle torrette.\\n**********\\/\\n\\n\\/\\/ Classe della torretta sinistra\\nfunction TorrettaSinistra ( magazzino, caricatore, compressore, generatore, mirino ) {\\n  this.magazzino = magazzino;\\n  this.mirino = mirino;\\n  this.generatore = generatore;\\n  this.caricatore = caricatore;\\n  this.compressore = compressore;\\n}\\n\\n\\/\\/ Funzione per il caricamento del missile.\\nTorrettaSinistra.prototype.caricaMissile = function () {\\n  for ( i = 0; i < this.magazzino.length; ++i ) {\\n    this.caricatore.immagazzinaMissile( this.magazzino[i], this.generatore );\\n  }\\n}\\n\\n\\/\\/ Funzione per lo spostamento del cannone.\\nTorrettaSinistra.prototype.mira = function ( x, y, energiaFornita ) {\\n  this.mirino.spostaMirino( x, y, energiaFornita, this.generatore );\\n}\\n\\n\\/\\/ Funzione per lo sparo.\\nTorrettaSinistra.prototype.spara = function ( x, y ) {\\n\\/\\/###START_MODIFICABILE###\\n  \\/\\/ Variabile contenente l''energia del compressore del gas di propulsione.\\n  var energiaCompressore = 30;\\n  \\/\\/ Variabile contenente l''energia per lo spostamento del cannone.\\n  var energiaMirino = 10;\\n  \\/\\/ Variabile contenente la pressione del carburante del missile.\\n  var pressioneCarburante = 5;\\n\\/\\/###END_MODIFICABILE###\\n  var missile = this.caricatore.caricaProiettile( this.generatore );  \\n  this.compressore.aumentaPressione( missile.combustibile, pressioneCarburante, \\n    energiaCompressore, this.generatore );\\n  this.mira( x, y, energiaMirino );\\n  this.caricatore.innescaFuoco( missile, this.compressore, this.generatore );\\n}",\r\n    "test": "( function () {\\n  var esito = true;\\n  \\n  var magazzino = [{ combustibile: ''O2'' }, { combustibile: ''H2'' }, { combustibile: ''H2O2'' }]\\n  var torretta = new TorrettaSinistra( magazzino, new _Caricatore( ), \\n                                    new _Compressore( ), new _Generatore( ), \\n                                    new _Mirino( ));\\n  torretta.caricaMissile();\\n  \\n  torretta.generatore._capacita = 100;\\n  torretta.spara( 0, 0 );\\n  if( torretta.generatore._capacita !== 100 - (5 + 5 + 10 + 30)) esito = false;\\n  if( torretta.mirino._velocita !== 30.0) esito = false;\\n  if( torretta.compressore._pressione !== 15) esito = false;\\n  \\n  torretta.generatore._capacita = 100;\\n  torretta.spara( 0, 0 );\\n  if( torretta.compressore._pressione !== 15) esito = false;\\n  \\n  torretta.generatore._capacita = 100;\\n  torretta.spara( 0, 0 );\\n  if( torretta.compressore._pressione !== 15) esito = false;\\n  \\n  return esito;\\n} ) ();",\r\n    "descrizione": "Come sempre si hanno tre torrette: quella centrale, quella sinistra e quella destra.<br>\\nLe torrette hanno tre caratteristiche fondamentali:\\n<li>l&#x27;energia del compressore del gas di propulsione, indicata dalla variabile <tt>energiaCompressore<\\/tt>: questa variabile controlla la velocit&#xE0; dei missili;<\\/li>\\n<li>l&#x27;energia per lo spostamento del cannone indicata dalla variabile <tt>energiaMirino<\\/tt>: questa variabile indica la velocit&#xE0; con cui il cannone riesce a seguire il mirino;<\\/li>\\n<li>la pressione del carburante del missile, indicata dalla variabile <tt>pressioneCarburante<\\/tt>: anche questa variabile influenza la velocit&#xE0; dei missili.<\\/li>\\nQueste tre variabili devono contenere il valore corretto, dunque n&#xE9; troppo alto, n&#xE9; troppo basso. Alcune torrette hanno gi&#xE0; il valore corretto per quella particolare caratteristica: tale valore deve essere applicato anche alle altre torrette, in modo da ottenerne tre uguali.<br>\\nL&#x27;obiettivo &#xE8; comprendere quali dei valori della torretta sinistra devono essere applicati alle altre e quali devono essere scartati in favore di valori provenienti dalle altre torrette.",\r\n    "aiuto": "I valori corretti per le torrette sono quelli intermedi.<br>\\nPrendendo dunque i tre valori della variabile <tt>energiaCompressore<\\/tt>, che sono:\\n<li>5, per la torretta centrale;<\\/li>\\n<li>30, per la torretta sinistra;<\\/li>\\n<li>80, per la torretta destra;<\\/li>\\n&#xE8; necessario sceglierne uno non troppo alto e non troppo basso, dunque 30.<br>\\nTutte le torrette dovranno utilizzare tale valore per la variabile <tt>energiaCompressore<\\/tt>, dunque:\\n<pre><code>var energiaCompressore = 30;\\n<\\/code><\\/pre>\\nPrendendo invece i tre valori della variabile <tt>energiaMirino<\\/tt>, che sono:\\n<li>1, per la torretta centrale;<\\/li>\\n<li>10, per la torretta sinistra;<\\/li>\\n<li>50, per la torretta destra;<\\/li>\\n&#xE8; necessario sceglierne uno non troppo alto e non troppo basso, dunque 10.<br>\\nTutte le torrette dovranno utilizzare tale valore per la variabile <tt>energiaMirino<\\/tt>, dunque:\\n<pre><code>var energiaMirino = 10;\\n<\\/code><\\/pre>\\nPrendendo infine i tre valori della variabile <tt>pressioneCarburante<\\/tt>, che sono:\\n<li>15, per la torretta centrale;<\\/li>\\n<li>5, per la torretta sinistra;<\\/li>\\n<li>20, per la torretta destra;<\\/li>\\n&#xE8; necessario sceglierne uno non troppo alto e non troppo basso, dunque 15.<br>\\nTutte le torrette dovranno utilizzare tale valore per la variabile <tt>pressioneCarburante<\\/tt>, dunque:\\n<pre><code>var pressioneCarburante = 10;\\n<\\/code><\\/pre>",\r\n    "messaggioFallimento": "Configurazione torretta sinistra fallita."},\r\n    \r\n    {"nomeFile": "ConfigTorrettaCentro.js",\r\n    "consultazione": false,\r\n    "codice": "\\/**********\\nBenvenuto nel file di configurazione della torretta centrale del sistema Hob-2000.\\nOgni torretta contiene tre variabili fondamentali: l''energia per il compressore del gas di propulsione, l''energia per lo spostamento del cannone e la pressione del carburante del missile.\\nCambiare queste configurazioni solo se si notano malfunzionamenti nel meccanismo di sparo delle torrette.\\n**********\\/\\n\\n\\/\\/ Classe della torretta centrale.\\nfunction TorrettaCentrale ( magazzino, caricatore, compressore, generatore, mirino ) {\\n  this.magazzino = magazzino;\\n  this.mirino = mirino;\\n  this.generatore = generatore;\\n  this.caricatore = caricatore;\\n  this.compressore = compressore;\\n}\\n\\n\\/\\/ Funzione per il caricamento del missile.\\nTorrettaCentrale.prototype.caricaMissile = function () {\\n  for ( i = 0; i < this.magazzino.length; ++i ) {\\n    this.caricatore.immagazzinaMissile( this.magazzino[i], this.generatore );\\n  }\\n}\\n\\n\\/\\/ Funzione per lo spostamento del cannone.\\nTorrettaCentrale.prototype.mira = function ( x, y, energiaFornita ) {\\n  this.mirino.spostaMirino( x, y, energiaFornita, this.generatore );\\n}\\n\\n\\/\\/ Funzione per lo sparo.\\nTorrettaCentrale.prototype.spara = function ( x, y ) {\\n\\/\\/###START_MODIFICABILE###\\n  \\/\\/ Variabile contenente l''energia del compressore del gas di propulsione.\\n  var energiaCompressore = 5;\\n  \\/\\/ Variabile contenente l''energia per lo spostamento del cannone.\\n  var energiaMirino = 1;\\n  \\/\\/ Variabile contenente la pressione del carburante del missile.\\n  var pressioneCarburante = 15;\\n\\/\\/###END_MODIFICABILE###\\n  var missile = this.caricatore.caricaProiettile( this.generatore );\\n  this.compressore.aumentaPressione( missile.combustibile, pressioneCarburante, \\n    energiaCompressore, this.generatore );\\n  this.mira( x, y, energiaMirino );\\n  this.caricatore.innescaFuoco( missile, this.compressore, this.generatore );\\n}",\r\n    "test": "( function () {\\n  var esito = true;\\n  \\n  var magazzino = [{ combustibile: ''O2'' }, { combustibile: ''H2'' }, { combustibile: ''H2O2'' }]\\n  var torretta = new TorrettaCentrale( magazzino, new _Caricatore( ), \\n                                    new _Compressore( ), new _Generatore( ), \\n                                    new _Mirino( ));\\n  torretta.caricaMissile();\\n  \\n  torretta.generatore._capacita = 100;\\n  torretta.spara( 0, 0 );\\n  if( torretta.generatore._capacita !== 100 - (5 + 5 + 10 + 30)) esito = false;\\n  if( torretta.mirino._velocita !== 30.0) esito = false;\\n  if( torretta.compressore._pressione !== 15) esito = false;\\n  \\n  torretta.generatore._capacita = 100;\\n  torretta.spara( 0, 0 );\\n  if( torretta.compressore._pressione !== 15) esito = false;\\n  \\n  torretta.generatore._capacita = 100;\\n  torretta.spara( 0, 0 );\\n  if( torretta.compressore._pressione !== 15) esito = false;\\n  \\n  return esito;\\n}\\n) ();",\r\n    "descrizione": "Come sempre si hanno tre torrette: quella centrale, quella sinistra e quella destra.<br>\\nLe torrette hanno tre caratteristiche fondamentali:\\n<li>l&#x27;energia del compressore del gas di propulsione, indicata dalla variabile <tt>energiaCompressore<\\/tt>: questa variabile controlla la velocit&#xE0; dei missili;<\\/li>\\n<li>l&#x27;energia per lo spostamento del cannone indicata dalla variabile <tt>energiaMirino<\\/tt>: questa variabile indica la velocit&#xE0; con cui il cannone riesce a seguire il mirino;<\\/li>\\n<li>la pressione del carburante del missile, indicata dalla variabile <tt>pressioneCarburante<\\/tt>: anche questa variabile influenza la velocit&#xE0; dei missili.<\\/li>\\nQueste tre variabili devono contenere il valore corretto, dunque n&#xE9; troppo alto, n&#xE9; troppo basso. Alcune torrette hanno gi&#xE0; il valore corretto per quella particolare caratteristica: tale valore deve essere applicato anche alle altre torrette, in modo da ottenerne tre uguali.<br>\\nL&#x27;obiettivo &#xE8; comprendere quali dei valori della torretta centrale devono essere applicati alle altre e quali devono essere scartati in favore di valori provenienti dalle altre torrette.",\r\n    "aiuto": "I valori corretti per le torrette sono quelli intermedi.<br>\\nPrendendo dunque i tre valori della variabile <tt>energiaCompressore<\\/tt>, che sono:\\n<li>5, per la torretta centrale;<\\/li>\\n<li>30, per la torretta sinistra;<\\/li>\\n<li>80, per la torretta destra;<\\/li>\\n&#xE8; necessario sceglierne uno non troppo alto e non troppo basso, dunque 30.<br>\\nTutte le torrette dovranno utilizzare tale valore per la variabile <tt>energiaCompressore<\\/tt>, dunque:\\n<pre><code>var energiaCompressore = 30;\\n<\\/code><\\/pre>\\nPrendendo invece i tre valori della variabile <tt>energiaMirino<\\/tt>, che sono:\\n<li>1, per la torretta centrale;<\\/li>\\n<li>10, per la torretta sinistra;<\\/li>\\n<li>50, per la torretta destra;<\\/li>\\n&#xE8; necessario sceglierne uno non troppo alto e non troppo basso, dunque 10.<br>\\nTutte le torrette dovranno utilizzare tale valore per la variabile <tt>energiaMirino<\\/tt>, dunque:\\n<pre><code>var energiaMirino = 10;\\n<\\/code><\\/pre>\\nPrendendo infine i tre valori della variabile <tt>pressioneCarburante<\\/tt>, che sono:\\n<li>15, per la torretta centrale;<\\/li>\\n<li>5, per la torretta sinistra;<\\/li>\\n<li>20, per la torretta destra;<\\/li>\\n&#xE8; necessario sceglierne uno non troppo alto e non troppo basso, dunque 15.<br>\\nTutte le torrette dovranno utilizzare tale valore per la variabile <tt>pressioneCarburante<\\/tt>, dunque:\\n<pre><code>var pressioneCarburante = 10;\\n<\\/code><\\/pre>",\r\n    "messaggioFallimento": "Configurazione torretta centrale fallita."},\r\n    \r\n    {"nomeFile": "ConfigTorrettaDx.js",\r\n    "consultazione": false,\r\n    "codice": "\\/**********\\nBenvenuto nel file di configurazione della torretta destra del sistema Hob-2000.\\nOgni torretta contiene tre variabili fondamentali: l''energia per il compressore del gas di propulsione, l''energia per lo spostamento del cannone e la pressione del carburante del missile.\\nCambiare queste configurazioni solo se si notano malfunzionamenti nel meccanismo di sparo delle torrette.\\n**********\\/\\n\\n\\/\\/ Classe della torretta destra\\nfunction TorrettaDestra ( magazzino, caricatore, compressore, generatore, mirino ) {\\n  this.magazzino = magazzino;\\n  this.mirino = mirino;\\n  this.generatore = generatore;\\n  this.caricatore = caricatore;\\n  this.compressore = compressore;\\n}\\n\\n\\/\\/ Funzione per il caricamento del missile.\\nTorrettaDestra.prototype.caricaMissile = function () {\\n  for ( i = 0; i < this.magazzino.length; ++i ) {\\n    this.caricatore.immagazzinaMissile( this.magazzino[i], this.generatore );\\n  }\\n}\\n\\n\\/\\/ Funzione per lo spostamento del cannone.\\nTorrettaDestra.prototype.mira = function ( x, y, energiaFornita ) {\\n  this.mirino.spostaMirino( x, y, energiaFornita, this.generatore );\\n}\\n\\n\\/\\/ Funzione per lo sparo.\\nTorrettaDestra.prototype.spara = function ( x, y ) {\\n\\/\\/###START_MODIFICABILE###\\n  \\/\\/ Variabile contenente l''energia del compressore del gas di propulsione.\\n  var energiaCompressore = 80;\\n  \\/\\/ Variabile contenente l''energia per lo spostamento del cannone.\\n  var energiaMirino = 50;\\n  \\/\\/ Variabile contenente la pressione del carburante del missile.\\n  var pressioneCarburante = 20;\\n\\/\\/###END_MODIFICABILE###\\n  var missile = this.caricatore.caricaProiettile( this.generatore );\\n  this.compressore.aumentaPressione( missile.combustibile, pressioneCarburante, \\n    energiaCompressore, this.generatore );\\n  this.mira( x, y, energiaMirino );\\n  this.caricatore.innescaFuoco( missile, this.compressore, this.generatore );\\n}",\r\n    "test": "( function () {\\n  var esito = true;\\n  \\n  var magazzino = [{ combustibile: ''O2'' }, { combustibile: ''H2'' }, { combustibile: ''H2O2'' }]\\n  var torretta = new TorrettaDestra( magazzino, new _Caricatore( ), \\n                                    new _Compressore( ), new _Generatore( ), \\n                                    new _Mirino( ));\\n  torretta.caricaMissile();\\n  \\n  torretta.generatore._capacita = 100;\\n  torretta.spara( 0, 0 );\\n  if( torretta.generatore._capacita !== 100 - (5 + 5 + 10 + 30)) esito = false;\\n  if( torretta.mirino._velocita !== 30.0) esito = false;\\n  if( torretta.compressore._pressione !== 15) esito = false;\\n  \\n  torretta.generatore._capacita = 100;\\n  torretta.spara( 0, 0 );\\n  if( torretta.compressore._pressione !== 15) esito = false;\\n  \\n  torretta.generatore._capacita = 100;\\n  torretta.spara( 0, 0 );\\n  if( torretta.compressore._pressione !== 15) esito = false;\\n  \\n  return esito;\\n} ) ();",\r\n    "descrizione": "Come sempre si hanno tre torrette: quella centrale, quella sinistra e quella destra.<br>\\nLe torrette hanno tre caratteristiche fondamentali:\\n<li>l&#x27;energia del compressore del gas di propulsione, indicata dalla variabile <tt>energiaCompressore<\\/tt>: questa variabile controlla la velocit&#xE0; dei missili;<\\/li>\\n<li>l&#x27;energia per lo spostamento del cannone indicata dalla variabile <tt>energiaMirino<\\/tt>: questa variabile indica la velocit&#xE0; con cui il cannone riesce a seguire il mirino;<\\/li>\\n<li>la pressione del carburante del missile, indicata dalla variabile <tt>pressioneCarburante<\\/tt>: anche questa variabile influenza la velocit&#xE0; dei missili.<\\/li>\\nQueste tre variabili devono contenere il valore corretto, dunque n&#xE9; troppo alto, n&#xE9; troppo basso. Alcune torrette hanno gi&#xE0; il valore corretto per quella particolare caratteristica: tale valore deve essere applicato anche alle altre torrette, in modo da ottenerne tre uguali.<br>\\nL&#x27;obiettivo &#xE8; comprendere quali dei valori della torretta destra devono essere applicati alle altre e quali devono essere scartati in favore di valori provenienti dalle altre torrette.",\r\n    "aiuto": "I valori corretti per le torrette sono quelli intermedi.<br>\\nPrendendo dunque i tre valori della variabile <tt>energiaCompressore<\\/tt>, che sono:\\n<li>5, per la torretta centrale;<\\/li>\\n<li>30, per la torretta sinistra;<\\/li>\\n<li>80, per la torretta destra;<\\/li>\\n&#xE8; necessario sceglierne uno non troppo alto e non troppo basso, dunque 30.<br>\\nTutte le torrette dovranno utilizzare tale valore per la variabile <tt>energiaCompressore<\\/tt>, dunque:\\n<pre><code>var energiaCompressore = 30;\\n<\\/code><\\/pre>\\nPrendendo invece i tre valori della variabile <tt>energiaMirino<\\/tt>, che sono:\\n<li>1, per la torretta centrale;<\\/li>\\n<li>10, per la torretta sinistra;<\\/li>\\n<li>50, per la torretta destra;<\\/li>\\n&#xE8; necessario sceglierne uno non troppo alto e non troppo basso, dunque 10.<br>\\nTutte le torrette dovranno utilizzare tale valore per la variabile <tt>energiaMirino<\\/tt>, dunque:\\n<pre><code>var energiaMirino = 10;\\n<\\/code><\\/pre>\\nPrendendo infine i tre valori della variabile <tt>pressioneCarburante<\\/tt>, che sono:\\n<li>15, per la torretta centrale;<\\/li>\\n<li>5, per la torretta sinistra;<\\/li>\\n<li>20, per la torretta destra;<\\/li>\\n&#xE8; necessario sceglierne uno non troppo alto e non troppo basso, dunque 15.<br>\\nTutte le torrette dovranno utilizzare tale valore per la variabile <tt>pressioneCarburante<\\/tt>, dunque:\\n<pre><code>var pressioneCarburante = 10;\\n<\\/code><\\/pre>",\r\n    "messaggioFallimento": "Configurazione torretta destra fallita."}\r\n  ]\r\n}');
INSERT INTO `livello` (`idlivello`, `numero`, `nome`, `json`) VALUES
(6, 6, 'La telecamera', '{\r\n  "nomeLivello": "La telecamera",\r\n  "numeroLivello": 6,\r\n  "costoAiuti": 3000,\r\n\r\n  "dialogoIniziale":\r\n  [\r\n    {"nome": "Prosdocimo",\r\n    "testo": "Il generale non si &#xE8; fatto vedere nemmeno stamattina? Eh eh eh..."},\r\n    {"nome": "Simeoni",\r\n    "testo": "Purtroppo no, caro Prosdocimo. Stavo pensando infatti che senza ordini sono un po&#x27; limitato..."},\r\n    {"nome": "Prosdocimo",\r\n    "testo": "Beh potrei aver sentito qualcosa davanti alla macchinetta del caff&#xE8;, oggi a pranzo..."},\r\n    {"nome": "Simeoni",\r\n    "testo": "Smettila con i tuoi giochetti e parla."},\r\n    {"nome": "Prosdocimo",\r\n    "testo": "I nuovi tecnici, che stanno lentamente imparando il JS, hanno un nuovo sistema, ovviamente sperimentale, che permetterebbe di avere un unico pulsante di sparo. Questo garantirebbe una difesa planetaria migliore, sicuramente."},\r\n    {"nome": "Simeoni",\r\n    "testo": "Ma i tre pulsanti sono direttamente collegati alle torrette, associati uno ad uno. Come &#xE8; possibile utilizzare un solo pulsante? Quale torretta sparerebbe?"},\r\n    {"nome": "Prosdocimo",\r\n    "testo": "&#xC8; qui che viene il bello: hanno inventato un sistema per scegliere automaticamente la torretta, prendendo quella pi&#xF9; vicina al bersaglio dello sparo. Mi spiego meglio: prima, come hai ben detto, ogni pulsante era direttamente collegato ad una torretta. Con il nuovo sistema si utilizza il click del mouse per dare il comando di sparo, che viene preso da un filtro. Questo filtro, tramite l&#x27;algoritmo che hanno scritto questi tecnici, decide quale sia la torretta migliore per effettuare lo sparo e manda il comando di sparo ad essa. Capito?"},\r\n    {"nome": "Simeoni",\r\n    "testo": "Pi&#xF9; o meno... in pratica cliccando con il mouse che uso per muovere il mirino, attivo un meccanismo di sparo che seleziona la torretta migliore."},\r\n    {"nome": "Prosdocimo",\r\n    "testo": "Esattamente. Si tratta di andare a modificare la parte di codice che si occupa del meccanismo di sparo. E pensare che si sono ispirati alla macchinetta del caff&#xE8;, eh eh eh..."},\r\n    {"nome": "Simeoni",\r\n    "testo": "Ottimo. Ho solo una domanda. Esistono questi tecnici? C&#x27;&#xE8; davvero qualcuno che sta imparando il JS?"},\r\n    {"nome": "Prosdocimo",\r\n    "testo": "&#xC8; davvero cos&#xEC; importante? Eh eh eh..."}\r\n  ],\r\n  \r\n  "dialogoFinale":\r\n  [\r\n    {"nome": "Ortiz",\r\n    "testo": "... purtroppo &#xE8; cos&#xEC;. Non posso fare di meglio. I ficcanaso sono ovunque, e il nostro piano dovr&#xE0; subire un leggero cambiamento. Non &#xE8; colpa mia!"},\r\n    {"nome": "Simeoni",\r\n    "testo": "Maggiore Simeoni a rapporto, signore."},\r\n    {"nome": "Ortiz",\r\n    "testo": "Non ti hanno insegnato a bussare??"},\r\n    {"nome": "Simeoni",\r\n    "testo": "Chiedo scusa signore. Ma con chi stavate parlando? Era un discorso decisamente sospetto..."},\r\n    {"nome": "Ortiz",\r\n    "testo": "Niente scuse Simeoni. E per quanto riguarda i miei discorsi, sei in arresto."},\r\n    {"nome": "Simeoni",\r\n    "testo": "Non puoi farlo! Con chi sei in combutta? Con il Nemico?"},\r\n    {"nome": "Ortiz",\r\n    "testo": "Sciocchezze. Tu sei in combutta con gli Ibridi."},\r\n    {"nome": "Simeoni",\r\n    "testo": "Ah! Allora ho ragione! Ibridi &#xE8; una parola che pochi conoscono qui... traditore!"},\r\n    {"nome": "Ortiz",\r\n    "testo": "Non ti permetto di parlarmi in questo modo! E smettila di urlare. Ho qua delle bellissime prove sul tuo tradimento. Pensi che non ci siano delle telecamere nelle celle? Ho una ripresa fantastica del giovane maggiore Simeoni che parla con la prigioniera Zurlin... purtroppo manca l&#x27;audio, ma sar&#xE0; facile far credere alla corte marziale che sei un rinnegato."},\r\n    {"nome": "Simeoni",\r\n    "testo": "Ma &#xE8; una bugia... io e Zurlin abbiamo parlato d&#x27;altro."},\r\n    {"nome": "Ortiz",\r\n    "testo": "Ah, ne sono certo. Ma ha poca rilevanza... ci&#xF2; che importa &#xE8; la parola della corte marziale. Pensi che crederanno al giovane maggiore, mentalmente distrutto dalla guerra o a un generale che per anni ha pattugliato il deserto dei Barbari?"},\r\n    {"nome": "Simeoni",\r\n    "testo": "Maledetto..."},\r\n    {"nome": "Ortiz",\r\n    "testo": "Hai provato ad entrare in gioco pi&#xF9; grosso di te, Simeoni. Ora... guardie! Portatelo via!"},\r\n    {"nome": "Simeoni",\r\n    "testo": "Questa mano l&#x27;hai vinta tu Ortiz. Ma non finisce qui."}\r\n  ],\r\n  \r\n  "manuale": "<b>Chiamata di funzione<\\/b><br>\\nSi prenda una funzione di prova, come la seguente:\\n<pre><code>\\nvar calcolaSomma = function ( a, b ) {\\n&#x9;return a + b;\\n}\\n<\\/code><\\/pre>\\nPer effetuare una chiamata a tale funzione, &#xE8; necessario creare una variabile che contenga il risultato dell&#x27;operazione, e inserire tra le parentesi i valori che nella funzione diventeranno <tt>a<\\/tt> e <tt>b<\\/tt>:\\n<pre><code>var risultatoSomma = calcolaSomma( 4, 5 );\\n<\\/code><\\/pre>\\nNella variabile <tt>risultatoSomma<\\/tt> ora c&#x27;&#xE8; il numero 9.<br>\\n<b>Area di sparo<\\/b><br>\\nL&#x27;area di sparo &#xE8; un piano cartesiano: le coordinate vengono dunque espresse in termini di <i>x<\\/i> e <i>y<\\/i>, che indicano la posizione di un punto all&#x27;interno di quest&#x27;area.<br>\\nIl mirino ha dunque una <i>x<\\/i> ed una <i>y<\\/i>, che indicano precisamente dove si trova in quel momento il puntatore collegato al mouse.",\r\n\r\n  "codiceLivello": "function Livello6 ( callbackFineLivello ) {\\n  CoreLevel.call( this, callbackFineLivello );\\n}\\n\\nLivello6.prototype = Object.create( CoreLevel.prototype );\\nLivello6.prototype.constructor = Livello6;\\n\\nLivello6.prototype.inizializzaArmiNemiche = function () {\\n  var areaPertenza = this.coreGame.canvas.width;\\n  var ritardoMassimo = 800 * (this.numeroOndata * 0.05);\\n  var velMin = 1.3 + this.numeroOndata * 0.08;\\n  var velMax = 1.4 + this.numeroOndata * 0.08;\\n  var numeroMissili = 15 + Math.floor( this.numeroOndata );\\n  var numeroMissiliSdoppiabili = rand( 0, numeroMissili );\\n  var ritardoRand;\\n  var bersagli = this.coreGame.bersagliAttaccabili();\\n  \\n  for( var i = 0; i < numeroMissili ; i++ ) {\\n    var xRand = rand( 0, areaPertenza );\\n    var velRand = rand( velMin, velMax );\\n    ritardoRand = rand( 0, ritardoMassimo );\\n    this.coreGame.missiliNemici.push( new MissileNemico( {\\n      coloreTestata: ''yellow'',\\n      coloreScia: ''red'',\\n      massimoRaggioEsplosione: 30\\n    }, bersagli, areaPertenza, xRand, velRand,  ritardoRand, this.coreGame) );\\n  }\\n  \\n  for( var i = 0; i < numeroMissiliSdoppiabili ; i++ ) {\\n    var xRand = rand( 0, areaPertenza );\\n    var velRand = rand( velMin, velMax );\\n    ritardoRand = rand( 0, ritardoMassimo );\\n    this.coreGame.missiliNemici.push( new MissileNemicoDoppio( {\\n      coloreTestata: ''yellow'',\\n      coloreScia: ''red'',\\n      massimoRaggioEsplosione: 30\\n    }, bersagli, areaPertenza, xRand, velRand, ritardoRand, 3, this.coreGame) );\\n  }\\n}\\n\\nLivello6.prototype.calcolaCoefficienteOndata = function ( ) {\\n  return this.numeroOndata * 1.2;\\n}\\n\\nLivello6.prototype.setupListeners = function( ) { \\n  var mySelf = this;\\n  $( ''.gameContainer'' ).off();\\n  $( ''.gameContainer'' ).focus();\\n  \\n  azionamentoComandiPlancia( ''.gameContainer'', this.coreGame.batterieAntimissile,     this.coreGame.mirino, mySelf );\\n  \\n  $( ''.gameContainer'' ).on( ''mouseover'', function( event ) {\\n    mySelf.coreGame.mirino.stato = Mirino.TRACCIAMENTO;\\n  });\\n  $( ''.gameContainer'' ).on( ''mouseout'', function( ) {\\n    mySelf.coreGame.mirino.stato = Mirino.SPENTO;\\n  });\\n  $( ''.gameContainer'' ).on( ''mousemove'', function( event ) {\\n    var offset = $(\\".gameContainer\\").offset();\\n    mySelf.coreGame.mirino.inseguiX = event.pageX - offset.left;\\n    mySelf.coreGame.mirino.inseguiY = event.pageY - offset.top;\\n    mySelf.coreGame.mirino.cambiaMira();\\n  });\\n}\\n\\nLivello6.prototype.scegliTorretta = function ( x, y, tasto ) {\\n  var indiceTorretta = 0;\\n  switch(tasto) {\\n    case 49: indiceTorretta = 0; break;\\n    case 50: indiceTorretta = 1; break;\\n    case 51: indiceTorretta = 2; break;\\n    default: return -1;\\n  }\\n  \\n  var torrettaAttuale = this.coreGame.batterieAntimissile[ indiceTorretta ];\\n  \\n  if ( torrettaAttuale.stato === BatteriaAntimissile.ATTIVA \\n      && torrettaAttuale.numeroMissili > 0 \\n      && torrettaAttuale.blocco === false )  \\n    return indiceTorretta;\\n  \\n  return -1;\\n};\\n\\nLivello6.prototype.sparo = function ( x, y, torretta ) {\\n  if( torretta === undefined )\\n    return;\\n  \\n  this.coreGame.missiliTerrestri.push( new MissileTerrestre( {\\n    xDiPartenza: torretta.x,\\n    yDiPartenza: torretta.y,\\n    xDiArrivo: x,\\n    yDiArrivo: y,\\n    coloreTestata: ''yellow'',\\n    coloreScia: ''blue'',\\n    massimoRaggioEsplosione: 30,\\n    distanzaPerFrame: 7\\n  }, this.coreGame ) );\\n  \\n  this.coreGame.aggiornaPunteggioMissiliSparati();\\n  torretta.numeroMissili--;\\n  torretta.temperatura += 50;\\n  var temperaturaMinima = 500\\n  torretta.temperaturaSblocco = temperaturaMinima;\\n  if( torretta.temperatura >= 799 ) {\\n    torretta.blocco = true;\\n  };\\n}\\n\\nLivello6.prototype.mostraSchermataIniziale = function ( punteggio ) {\\n  var mySelf = this;\\n  mySelf.coreGame.disegnaStatoGioco();\\n  mySelf.coreGame.disegnaBatterieAntimissile();\\n  var ctx = mySelf.ctx;\\n  \\n  this.intervalloSchermata = setInterval( function () {\\n    mySelf.coreGame.disegnaStatoGioco();\\n    mySelf.coreGame.disegnaBatterieAntimissile();\\n    if( mySelf.numeroSchermata === 0 ) {\\n      ctx.fillStyle = mySelf.coreGame.coloreTestoSecondario;\\n      ctx.textAlign = \\"center\\"; \\n      ctx.font = ''bold 20px arial'';\\n      ctx.fillText( \\"Punteggio: \\" + punteggio, \\n                   mySelf.canvas.width\\/2, mySelf.canvas.height\\/2 - 20 - 120 );\\n      ctx.textAlign = \\"start\\";\\n      \\n      ctx.fillStyle = mySelf.coreGame.coloreTestoPrimario;\\n      ctx.textAlign = \\"center\\"; \\n      ctx.font = ''bold 20px arial'';\\n      ctx.fillText( ''CLICK PER INIZIARE A GIOCARE'', \\n                   mySelf.canvas.width\\/2, mySelf.canvas.height\\/2 - 20 - 50 );\\n      ctx.textAlign = \\"start\\";\\n      \\n      \\/\\/ parte fissa\\n      ctx.textAlign = \\"center\\";\\n      ctx.font = ''bold 20px arial'';\\n      ctx.fillStyle = mySelf.coreGame.coloreTestoSecondario;\\n      ctx.fillText( ''Ondata '' + mySelf.numeroOndata, \\n                   mySelf.canvas.width\\/2, mySelf.canvas.height\\/2 + 20 - 50);\\n      ctx.textAlign = \\"start\\";\\n      var img = document.getElementById(\\"source-mouse-click\\");\\n      ctx.drawImage(img, \\n                    mySelf.canvas.width\\/2 - 100, mySelf.canvas.height\\/2 + 40, 30, 80);\\n      ctx.textAlign = \\"left\\";\\n      ctx.fillStyle = mySelf.coreGame.coloreTestoSecondario;\\n      ctx.fillText(\\"Fare click sinistro\\", \\n                   mySelf.canvas.width\\/2 - 40, mySelf.canvas.height\\/2 + 40 + 40);\\n      ctx.fillText(\\"per sparare\\", \\n                   mySelf.canvas.width\\/2 - 40, mySelf.canvas.height\\/2 + 40 + 40 + 20);\\n      ctx.textAlign = \\"start\\";\\n    } else {\\n      ctx.fillStyle = mySelf.coreGame.coloreTestoSecondario;\\n      ctx.textAlign = \\"center\\"; \\n      ctx.font = ''bold 20px arial'';\\n      ctx.fillText( \\"Punteggio: \\" + punteggio, \\n                   mySelf.canvas.width\\/2, mySelf.canvas.height\\/2 - 20 - 120 );\\n      ctx.textAlign = \\"start\\";\\n      \\n      ctx.textAlign = \\"center\\";\\n      ctx.font = ''bold 20px arial'';\\n      ctx.fillStyle = mySelf.coreGame.coloreTestoSecondario;\\n      ctx.fillText( ''Ondata '' + mySelf.numeroOndata, \\n                   mySelf.canvas.width\\/2, mySelf.canvas.height\\/2 + 20 - 50);\\n      ctx.textAlign = \\"start\\";\\n      var img = document.getElementById(\\"source-mouse-click\\");\\n      ctx.drawImage(img, \\n                    mySelf.canvas.width\\/2 - 100, mySelf.canvas.height\\/2 + 40, 30, 80);\\n      ctx.textAlign = \\"left\\";\\n      ctx.fillStyle = mySelf.coreGame.coloreTestoSecondario;\\n      ctx.fillText(\\"Fare click sinistro\\", \\n                   mySelf.canvas.width\\/2 - 40, mySelf.canvas.height\\/2 + 40 + 40);\\n      ctx.fillText(\\"per sparare\\", \\n                   mySelf.canvas.width\\/2 - 40, mySelf.canvas.height\\/2 + 40 + 40 + 20);\\n      ctx.textAlign = \\"start\\";    \\n    }\\n    mySelf.numeroSchermata = (mySelf.numeroSchermata + 1) % 2;\\n  }, 500 );\\n  \\n  $( ''.gameContainer'' ).off();\\n  $( ''.gameContainer'' ).one( ''click'', function() {\\n    clearInterval( mySelf.intervalloSchermata );\\n    mySelf.preparazioneAvvio();\\n  } );                     \\n}\\n\\nvar _x;\\nvar _y;\\nvar _tSelezionata;\\n\\nfunction _SistemaFinto () { }\\n_SistemaFinto.prototype.sparo = function ( x, y, torrettaSelezionata ) {\\n  this._x = x;\\n  this._y = y;\\n  this._tSelezionata = torrettaSelezionata;\\n}\\n\\nvar azionaComandoSparo = function ( torrettaSelezionata, sistema, x, y ) {\\n  sistema.sparo( x, y, torrettaSelezionata );\\n}",\r\n  \r\n  "fileVirtuali":\r\n  [\r\n    { "nomeFile": "MacchinettaCaffe.js", \r\n      "consultazione": true,\r\n      "codice": "\\/**********\\nFunzione che abilita il click del mouse per azionare la macchinetta del caff\\u00e8.\\nQuesta funzione potrebbe essere d''ispirazione per altri scopi...\\n**********\\/\\nvar azionaMacchinaCaffeConClick = function ( pulsantieraMacchinaCaffe ) {\\n  \\/\\/ Comandi plancia azionati da click del mouse, notare il ''click''\\n  $( pulsantieraMacchinaCaffe ).bind( ''click'', function ( eventoClick ) {\\n    \\/\\/ Questa parte di codice si attiva quando si clicca\\n    macchinaCaffe.faiIlCaffe();\\n  } );\\n}"\r\n    },\r\n    { "nomeFile": "TrovaTorrettaMigliore.js",\r\n    "consultazione": true,\r\n    "codice": "\\/**********\\nFunzione che date le coordinate del bersaglio determina la torretta migliore, e funzionante, per colpire il bersaglio.\\n\\nQuesta funzione prende come parametri:\\n  - torretta: un array di torrette;\\n  - x: un intero che rappresenta la coordinata x;\\n  - y: un intero che rappresenta la coordinata y;\\nQuesta funzione restituisce la torretta migliore.\\n**********\\/\\nvar torrettaPiuVicina = function ( torrette, x, y ) {\\n  \\/** Funzione che restituisce true (vero) o false (falso)\\n  nel caso in cui la torretta sia o meno funzionante. *\\/\\n  var torrettaNonFunzionante = function ( torretta ) {\\n    if( torretta.stato === BatteriaAntimissile.ATTIVA &&\\n        torretta.numeroMissili > 0 &&\\n        torretta.blocco === false )\\n      return false;\\n    else\\n      return true;\\n  } \\n  \\n  var torrettaSelezionata;\\n  if( 0 <= x && x < 170 ) {\\n    torrettaSelezionata = torrette[0];\\n  }\\n  if( 170 <= x && x < 340 ) {\\n    torrettaSelezionata = torrette[1];\\n  }\\n  if( 340 <= x && x <= 510 ) {\\n    torrettaSelezionata = torrette[2];\\n  }\\n  \\n  if( torrettaNonFunzionante(torrettaSelezionata) )\\n    torrettaSelezionata = torrette[1];\\n  if( torrettaNonFunzionante(torrettaSelezionata) )\\n    torrettaSelezionata = torrette[0];\\n  if( torrettaNonFunzionante(torrettaSelezionata) )\\n    torrettaSelezionata = torrette[2];\\n  \\n  return torrettaSelezionata;\\n}" },\r\n    {"nomeFile": "AzionamentiPlanciaComandi.js",\r\n    "consultazione": false,\r\n    "codice": "\\/**********\\nFunzione che abilita i comandi della plancia. Attualmente prendo i tasti 1, 2, 3 sulla tastiera si fa fuoco con la torretta rispettivamente sinistra, centrale e destra.\\nIl comando click \\u00e8 abilitato ma non funzionante.\\n\\nLa funzione prende come parametri:\\n  - planciaComandi: classe che legge i comandi attivati;\\n  - torrette: array di torrette controllate;\\n  - mirino: classe che rappresenta il sistema di puntamento, restituisce\\n    le coordinate in cui \\u00e8 attualmente tramite mirino.x() e mirino.y();\\n  - sistema: \\u00e8 il sistema missilistico a cui sono rivolti i comandi.\\n**********\\/\\nvar azionamentoComandiPlancia = function ( planciaComandi, torrette, mirino, sistema ) {\\n  \\/\\/ Comandi plancia azionati da tastiera, sostituire con click mouse ed inserire selezione automatica torretta.\\n\\/\\/###START_MODIFICABILE###\\n  $( planciaComandi ).bind( ''keyup'', function ( tastoPremuto ) {\\n    \\/\\/ Selezione coordinate a cui sparare\\n    var x = mirino.x;\\n    var y = mirino.y;\\n  \\n    \\/\\/ Selezione della torretta corrispondente, \\"which\\" significa \\"quale\\" in inglese\\n    var torrettaSelezionata;\\n    if( tastoPremuto.which === 49 ) \\/\\/ Pressione tasto \\"1\\"\\n      torrettaSelezionata = torrette[0];\\n    if( tastoPremuto.which === 50 ) \\/\\/ Pressione tasto \\"2\\"\\n      torrettaSelezionata = torrette[1];\\n    if( tastoPremuto.which === 51 ) \\/\\/ Pressione tasto \\"3\\"\\n      torrettaSelezionata = torrette[2];\\n    \\n    \\/\\/ Lancio del missile\\n    azionaComandoSparo( torrettaSelezionata, sistema, x, y );\\n  } );\\n\\/\\/###END_MODIFICABILE###\\n}",\r\n    "test": "( function () {\\n    var coloreMissili = [ ''blue'', ''blue'', ''blue'', ''blue'', ''blue'', ''blue'', ''blue'', ''blue'', ''blue'', ''blue''];\\n    var nMissili = coloreMissili.length;\\n    var nSoldati = 10;\\n    var Tmin = 50;\\n    var Tmax = 1000;\\n    var deltaTempo = 70;\\n    var deltaRaffreddamento = 3;\\n    var _torrette = [];\\n    \\n    _torrette.push (\\n      new BatteriaAntimissile ( 35, 410, nMissili, nSoldati, coloreMissili, Tmin, Tmax, deltaTempo, deltaRaffreddamento, null )\\n    );\\n    _torrette.push (\\n      new BatteriaAntimissile ( 255, 410, nMissili, nSoldati, coloreMissili, Tmin, Tmax, deltaTempo, deltaRaffreddamento, null )\\n    );\\n    _torrette.push (\\n      new BatteriaAntimissile ( 475, 410, nMissili, nSoldati, coloreMissili, Tmin, Tmax, deltaTempo, deltaRaffreddamento, null )\\n    );\\n    var _mirino = new Mirino( rand(0, 510), rand(0, 460));\\n\\n    var _s = new _SistemaFinto();\\n    azionamentoComandiPlancia( $(\\"#dummy-div\\"), _torrette, _mirino, _s );\\n    var t = torrettaPiuVicina ( _torrette, _mirino.x, _mirino.y );\\n    $(\\"#dummy-div\\").click();\\n    $(\\"#dummy-div\\").off();\\n    \\/\\/console.log( _mirino );\\n    \\/\\/console.log( t )\\n    \\/\\/console.log( _s )\\n    \\n    var esito = true;\\n    if( _s._x !== _mirino.x ) \\n      esito = false;\\n    if( _s._y !== _mirino.y )\\n       esito = false;\\n    if( _s._tSelezionata !== t) \\n       esito = false;\\n    \\n    return esito;\\n  }\\n) ();",\r\n    "descrizione": "Il codice che devi scrivere si basa su tre componenti principali:\\n<li> la funzione della macchinetta del caff&#xE8;, da cui i tecnici (o Prosdocimo) hanno preso ispirazione per il nuovo meccanismo di sparo tramite click;<\\/li>\\n<li> la funzione <tt>torrettaPiuVicina()<\\/tt>, che contiene l&#x27;algoritmo per selezionare la torretta pi&#xF9; vicina al bersaglio;<\\/li>\\n<li> l&#x27;attuale funzione per l&#x27;azionamento del comando di sparo, basato su pulsanti.<\\/li>\\nL&#x27;obiettivo &#xE8; quello di modificare il codice della funzione <tt>azionamentoComandiPlancia()<\\/tt>, in modo che si possa sparare con la torretta pi&#xF9; vicina all''obiettivo utilizzando il click del mouse.<br>\\nPer prima cosa si deve modificare correttamente la chiamata alla funzione <tt>bind()<\\/tt>, in modo che non risponda pi&#xF9; alla pressione del pulsante ma al click del mouse.<br>\\nSuccessivamente sar&#xE0; necessario utilizzare la funzione <tt>torrettaPiuVicina()<\\/tt> per selezionare la torretta corretta.",\r\n    "aiuto": "La modifica alla funzione <tt>bind()<\\/tt> pu&#242; essere compiuta nel seguente modo, passando da:\\n<pre><code>$( planciaComandi ).bind( ''keyup'', function ( tastoPremuto )\\n<\\/code><\\/pre>\\na:\\n<pre><code>$( planciaComandi ).bind( ''click'', function ( eventoClick )\\n<\\/code><\\/pre>\\nSuccessivamente si devono eliminare le seguenti righe:\\n<pre><code>var torrettaSelezionata;\\nif( tastoPremuto.which === 49 )\\n&#x9;torrettaSelezionata = torrette[0];\\nif( tastoPremuto.which === 50 )\\n&#x9;torrettaSelezionata = torrette[1];\\nif( tastoPremuto.which === 51 )\\n&#x9;torrettaSelezionata = torrette[2];\\n<\\/code><\\/pre>\\nsostituendole con:\\n<pre><code>var torrettaSelezionata = torrettaPiuVicina( torrette, x, y );\\n<\\/code><\\/pre>",\r\n    "messaggioFallimento": "Sparo con click del mouse non implementato." }\r\n  ]\r\n}'),
(7, 7, 'Fiamme dal passato', '{\r\n  "nomeLivello": "Fiamme dal passato",\r\n  "numeroLivello": 7,\r\n  "costoAiuti": 4000,\r\n\r\n  "dialogoIniziale":\r\n  [\r\n    {"nome": "Ortiz",\r\n    "testo": "Come sta il mio prigioniero preferito?"},\r\n    {"nome": "Simeoni",\r\n    "testo": "Risparmia l&#x27;umorismo, Ortiz."},\r\n    {"nome": "Ortiz",\r\n    "testo": "Generale Ortiz. Almeno per oggi."},\r\n    {"nome": "Simeoni",\r\n    "testo": "Che significa?"},\r\n    {"nome": "Ortiz",\r\n    "testo": "Significa che per mantenere la mia bella faccia pulita da ogni sospetto, devo tirarti fuori da questa prigione, per oggi. Abbiamo bisogno di un tecnico informatico e, a detta dei miei uomini, sei il migliore."},\r\n    {"nome": "Simeoni",\r\n    "testo": "E perch&#xE9; dovrei farlo? Non ti devo nulla. Anzi, mi hai sbattuto in galera e hai tradit..."},\r\n    {"nome": "Ortiz",\r\n    "testo": "Taci! Devi farlo, fidati. Non vorrai che qualche vecchio inserviente scivoli durante la pulizia di un corridoio e si faccia male, spero. Inoltre c&#x27;&#xE8; quella faccenda del tuo tradimento..."},\r\n    {"nome": "Simeoni",\r\n    "testo": "Maledetto! Sono costretto ad ascoltarti."},\r\n    {"nome": "Ortiz",\r\n    "testo": "Seguimi."},\r\n    {"nome": "Simeoni",\r\n    "testo": "..."},\r\n    {"nome": "Zurlin",\r\n    "testo": "Ciao caro."},\r\n    {"nome": "Simeoni",\r\n    "testo": "Cosa dobbiamo fare? Un nuovo attacco ai loro sistemi informatici?"},\r\n    {"nome": "Ortiz",\r\n    "testo": "Magari. Purtroppo dopo l&#x27;ultima volta hanno alzato il livello di sicurezza. Non sappiamo pi&#xF9; come entrare. In ogni caso, Zurlin ha trovato una cosa."},\r\n    {"nome": "Zurlin",\r\n    "testo": "Il Nemico aveva sviluppato un nuovo tipo di missili, top secret."},\r\n    {"nome": "Ortiz",\r\n    "testo": "... e abbiamo intercettato una loro conversazione. Stanno per utilizzarli."},\r\n    {"nome": "Zurlin",\r\n    "testo": "Sono composti da una particolare testata in grado di sdoppiarsi. Sono riuscita a... ricordarmi come fossero fatti. Dobbiamo implementare questa tecnologia nelle torrette dell&#x27;UTF-8."},\r\n    {"nome": "Simeoni",\r\n    "testo": "Va bene, cominciamo."}\r\n  ],\r\n  \r\n  "dialogoFinale":\r\n  [\r\n    {"nome": "Ortiz",\r\n    "testo": "Riportatelo in cella."},\r\n    {"nome": "Simeoni",\r\n    "testo": "..."},\r\n    {"nome": "Prosdocimo",\r\n    "testo": "Se ne sono andati tutti?"},\r\n    {"nome": "Simeoni",\r\n    "testo": "Prosdocimo! Devi stare attento, &#xE8; pieno di telecamere."},\r\n    {"nome": "Prosdocimo",\r\n    "testo": "Lo so. Ma mentre pulivo la sala di controllo, potrebbe essermi scivolato del detersivo per pavimenti sulle prese delle telecamere, eh eh eh..."},\r\n    {"nome": "Simeoni",\r\n    "testo": "Ah ah ah! Sei un diavolo, Prosdocimo."},\r\n    {"nome": "Prosdocimo",\r\n    "testo": "Eh eh eh. Sono qua per mantenere una promessa. Forse il tempo che mi rimane in questa base &#xE8; agli sgoccioli..."},\r\n    {"nome": "Simeoni",\r\n    "testo": "Non essere pessimista, Prosdocimo."},\r\n    {"nome": "Prosdocimo",\r\n    "testo": "Sono realista, eh eh eh. Comunque, &#xE8; ora che tu sappia chi sono io."},\r\n    {"nome": "Simeoni",\r\n    "testo": "Sei sicuro di volermelo dire?"},\r\n    {"nome": "Prosdocimo",\r\n    "testo": "Sei un bravo ragazzo, Simeoni. Mi ricordi tanto un giovane tecnico giunto su Bastiani tanti anni fa. All&#x27;epoca avevo vent&#x27;anni, appena uscito dalla Scuola degli ufficiali tecnici."},\r\n    {"nome": "Simeoni",\r\n    "testo": "Scuola degli ufficiali tecnici? Mai sentita."},\r\n    {"nome": "Prosdocimo",\r\n    "testo": "Ovviamente. Non esiste pi&#xF9;, &#xE8; stata cancellata pochi anni dopo. Comunque, appena arrivato qui feci la conoscenza di Rusa, un anziano programmatore che lavorava qua. Al tempo ero gi&#xE0; un ficcanaso, eh eh eh. Rusa mi insegn&#xF2; un linguaggio ormai perduto."},\r\n    {"nome": "Simeoni",\r\n    "testo": "Il JS?"},\r\n    {"nome": "Prosdocimo",\r\n    "testo": "Ovviamente. Per questo so diverse cose e odio Ortiz eh eh eh."},\r\n    {"nome": "Simeoni",\r\n    "testo": "Cosa sai dirmi di lui?"},\r\n    {"nome": "Prosdocimo",\r\n    "testo": "Ero gi&#xE0; qua quando &#xE8; arrivato. Un giovane brillante e scavezzacollo. Torn&#xF2; da una missione segreta, che prevedeva il primo atterraggio umano al di l&#xE0; del deserto... torn&#xF2; solo lui. Raccont&#xF2; di un massacro degli uomini da parte di una razza aliena e che lui era l&#x27;unico sopravvissuto. Si prese una medaglia e una promozione. Da quel giorno non fu pi&#xF9; lo stesso per&#xF2;... Ortiz nasconde un segreto, ed intendo scoprirlo."},\r\n    {"nome": "Simeoni",\r\n    "testo": "Forse posso aiutarti. &#xC8; in combutta con gli Ibridi."},\r\n    {"nome": "Prosdocimo",\r\n    "testo": "Allora la leggenda &#xE8; vera... eh eh eh. Speravo di vivere abbastanza a lungo per accertarmene."},\r\n    {"nome": "Simeoni",\r\n    "testo": "Arriva qualcuno! Vattene, Prosdocimo!"},\r\n    {"nome": "Prosdocimo",\r\n    "testo": "Eh eh eh, non preoccuparti, ora me ne vado. Ma ne vdremo delle belle, mio giovane amico. Eh eh eh..."}\r\n  ],\r\n  \r\n  "manuale": "Ogni classe pu&#xF2; essere associata ad una serie di funzioni. Per essere pi&#xF9; chiari, prendiamo la classe <tt>Arma<\\/tt>:\\n<pre><code>function Arma () {\\n&#x9;this.numeroMunizioni = 10;\\n}\\n<\\/code><\\/pre>\\nUn&#x27;arma pu&#xF2; avere diverse funzionalit&#xE0;, per esempio la ricarica e lo sparo:\\n<pre><code>Arma.prototype.ricarica = function () {\\n&#x9;this.numeroMunizioni = 10;\\n}\\nArma.prototype.spara = function () {\\n&#x9;if ( this.numeroMunizioni === 0 ) {\\n&#x9;&#x9;this.ricarica();\\n&#x9;}\\n&#x9;this.numeroMunizioni--;\\n}\\n<\\/code><\\/pre>\\nQueste due funzioni sono molto semplici. La prima re-imposta il numero di munizioni al valore iniziale di 10. La seconda controlla il numero di munizioni: se &#xE8; uguale a 0, allora effettua una chiamata alla funzione <tt>ricarica()<\\/tt>, poi spara; altrimenti spara, decrementando il numero di munizioni.<br>\\nUna funzione propria ad una classe viene indicata con la parola chiave <b>prototype<\\/b>.<br>\\nOsserviamo il meccanismo, prendendo un oggetto di classe <tt>Arma<\\/tt>:\\n<pre><code>var cannone = new Arma();\\ncannone.spara();\\nvar munizioniRimaste = cannone.numeroMunizioni;\\n<\\/code><\\/pre>\\nLa variabile <tt>munizioniRimaste<\\/tt> contiene il valore 9, poich&#xE9; la funzione di sparo ha determinato un decremento del <tt>numeroMunizioni<\\/tt> all&#x27;interno dell&#x27;oggetto <tt>cannone<\\/tt>.",\r\n\r\n  "codiceLivello": "function Livello7 ( callbackFineLivello ) {\\n  CoreLevel.call( this, callbackFineLivello );\\n}\\n\\nLivello7.prototype = Object.create( CoreLevel.prototype );\\nLivello7.prototype.constructor = Livello7;\\n\\nLivello7.prototype.inizializzaArmiNemiche = function () {\\n  var areaPertenza = this.coreGame.canvas.width;\\n  var ritardoMassimo = 900 * (this.numeroOndata * 0.05);\\n  var velMin = 1.6 + this.numeroOndata * 0.1;\\n  var velMax = 1.8 + this.numeroOndata * 0.1;\\n  var numeroMissili = 20 + Math.floor( this.numeroOndata );\\n  var numeroMissiliSdoppiabili = rand( 0, numeroMissili );\\n  var ritardoRand;\\n  var bersagli = this.coreGame.bersagliAttaccabili();\\n  \\n  for( var i = 0; i < numeroMissili ; i++ ) {\\n    var xRand = rand( 0, areaPertenza );\\n    var velRand = rand( velMin, velMax );\\n    ritardoRand = rand( 0, ritardoMassimo );\\n    this.coreGame.missiliNemici.push( new MissileNemico( {\\n      coloreTestata: ''yellow'',\\n      coloreScia: ''red'',\\n      massimoRaggioEsplosione: 30\\n    }, bersagli, areaPertenza, xRand, velRand,  ritardoRand, this.coreGame) );\\n  }\\n  \\n  for( var i = 0; i < numeroMissiliSdoppiabili ; i++ ) {\\n    var xRand = rand( 0, areaPertenza );\\n    var velRand = rand( velMin, velMax );\\n    ritardoRand = rand( 0, ritardoMassimo );\\n    this.coreGame.missiliNemici.push( new MissileNemicoDoppio( {\\n      coloreTestata: ''yellow'',\\n      coloreScia: ''red'',\\n      massimoRaggioEsplosione: 30\\n    }, bersagli, areaPertenza, xRand, velRand, ritardoRand, 3, this.coreGame) );\\n  }\\n}\\n\\nLivello7.prototype.calcolaCoefficienteOndata = function ( ) {\\n  return this.numeroOndata * 1.8;\\n}\\n\\nLivello7.prototype.setupListeners = function ( ) { \\n  var mySelf = this;\\n  $( ''.gameContainer'' ).off();\\n  $( ''.gameContainer'' ).focus();\\n  \\n  $( ''.gameContainer'' ).on( ''click'', function ( ) {\\n    mySelf.sparo( mySelf.coreGame.mirino.x, mySelf.coreGame.mirino.y, null );\\n  } );\\n  \\n  $( ''.gameContainer'' ).on( ''mouseover'', function( event ) {\\n    mySelf.coreGame.mirino.stato = Mirino.TRACCIAMENTO;\\n  });\\n  $( ''.gameContainer'' ).on( ''mouseout'', function( ) {\\n    mySelf.coreGame.mirino.stato = Mirino.SPENTO;\\n  });\\n  $( ''.gameContainer'' ).on( ''mousemove'', function( event ) {\\n    var offset = $(\\".gameContainer\\").offset();\\n    mySelf.coreGame.mirino.inseguiX = event.pageX - offset.left;\\n    mySelf.coreGame.mirino.inseguiY = event.pageY - offset.top;\\n    mySelf.coreGame.mirino.cambiaMira();\\n  });\\n}\\n\\nLivello7.prototype.scegliTorretta = function ( x, y, tasto ) {\\n  var nonFunzionante = function ( torretta ) {  \\n    if( torretta.stato === BatteriaAntimissile.ATTIVA &&\\n        torretta.numeroMissili > 0 &&\\n        torretta.blocco === false )\\n      return false;\\n    else\\n      return true;\\n  }\\n  \\n  var torrette = this.coreGame.batterieAntimissile;\\n  var torrettaSelezionata;\\n  \\n  if( 0 <= x && x < 170 ) {\\n    torrettaSelezionata = 0;\\n  }\\n  if( 170 <= x && x < 340 ) {\\n    torrettaSelezionata = 1;\\n  }\\n  if( 340 <= x && x <= 510 ) {\\n    torrettaSelezionata = 2;\\n  }\\n  \\n  if( nonFunzionante(torrette[torrettaSelezionata]) === true )\\n    torrettaSelezionata = 1;\\n  if( nonFunzionante(torrette[torrettaSelezionata]) === true )\\n    torrettaSelezionata = 0;\\n  if( nonFunzionante(torrette[torrettaSelezionata]) === true )\\n    torrettaSelezionata = 2;\\n  if( nonFunzionante(torrette[torrettaSelezionata]) === true )\\n    return -1;\\n    \\n  return torrettaSelezionata;\\n};\\n\\nLivello7.prototype.sparo = function ( x, y, tasto ) {\\n  var indiceTorretta = this.scegliTorretta( x, y, tasto );\\n  if( indiceTorretta === -1 )\\n    return;\\n  \\n  var sdoppiabili = this.esaminaMissileSdoppiabile( x, y );\\n  if( sdoppiabili.missiliFrammenti.length === 0 )\\n    return;\\n  \\n  var torretta = this.coreGame.batterieAntimissile[indiceTorretta];\\n  var x1 = sdoppiabili.x1;\\n  var x2 = sdoppiabili.x2;\\n  var y = sdoppiabili.y;\\n  var ySdoppio = sdoppiabili.ySdoppio;\\n  var missiliFrammenti = sdoppiabili.missiliFrammenti;\\n  \\n  if( sdoppiabili.missiliFrammenti.length === 1 ) {\\n    this.coreGame.missiliTerrestri.push( new MissileTerrestre( {\\n      xDiPartenza: torretta.x,\\n      yDiPartenza: torretta.y,\\n      xDiArrivo: x1,\\n      yDiArrivo: y,\\n      coloreTestata: ''yellow'',\\n      coloreScia: ''blue'',\\n      massimoRaggioEsplosione: 30,\\n      distanzaPerFrame: 7\\n    }, this.coreGame ) );  \\n  } else {\\n    \\n    if( missiliFrammenti.length >= 2  )\\n      missiliFrammenti.slice(0, 2)\\n    \\n    var distanzaX = Math.abs( x - torretta.x );\\n    var distanzaY = Math.abs( y - torretta.y );\\n\\n    this.coreGame.missiliTerrestri.push( new _MissileTerrestreDoppio( {\\n      xDiPartenza: torretta.x,\\n      yDiPartenza: torretta.y,\\n      xDiArrivo: x,\\n      yDiArrivo: y,\\n      coloreTestata: ''yellow'',\\n      coloreScia: ''blue'',\\n      massimoRaggioEsplosione: 30,\\n      distanzaPerFrame: 7\\n    }, this.coreGame, torretta.x - distanzaX\\/2, ySdoppio, missiliFrammenti.length ) );\\n\\n  }\\n  \\/\\/torretta.y + distanzaY\\/2\\n  \\n  this.coreGame.aggiornaPunteggioMissiliSparati();\\n  torretta.numeroMissili--;\\n  torretta.temperatura += 100;\\n  var temperaturaMinima = 500\\n  torretta.temperaturaSblocco = temperaturaMinima;\\n  if( torretta.temperatura >= 799 ) {\\n    torretta.blocco = true;\\n  };\\n}\\n\\nLivello7.prototype.esaminaMissileSdoppiabile = function ( x, y ) {\\n  var missileUtente = new MissileStandard();\\n  \\n  var bersagli = [ { appartieneNemico: true, x: x, y: y} ];\\n  var ySdoppio = missileUtente.miraBersaglio( bersagli );\\n  var bersaglio = missileUtente.bersaglioAgganciato;\\n  var missiliFrammenti = missileUtente.esplodi();\\n    \\n  if( missiliFrammenti === undefined )\\n    return ( {\\n      x1: undefined,\\n      x2: undefined,\\n      y: undefined,\\n      ySdoppio: undefined,\\n      missiliFrammenti: [] } );\\n  \\n  if( missiliFrammenti.length === 1 ) {\\n    return ( {\\n    x1: missiliFrammenti[0].x,\\n    x2: 0,\\n    y: missiliFrammenti[0].y,\\n    ySdoppio: 0,\\n    missiliFrammenti: missiliFrammenti } );  \\n  }\\n  \\n  return ( {\\n    x1: missiliFrammenti[0].x,\\n    x2: missiliFrammenti[1].x,\\n    y: missiliFrammenti[0].y,\\n    ySdoppio: ySdoppio,\\n    missiliFrammenti: missiliFrammenti } );\\n}\\n\\nLivello7.prototype.mostraSchermataIniziale = function ( punteggio ) {\\n  var mySelf = this;\\n  mySelf.coreGame.disegnaStatoGioco();\\n  mySelf.coreGame.disegnaBatterieAntimissile();\\n  var ctx = mySelf.ctx;\\n  \\n  this.intervalloSchermata = setInterval( function () {\\n    mySelf.coreGame.disegnaStatoGioco();\\n    mySelf.coreGame.disegnaBatterieAntimissile();\\n    if( mySelf.numeroSchermata === 0 ) {\\n      ctx.fillStyle = mySelf.coreGame.coloreTestoSecondario;\\n      ctx.textAlign = \\"center\\"; \\n      ctx.font = ''bold 20px arial'';\\n      ctx.fillText( \\"Punteggio: \\" + punteggio, \\n                   mySelf.canvas.width\\/2, mySelf.canvas.height\\/2 - 20 - 120 );\\n      ctx.textAlign = \\"start\\";\\n      \\n      ctx.fillStyle = mySelf.coreGame.coloreTestoPrimario;\\n      ctx.textAlign = \\"center\\"; \\n      ctx.font = ''bold 20px arial'';\\n      ctx.fillText( ''CLICK PER INIZIARE A GIOCARE'', \\n                   mySelf.canvas.width\\/2, mySelf.canvas.height\\/2 - 20 - 50 );\\n      ctx.textAlign = \\"start\\";\\n      \\n      \\/\\/ parte fissa\\n      ctx.textAlign = \\"center\\";\\n      ctx.font = ''bold 20px arial'';\\n      ctx.fillStyle = mySelf.coreGame.coloreTestoSecondario;\\n      ctx.fillText( ''Ondata '' + mySelf.numeroOndata, \\n                   mySelf.canvas.width\\/2, mySelf.canvas.height\\/2 + 20 - 50);\\n      ctx.textAlign = \\"start\\";\\n      var img = document.getElementById(\\"source-mouse-click\\");\\n      ctx.drawImage(img, \\n                    mySelf.canvas.width\\/2 - 100, mySelf.canvas.height\\/2 + 40, 30, 80);\\n      ctx.textAlign = \\"left\\";\\n      ctx.fillStyle = mySelf.coreGame.coloreTestoSecondario;\\n      ctx.fillText(\\"Fare click sinistro\\", \\n                   mySelf.canvas.width\\/2 - 40, mySelf.canvas.height\\/2 + 40 + 40);\\n      ctx.fillText(\\"per sparare\\", \\n                   mySelf.canvas.width\\/2 - 40, mySelf.canvas.height\\/2 + 40 + 40 + 20);\\n      ctx.textAlign = \\"start\\";\\n    } else {\\n      ctx.fillStyle = mySelf.coreGame.coloreTestoSecondario;\\n      ctx.textAlign = \\"center\\"; \\n      ctx.font = ''bold 20px arial'';\\n      ctx.fillText( \\"Punteggio: \\" + punteggio, \\n                   mySelf.canvas.width\\/2, mySelf.canvas.height\\/2 - 20 - 120 );\\n      ctx.textAlign = \\"start\\";\\n      \\n      ctx.textAlign = \\"center\\";\\n      ctx.font = ''bold 20px arial'';\\n      ctx.fillStyle = mySelf.coreGame.coloreTestoSecondario;\\n      ctx.fillText( ''Ondata '' + mySelf.numeroOndata, \\n                   mySelf.canvas.width\\/2, mySelf.canvas.height\\/2 + 20 - 50);\\n      ctx.textAlign = \\"start\\";\\n      var img = document.getElementById(\\"source-mouse-click\\");\\n      ctx.drawImage(img, \\n                    mySelf.canvas.width\\/2 - 100, mySelf.canvas.height\\/2 + 40, 30, 80);\\n      ctx.textAlign = \\"left\\";\\n      ctx.fillStyle = mySelf.coreGame.coloreTestoSecondario;\\n      ctx.fillText(\\"Fare click sinistro\\", \\n                   mySelf.canvas.width\\/2 - 40, mySelf.canvas.height\\/2 + 40 + 40);\\n      ctx.fillText(\\"per sparare\\", \\n                   mySelf.canvas.width\\/2 - 40, mySelf.canvas.height\\/2 + 40 + 40 + 20);\\n      ctx.textAlign = \\"start\\";    \\n    }\\n    mySelf.numeroSchermata = (mySelf.numeroSchermata + 1) % 2;\\n  }, 500 );\\n  \\n  $( ''.gameContainer'' ).off();\\n  $( ''.gameContainer'' ).one( ''click'', function() {\\n    clearInterval( mySelf.intervalloSchermata );\\n    mySelf.preparazioneAvvio();\\n  } );                     \\n}\\n\\nfunction _MissileTerrestreDoppio ( parametri, coreGame, xSdoppio, ySdoppio, missili ) {\\n  MissileTerrestre.call( this, parametri, coreGame );\\n\\n  this.xSdoppio = xSdoppio;\\n  this.ySdoppio = ySdoppio;\\n  this.missiliFrammenti = missili;\\n  \\n  var distanza = Math.sqrt( Math.pow(this.xSdoppio - this.xDiPartenza, 2) + \\n      Math.pow(this.ySdoppio - this.yDiPartenza, 2) );\\n  \\n  this.ritardoSuddivisione = Math.floor(distanza \\/ parametri.distanzaPerFrame);\\n  this.suddivisioneAvvenuta = false;\\n}\\n\\n_MissileTerrestreDoppio.prototype = Object.create( MissileTerrestre.prototype );\\n_MissileTerrestreDoppio.prototype.constructor = _MissileTerrestreDoppio;\\n\\n_MissileTerrestreDoppio.prototype.sdoppiati = function () {\\n  for( var i = 0; i < this.missiliFrammenti; ++i ) {\\n    this.coreGame.missiliTerrestri.push(\\n      new MissileTerrestre( {\\n        xDiPartenza: this.x,\\n        yDiPartenza: this.y,\\n        xDiArrivo: this.xDiArrivo + 40,\\n        yDiArrivo: this.yDiArrivo,\\n        coloreTestata: ''yellow'',\\n        coloreScia: ''blue'',\\n        massimoRaggioEsplosione: 30,\\n        distanzaPerFrame: 7\\n      }, this.coreGame ) );\\n  }\\n  this.suddivisioneAvvenuta = true;\\n}\\n\\n_MissileTerrestreDoppio.prototype.update = function () {\\n  \\/\\/console.log( this.ritardoSuddivisione );\\n  \\n  if( this.ritardoSuddivisione !== 0 )\\n    this.ritardoSuddivisione--;\\t\\t\\t\\n  else {\\n    if( this.suddivisioneAvvenuta === false ) {\\n      this.sdoppiati();\\n    }\\n  }\\n  \\n  if( this.stato === Missile.ATTIVO && this.y <= this.yDiArrivo ) {\\n    this.x = this.xDiArrivo;\\n    this.y = this.yDiArrivo;\\n    this.stato = Missile.ESPLOSIONE;\\n  }\\n  if( this.stato === Missile.ATTIVO ) {\\n    this.x += this.dx;\\n    this.y += this.dy;\\n  } else {\\n    this.esplodi();\\n  }\\n};\\n\\nfunction FrammentoMissile ( x, y ) {\\n  this.x = x;\\n  this.y = y;\\n}",\r\n  \r\n  "fileVirtuali":\r\n  [\r\n    {"nomeFile": "MissileTestataMultipla.js",\r\n    "consultazione": true,\r\n    "codice": "\\/**********\\nCiao, caro.\\nQuesto \\u00e8 un esempio di come \\u00e8 implementato il missile a testata multipla.\\nUsalo pure per migliorare i missili standard terrestri.\\nSaluti,\\nZurlin\\n**********\\/\\n\\n\\/\\/ Classe esempio di missili sdoppiabili \\nfunction MissileTestataMultipla ( ) {\\n  this.obiettivoAgganciato;\\n} \\n\\n\\/\\/ Funzione per identificare l''obiettivo del missile.\\n\\/\\/ Assomiglia alla funzione miraBersaglio() del missile standard!\\nMissileTestataMultipla.prototype.identificaObiettivo = function ( obiettivi ) {\\n  \\/\\/ Esempio obiettivo = { x: 315, y: 145, tipo: \\"terrestre\\" }\\n  for( var i = 0; i < obiettivi.length; ++i ) {\\n    var obiettivo = obiettivi[i];\\n    if( obiettivo.tipo === \\"terrestre\\" ) {\\n      var x = obiettivo.x;\\n      var y = obiettivo.y;\\n  \\n      \\/\\/ Vengono memorizzare le coordinate del bersaglio.\\n      this.agganciaBersaglio( obiettivo );\\n      \\n      \\/\\/ Viene restituita l''altezza alla quale il missile detona e si sdoppia.\\n      var altezzaEsplosione = this.calcolaAltezzaSdoppiamento( y );\\n      return altezzaEsplosione;\\n    }\\n  }\\n}\\n\\n\\/\\/ Funzione per il calcolo della quota di sdoppiamento del missile.\\nMissileTestataMultipla.prototype.calcolaAltezzaSdoppiamento = function ( y ) {\\n  return ( Math.abs(430 - y) \\/ 2 ) + y;\\n}\\n\\n\\/\\/ Funzione per agganciare l''obiettivo del missile.\\nMissileTestataMultipla.prototype.agganciaObiettivo = function ( obiettivo ) {\\n  this.obiettivoAgganciato = obiettivo;\\n}\\n\\n\\/\\/ Funzione di detonazione del missile doppio.\\n\\/\\/ Come puoi notare il missile si divide in due frammenti.\\n\\/\\/ Assomiglia alla funzione esplodi() del missile standard!\\nMissileTestataMultipla.prototype.detonazione = function ( ) {\\n  \\/\\/ this.obiettivo.x + 10 e this.obiettivo.x - 10\\n  \\/\\/ permette di indirizzare il missile in due punti diversi,\\n  \\/\\/ uno a 10 unit\\u00e0 a destra del bersaglio del missile originale\\n  \\/\\/ ed uno a 10 unit\\u00e0 a sinistra del bersaglio del missile originale.\\n  var frammentoMissile1 = new FrammentoMissile( this.obiettivo.x + 10, this.obiettivo.y );\\n  var frammentoMissile2 = new FrammentoMissile( this.obiettivo.x - 10, this.obiettivo.y );\\n  \\/\\/ Variabile che contiene i frammenti del missile.\\n  var frammentiMissile = [];\\n  frammentiMissile.push( frammentoMissile1 );\\n  frammentiMissile.push( frammentoMissile2 );\\n  \\n  return frammentiMissile;\\n}" },\r\n    {"nomeFile": "MissileStandard.js",\r\n    "consultazione": false,\r\n    "codice": "\\/**********\\nBenvenuto nel file di configurazione missili standard del sistema Hob-2000.\\nIn questo codice \\u00e8 possibile modificare diverse propriet\\u00e0 dei missili, in particolare i bersagli mirati, gli obiettivi agganciati e l''esplosione.\\n**********\\/\\n\\n\\/\\/ Classe che identifica il missile standard terrestre.\\nfunction MissileStandard ( ) { \\n  this.bersaglioAgganciato;\\n}\\n\\n\\/\\/ Funzione di identificazione del bersaglio\\nMissileStandard.prototype.miraBersaglio = function ( listaBersagli ) {\\n  \\/\\/ bersaglio = { appartieneNemico: true, x: 530, y: 95 }\\n  \\n  var numeroBersagli = listaBersagli.length;\\n  var i = 0;\\n  \\/\\/ Ciclo per la selezione dei bersagli di sparo.\\n  while( i <  numeroBersagli ) {\\n\\/\\/###START_MODIFICABILE###\\n    var bersaglio = listaBersagli[i];\\n    if( bersaglio.appartieneNemico === true ) {\\n      var x = bersaglio.x;\\n      var y = bersaglio.y;\\n    \\n      this.agganciaObiettivo( bersaglio );\\n      \\n      \\/\\/ Altezza a cui avviene l''esplosione.\\n      var altezzaEsplosione = y;\\n      return altezzaEsplosione;\\n\\/\\/###END_MODIFICABILE###\\n    }\\n    ++i;\\n  }\\n}\\n\\n\\/\\/ Funzione di aggancio del bersaglio.\\nMissileStandard.prototype.agganciaObiettivo = function ( bersaglio ) {\\n  this.bersaglioAgganciato = bersaglio;\\n}\\n\\n\\/\\/ Funzione di esplosione del missile standard.\\nMissileStandard.prototype.esplodi = function ( ) {\\n\\/\\/###START_MODIFICABILE###\\n  var x = this.bersaglioAgganciato.x;\\n  var y = this.bersaglioAgganciato.y;\\n  return ( [ new FrammentoMissile( x, y ) ] );\\n\\/\\/###END_MODIFICABILE###\\n}",\r\n    "test": "(\\nfunction ( ) {\\n  \\n  var esito = true;\\n  \\n  var missileUtente = new MissileStandard();\\n  x = rand(0, 200);\\n  y = rand(0, 100);\\n  var bersagli = [ { appartieneNemico: true, x: x, y: y} ];\\n  var ySdoppio = missileUtente.miraBersaglio( bersagli );\\n  var bersaglio = missileUtente.bersaglioAgganciato;\\n  var missiliFrammenti = missileUtente.esplodi();\\n  \\n  if( missiliFrammenti.length !== 2 ) {\\n    esito = false;\\n  }\\n  \\n  $.each( missiliFrammenti, function( i, m ) {\\n    if( ! m instanceof MissileNemicoFrammento )\\n      esito = false;\\n    \\n    if( ySdoppio !== (Math.abs(430 - y) \\/ 2) + y)\\n      esito = false;\\n    \\n  } );\\n\\n  return esito;\\n}\\n) ();",\r\n    "descrizione": "Ci sono due classi:\\n<li> <tt>MissileTestataMultipla<\\/tt>: missile alieno che si sdoppia;<\\/li>\\n<li> <tt>MissileStandard<\\/tt>: missile di ordinanza terrestre.<\\/li>\\nL&#x27;obiettivo &#xE8; inserire la tecnologia aliena dello sdoppiamento dei missili nella nostra classe <tt>MissileStandard<\\/tt>.<br>\\nCome si pu&#xF2; notare, le due classi hanno una struttura comune: tra di esse l&#x27;unica differenza sta nei nomi delle caratteristiche e delle  funzioni.<br>\\nPer spostare la tecnologia dalla classe <tt>MissileTestataMultipla<\\/tt> &#xE8; necessario comprendere in quale punto della classe <tt>MissileStandard<\\/tt> devono essere collocate le funzionalit&#xE0; di sdoppiamento, tenendo conto della somiglianza tra le due classi e dei nomi diversi.",\r\n    "aiuto": "Come prima cosa &#xE8; necessario modificare la funzione <tt>MissileStandard.prototype.miraBersaglio()<\\/tt>, coerentemente con la funzione <tt>MissileTestataMultipla.prototype.identificaObiettivo()<\\/tt>. Al posto delle righe:\\n<pre><code>var coordinateEsplosione = { esplosioneX: x, esplosioneY: y };\\nthis.agganciaObiettivo( bersaglio );\\nreturn coordinateEsplosione.esplosioneY;\\n<\\/code><\\/pre>\\nandranno inserite le seguenti righe, che permettono di calcolare l&#x27;altezza di sdoppiamento del missile:\\n<pre><code>var altezza = this.calcolaAltezzaSdoppiamento( x, y );\\nthis.agganciaObiettivo( bersaglio );\\nreturn altezza;\\n<\\/code><\\/pre>\\nSuccessivamente sar&#xE0; necessario modificare la funzione <tt>MissileStandard.prototype.esplodi()<\\/tt>, coerentemente con la funzione <tt>MissileTestataMultipla.prototype.detonazione()<\\/tt>, cambiando dunque le righe:\\n<pre><code>var x = this.bersaglioAgganciato.x;\\nvar y = this.bersaglioAgganciato.y;\\nreturn ( [ new FrammentoMissile( x, y ) ] );\\n<\\/code><\\/pre>\\ncon le righe:\\n<pre><code>var frammentoMissile1 = new FrammentoMissile( this.bersaglio.x + 10, this.bersaglio.y );\\nvar frammentoMissile2 = new FrammentoMissile( this.bersaglio.x - 10, this.bersaglio.y );\\nvar frammentiMissile = [];\\nframmentiMissile.push( frammentoMissile1 );\\nframmentiMissile.push( frammentoMissile2 );\\nreturn frammentiMissile;\\n<\\/code><\\/pre>",\r\n    "messaggioFallimento": "Il MissileStandard non si sdoppia a dovere."}\r\n  ]\r\n}');
INSERT INTO `livello` (`idlivello`, `numero`, `nome`, `json`) VALUES
(8, 8, 'Una nuova minaccia', '{\r\n  "nomeLivello": "Una nuova minaccia",\r\n  "numeroLivello": 8,\r\n  "costoAiuti": 5000,\r\n\r\n  "dialogoIniziale":\r\n  [\r\n    {"nome": "Ortiz",\r\n    "testo": "Alzati, maggiore."},\r\n    {"nome": "Simeoni",\r\n    "testo": "Buongiorno, generale."},\r\n    {"nome": "Ortiz",\r\n    "testo": "Abbiamo un nuovo compito per te, forse l&#x27;ultimo, forse no."},\r\n    {"nome": "Simeoni",\r\n    "testo": "Non ho molta scelta, vero?"},\r\n    {"nome": "Ortiz",\r\n    "testo": "Decisamente no."},\r\n    {"nome": "Simeoni",\r\n    "testo": "Qual &#xE8; il problema?"},\r\n    {"nome": "Ortiz",\r\n    "testo": "Abbiamo riorganizzato le basi al fronte. La met&#xE0; di esse sono state svuotate, in modo da poterle usare come esca per confondere il Nemico. Il problema &#xE8; che il Nemico sta intercettando le nostre comunicazioni e riesce a comprendere quali siano le basi per noi vitali e quali quelle finte."},\r\n    {"nome": "Simeoni",\r\n    "testo": "Comincio a capire di cosa si tratta..."},\r\n    {"nome": "Ortiz",\r\n    "testo": "Ogni nas e ha un canale radio, che utilizza per comunicare con il quartier generale. Il canale n&#xB0;0 viene usato dalla prima base a sinistra nello schermo, il n&#xB0;1 dalla seconda e cos&#xEC; via fino all&#x27;ultima base a destra, che utilizza il canale n&#xB0;5."},\r\n    {"nome": "Simeoni",\r\n    "testo": "Capito."},\r\n    {"nome": "Ortiz",\r\n    "testo": "Il tuo compito sar&#xE0; quello di cambiare il segnale che arriva al quartier generale, in modo tale da rendere le basi vitali come ausiliarie e viceversa, portando fuori strada il Nemico. In questo modo infatti colpir&#xE0; prima le basi ausiliari, mascherate da basi vitali."},\r\n    {"nome": "Simeoni",\r\n    "testo": "Chiaro. Ma come facciamo a capire chi ci sta mandando il messaggio?"},\r\n    {"nome": "Ortiz",\r\n    "testo": "Ottima domanda. I segnali, quando arrivano al quartier generale, devono essere interpretati correttamente. Come ben sai in informatica questa procedura si chiama codifica e decodifica."},\r\n    {"nome": "Simeoni",\r\n    "testo": "Esattamente. Si prende un messaggio e lo si maschera tramite una codifica. Arrivato il messaggio codificato, si applica una decodifica per leggere il messaggio originale."},\r\n    {"nome": "Ortiz",\r\n    "testo": "Corretto."}\r\n  ],\r\n  \r\n  "dialogoFinale":\r\n  [\r\n    {"nome": "Ortiz",\r\n    "testo": "Ottimo lavoro, uomini. Ora ho una comunicazione molto importante da fare."},\r\n    {"nome": "Prosdocimo",\r\n    "testo": "Cosa ha in mente in di fare?"},\r\n    {"nome": "Simeoni",\r\n    "testo": "Non lo so, ma non mi aspetto nulla di buono."},\r\n    {"nome": "Ortiz",\r\n    "testo": "Silenzio, laggi&#xF9; in fondo. Ho appena ricevuto un ordine dallo stato maggiore, con priorit&#xE0; 0. Il governo terrestre, grazie a persone come me, &#xE8; riuscito ad ottenere un&#x27;alleanza con gli Ibridi. Molti di voi si staranno chiedendo cosa sono gli Ibridi: ebbene, Zurlin, qui, ne &#xE8; un esempio. Dall&#x27;altra parte del deserto, molti anni fa, arrivarono navi di disperati che fuggivano dalla povert&#xE0; dei pianeti dell&#x27;orlo della galassia. Si sono fusi con la razza tronk, creando una nuova speranza per l&#x27;Universo."},\r\n    {"nome": "Simeoni",\r\n    "testo": "Traditore!"},\r\n    {"nome": "Ortiz",\r\n    "testo": "Zitto, maggiore. Avevi capito alcune cose, te lo concedo. Ma non tutto. Dall&#x27;orlo della galassia confinante, a migliaia di anni luce oltre il deserto dei Barbari, una nuova minaccia si &#xE8; affacciata. Gli Ibridi stavano fuggendo, e non non li abbiamo accolti. Credo che sia ben chiaro nella mente di tutti voi che l&#x27;accoglienza, soprattutto di chi fugge dalla guerra, sia uno dei punti fondamentali dell&#x27;umanit&#xE0;."},\r\n    {"nome": "Prosdocimo",\r\n    "testo": "Non ha tutti i torti, eh eh eh."},\r\n    {"nome": "Ortiz",\r\n    "testo": "Grazie, Prosdocimo. L&#x27;unione fa la forza, dico bene?"},\r\n    {"nome": "Zurlin",\r\n    "testo": "Certo, caro."},\r\n    {"nome": "Ortiz",\r\n    "testo": "Ed &#xE8; per questo che ora, umani e Ibridi, sono chiamati a fronteggiare tale minaccia. I Faragi, i divoratori di mondi, stanno arrivando. Tutte le unit&#xE0; dell&#x27;UTF sono state dislocate sul pianeta Angustina. Se te lo stai chiedendo, maggiore, &#xE8; il pianeta misterioso che compare nei file di configurazione."},\r\n    {"nome": "Simeoni",\r\n    "testo": "Questo spiega tutto..."},\r\n    {"nome": "Ortiz",\r\n    "testo": "Con effetto immediato ordino la mobilitazione del quartier generale dell&#x27;UTF-8 da Bastiani ad Angustina. Solo un&#x27;ultima cosa... maggiore, da che parte stai?"},\r\n    {"nome": "Simeoni",\r\n    "testo": "Ammetto di essermi sbagliato. Tutto quello che ho visto e sentito... puzzava di tradimento. Ora che dici queste cose, ho molti dubbi a riguardo."},\r\n    {"nome": "Zurlin",\r\n    "testo": "Posso intervenire, caro? Simeoni, ti avevo detto che mi dovevi un favore. Bene, te lo chiedo ora. Credici. La minaccia che sta arrivando &#xE8; maggiore di quello che ti aspetti."},\r\n    {"nome": "Simeoni",\r\n    "testo": "Mmmmh... d&#x27;accordo, vi credo. Spero di non pentirmene."},\r\n    {"nome": "Ortiz",\r\n    "testo": "Allora &#xE8; deciso. Slegate il colonnello Simeoni."},\r\n    {"nome": "Simeoni",\r\n    "testo": "Colonnello?"},\r\n    {"nome": "Ortiz",\r\n    "testo": "Ovviamente. Hai dimostrato grande coraggio a sfidarmi. E l&#x27;hai fatto per il bene della Terra. La promozione &#xE8; meritata. Ora, preparatevi per la partenza."},\r\n    {"nome": "Prosdocimo",\r\n    "testo": "Ehm ehm!"},\r\n    {"nome": "Ortiz",\r\n    "testo": "Prosdocimo... hai qualcosa da aggiungere?"},\r\n    {"nome": "Prosdocimo",\r\n    "testo": "Tu sai chi sono, vero Ortiz?"},\r\n    {"nome": "Ortiz",\r\n    "testo": "Posso facilmente immaginarlo..."},\r\n    {"nome": "Prosdocimo",\r\n    "testo": "Ho due richieste. La prima &#xE8; di venire su Angustina con voi, come ufficiale tecnico."},\r\n    {"nome": "Ortiz",\r\n    "testo": "Provveder&#xF2; al pi&#xF9; presto. La seconda?"},\r\n    {"nome": "Prosdocimo",\r\n    "testo": "Cosa &#xE8; successo alla spedizione segreta, trent&#x27;anni fa?"},\r\n    {"nome": "Ortiz",\r\n    "testo": "Memoria lunga, eh? Siamo arrivati su Tronk e abbiamo conosciuto gli Ibridi. I miei compagni sono rimasti l&#xE0;, mentre io sono tornato per eseguire questo lungo lavoro, che si &#xE8; concluso con questa alleanza."},\r\n    {"nome": "Prosdocimo",\r\n    "testo": "Ortiz, la vecchia volpe... eh eh eh."}\r\n  ],\r\n  \r\n  "manuale": "La <i>codifica<\\/i> e la <i>decodifica<\\/i> di un messaggio avvengono in maniera molto semplice. Prendiamo per esempio la parola:\\n<pre><code>aiuto\\n<\\/code><\\/pre>\\nSupponiamo che la nostra codifica preveda di prendere ogni lettera della parola e sostituirla con la lettera immediatamente successiva nell&#x27;alfabeto. La parola aiuto diventa dunque:\\n<pre><code>bjvup\\n<\\/code><\\/pre>\\nIl nemico se non sa qual &#xE8; la codifica da noi utilizzata, quindi difficilmente comprender&#xE0; cosa vuol dire la parola <tt>bjvup<\\/tt>.<br> Quando noi per&#xF2; riceviamo il messaggio, conoscendo la codifica sostituiamo ogni lettera con quella che la precede nell&#x27;alfabeto, ottenendo di nuovo la parola:\\n<pre><code>aiuto\\n<\\/code><\\/pre>\\nLa decodifica &#xE8; dunque l&#x27;operazione inversa della codifica: senza conoscere la codifica sar&#xE0; per&#xF2; molto difficile leggere un messaggio codificato.",\r\n\r\n  "codiceLivello": "function Livello8 ( callbackFineLivello ) {\\n  CoreLevel.call( this, callbackFineLivello );\\n}\\n\\nLivello8.prototype = Object.create( CoreLevel.prototype );\\nLivello8.prototype.constructor = Livello8;\\n\\nLivello8.prototype.inizializzaBasi = function ( ) {\\n  this.coreGame.aggiungiBase( new BaseMilitare( 80,  430, false, 100, ''red'', this.coreGame ) );\\n  this.coreGame.aggiungiBase( new BaseMilitare( 130,  430, true, 100, ''cyan'', this.coreGame ) );  \\n  this.coreGame.aggiungiBase( new BaseMilitare( 180,  430, false, 100, ''red'', this.coreGame ) );\\n  this.coreGame.aggiungiBase( new BaseMilitare( 300,  430, true, 100, ''cyan'', this.coreGame ) );\\n  this.coreGame.aggiungiBase( new BaseMilitare( 350,  430, false, 100, ''red'', this.coreGame ) );\\n  this.coreGame.aggiungiBase( new BaseMilitare( 400,  430, true, 100, ''cyan'', this.coreGame ) );\\n}\\n\\nLivello8.prototype.inizializzaArmiNemiche = function () {\\n  var areaPertenza = this.coreGame.canvas.width;\\n  var ritardoMassimo = 900 * (this.numeroOndata * 0.05);\\n  var velMin = 1.5 + this.numeroOndata * 0.1;\\n  var velMax = 1.6 + this.numeroOndata * 0.1;\\n  var numeroMissili = 25 + Math.floor( this.numeroOndata );\\n  var numeroMissiliSdoppiabili = rand( 0, numeroMissili );\\n  var ritardoRand;\\n  var bersagli = this.coreGame.bersagliAttaccabili();\\n  \\n  var bersagliPrioritari = [];\\n  $.each( this.esaminaCanaliRadio(), function ( i, b ) {\\n    bersagliPrioritari.push( {x: b.x + 15, y: b.y - 10, tipo: b} )\\n  } );\\n  \\n  var bersagliNonBasi = this.coreGame.bersagliAttaccabili().filter( function( b ) {\\n    if( b.tipo instanceof BaseMilitare )\\n      return false;\\n    return true;\\n  } );\\n  \\n  var bersagliPrioritariEsauriti = true;\\n  $.each( bersagliPrioritari, function( i, b ) {\\n    if( b.tipo.attiva === true )\\n      bersagliPrioritariEsauriti = false;\\n  } )\\n  \\n  if( bersagliPrioritariEsauriti === true ) {\\n    var bersagli = this.coreGame.bersagliAttaccabili();\\n  } else {\\n    var bersagli = bersagliNonBasi.concat( bersagliPrioritari );   \\n  }\\n  \\n  for( var i = 0; i < numeroMissili ; i++ ) {\\n    var xRand = rand( 0, areaPertenza );\\n    var velRand = rand( velMin, velMax );\\n    ritardoRand = rand( 0, ritardoMassimo );\\n    this.coreGame.missiliNemici.push( new MissileNemico( {\\n      coloreTestata: ''yellow'',\\n      coloreScia: ''red'',\\n      massimoRaggioEsplosione: 30\\n    }, bersagli, areaPertenza, xRand, velRand,  ritardoRand, this.coreGame) );\\n  }\\n}\\n\\nLivello8.prototype.calcolaCoefficienteOndata = function ( ) {\\n  return this.numeroOndata * 2.5;\\n}\\n\\nLivello8.prototype.setupListeners = function ( ) { \\n  var mySelf = this;\\n  $( ''.gameContainer'' ).off();\\n  $( ''.gameContainer'' ).focus();\\n  \\n  $( ''.gameContainer'' ).on( ''click'', function ( ) {\\n    mySelf.sparo( mySelf.coreGame.mirino.x, mySelf.coreGame.mirino.y, null );\\n  } );\\n  \\n  $( ''.gameContainer'' ).on( ''mouseover'', function( event ) {\\n    mySelf.coreGame.mirino.stato = Mirino.TRACCIAMENTO;\\n  });\\n  $( ''.gameContainer'' ).on( ''mouseout'', function( ) {\\n    mySelf.coreGame.mirino.stato = Mirino.SPENTO;\\n  });\\n  $( ''.gameContainer'' ).on( ''mousemove'', function( event ) {\\n    var offset = $(\\".gameContainer\\").offset();\\n    mySelf.coreGame.mirino.inseguiX = event.pageX - offset.left;\\n    mySelf.coreGame.mirino.inseguiY = event.pageY - offset.top;\\n    mySelf.coreGame.mirino.cambiaMira();\\n  });\\n}\\n\\nLivello8.prototype.scegliTorretta = function ( x, y, tasto ) {\\n  var nonFunzionante = function ( torretta ) {  \\n    if( torretta.stato === BatteriaAntimissile.ATTIVA &&\\n        torretta.numeroMissili > 0 &&\\n        torretta.blocco === false )\\n      return false;\\n    else\\n      return true;\\n  }\\n  \\n  var torrette = this.coreGame.batterieAntimissile;\\n  var torrettaSelezionata;\\n  \\n  if( 0 <= x && x < 170 ) {\\n    torrettaSelezionata = 0;\\n  }\\n  if( 170 <= x && x < 340 ) {\\n    torrettaSelezionata = 1;\\n  }\\n  if( 340 <= x && x <= 510 ) {\\n    torrettaSelezionata = 2;\\n  }\\n  \\n  if( nonFunzionante(torrette[torrettaSelezionata]) === true )\\n    torrettaSelezionata = 1;\\n  if( nonFunzionante(torrette[torrettaSelezionata]) === true )\\n    torrettaSelezionata = 0;\\n  if( nonFunzionante(torrette[torrettaSelezionata]) === true )\\n    torrettaSelezionata = 2;\\n  if( nonFunzionante(torrette[torrettaSelezionata]) === true )\\n    return -1;\\n    \\n  return torrettaSelezionata;\\n}\\n\\nLivello8.prototype.sparo = function ( x, y, tasto ) {\\n  var indiceTorretta = this.scegliTorretta( x, y, tasto );\\n  if( indiceTorretta === -1 )\\n    return;\\n  \\n  var torretta = this.coreGame.batterieAntimissile[indiceTorretta];\\n  var x1 = x + 10;\\n  var x2 = x - 10;\\n  var ySdoppio = (Math.abs(430 - y) \\/ 2) + y;\\n  \\n  var distanzaX = Math.abs( x - torretta.x );\\n  var distanzaY = Math.abs( y - torretta.y );\\n  this.coreGame.missiliTerrestri.push( new _MissileTerrestreDoppio( {\\n    xDiPartenza: torretta.x,\\n    yDiPartenza: torretta.y,\\n    xDiArrivo: x,\\n    yDiArrivo: y,\\n    coloreTestata: ''yellow'',\\n    coloreScia: ''blue'',\\n    massimoRaggioEsplosione: 30,\\n    distanzaPerFrame: 7\\n  }, this.coreGame, torretta.x - distanzaX\\/2, ySdoppio, 2 ) );\\n  \\n  this.coreGame.aggiornaPunteggioMissiliSparati();\\n  torretta.numeroMissili--;\\n  torretta.temperatura += 100;\\n  var temperaturaMinima = 500\\n  torretta.temperaturaSblocco = temperaturaMinima;\\n  if( torretta.temperatura >= 799 ) {\\n    torretta.blocco = true;\\n  };\\n}\\n\\nLivello8.prototype.mostraSchermataIniziale = function ( punteggio ) {\\n  var mySelf = this;\\n  mySelf.coreGame.disegnaStatoGioco();\\n  mySelf.coreGame.disegnaBatterieAntimissile();\\n  var ctx = mySelf.ctx;\\n  \\n  this.intervalloSchermata = setInterval( function () {\\n    mySelf.coreGame.disegnaStatoGioco();\\n    mySelf.coreGame.disegnaBatterieAntimissile();\\n    if( mySelf.numeroSchermata === 0 ) {\\n      ctx.fillStyle = mySelf.coreGame.coloreTestoSecondario;\\n      ctx.textAlign = \\"center\\"; \\n      ctx.font = ''bold 20px arial'';\\n      ctx.fillText( \\"Punteggio: \\" + punteggio, \\n                   mySelf.canvas.width\\/2, mySelf.canvas.height\\/2 - 20 - 120 );\\n      ctx.textAlign = \\"start\\";\\n      \\n      ctx.fillStyle = mySelf.coreGame.coloreTestoPrimario;\\n      ctx.textAlign = \\"center\\"; \\n      ctx.font = ''bold 20px arial'';\\n      ctx.fillText( ''CLICK PER INIZIARE A GIOCARE'', \\n                   mySelf.canvas.width\\/2, mySelf.canvas.height\\/2 - 20 - 50 );\\n      ctx.textAlign = \\"start\\";\\n      \\n      \\/\\/ parte fissa\\n      ctx.textAlign = \\"center\\";\\n      ctx.font = ''bold 20px arial'';\\n      ctx.fillStyle = mySelf.coreGame.coloreTestoSecondario;\\n      ctx.fillText( ''Ondata '' + mySelf.numeroOndata, \\n                   mySelf.canvas.width\\/2, mySelf.canvas.height\\/2 + 20 - 50);\\n      ctx.textAlign = \\"start\\";\\n      var img = document.getElementById(\\"source-mouse-click\\");\\n      ctx.drawImage(img, \\n                    mySelf.canvas.width\\/2 - 100, mySelf.canvas.height\\/2 + 40, 30, 80);\\n      ctx.textAlign = \\"left\\";\\n      ctx.fillStyle = mySelf.coreGame.coloreTestoSecondario;\\n      ctx.fillText(\\"Fare click sinistro\\", \\n                   mySelf.canvas.width\\/2 - 40, mySelf.canvas.height\\/2 + 40 + 40);\\n      ctx.fillText(\\"per sparare\\", \\n                   mySelf.canvas.width\\/2 - 40, mySelf.canvas.height\\/2 + 40 + 40 + 20);\\n      ctx.textAlign = \\"start\\";\\n    } else {\\n      ctx.fillStyle = mySelf.coreGame.coloreTestoSecondario;\\n      ctx.textAlign = \\"center\\"; \\n      ctx.font = ''bold 20px arial'';\\n      ctx.fillText( \\"Punteggio: \\" + punteggio, \\n                   mySelf.canvas.width\\/2, mySelf.canvas.height\\/2 - 20 - 120 );\\n      ctx.textAlign = \\"start\\";\\n      \\n      ctx.textAlign = \\"center\\";\\n      ctx.font = ''bold 20px arial'';\\n      ctx.fillStyle = mySelf.coreGame.coloreTestoSecondario;\\n      ctx.fillText( ''Ondata '' + mySelf.numeroOndata, \\n                   mySelf.canvas.width\\/2, mySelf.canvas.height\\/2 + 20 - 50);\\n      ctx.textAlign = \\"start\\";\\n      var img = document.getElementById(\\"source-mouse-click\\");\\n      ctx.drawImage(img, \\n                    mySelf.canvas.width\\/2 - 100, mySelf.canvas.height\\/2 + 40, 30, 80);\\n      ctx.textAlign = \\"left\\";\\n      ctx.fillStyle = mySelf.coreGame.coloreTestoSecondario;\\n      ctx.fillText(\\"Fare click sinistro\\", \\n                   mySelf.canvas.width\\/2 - 40, mySelf.canvas.height\\/2 + 40 + 40);\\n      ctx.fillText(\\"per sparare\\", \\n                   mySelf.canvas.width\\/2 - 40, mySelf.canvas.height\\/2 + 40 + 40 + 20);\\n      ctx.textAlign = \\"start\\";    \\n    }\\n    mySelf.numeroSchermata = (mySelf.numeroSchermata + 1) % 2;\\n  }, 500 );\\n  \\n  $( ''.gameContainer'' ).off();\\n  $( ''.gameContainer'' ).one( ''click'', function() {\\n    clearInterval( mySelf.intervalloSchermata );\\n    mySelf.preparazioneAvvio();\\n  } );                     \\n}\\n\\nLivello8.prototype.esaminaCanaliRadio = function ( ) {\\n  var basi = this.coreGame.basi;\\n  var messaggi = [];\\n  messaggi[0] = \\"[21:06] Parla base BX0, ci serve immediato aiuto, siamo sotto attacco!\\";\\n  messaggi[1] = \\"[21:04] Parla base AX1, ci serve immediato aiuto, siamo sotto attacco!\\";\\n  messaggi[2] = \\"[21:02] Parla base BX2, ci serve immediato aiuto, siamo sotto attacco!\\";\\n  messaggi[3] = \\"[21:08] Parla base AX3, ci serve immediato aiuto, siamo sotto attacco!\\";\\n  messaggi[4] = \\"[21:01] Parla base BX4, ci serve immediato aiuto, siamo sotto attacco!\\";\\n  messaggi[5] = \\"[21:02] Parla base AX5, ci serve immediato aiuto, siamo sotto attacco!\\";\\n  var canale = [];\\n  canale[0] = { idRadio: \\"BX0\\", messaggio: messaggi[0] };\\n  canale[1] = { idRadio: \\"AX1\\", messaggio: messaggi[1] };\\n  canale[2] = { idRadio: \\"BX2\\", messaggio: messaggi[2] };\\n  canale[3] = { idRadio: \\"AX3\\", messaggio: messaggi[3] };\\n  canale[4] = { idRadio: \\"BX4\\", messaggio: messaggi[4] };\\n  canale[5] = { idRadio: \\"AX5\\", messaggio: messaggi[5] };\\n  \\n  var canaleMescolato = spedisciMessaggiBasi( );\\n  \\n  var bersagliPrioritari = [];\\n  $.each( canaleMescolato, function( i, c ) {\\n    if( c.idRadio.indexOf(\\"AX\\") >= 0)\\n      bersagliPrioritari.push( basi[i] );\\n  } );\\n  \\n  messaggi = riceviMessaggiBasi( canaleMescolato );\\n\\n  return bersagliPrioritari;\\n}",\r\n  \r\n  "fileVirtuali":\r\n  [\r\n    {"nomeFile": "TrasmissioniRadio.js",\r\n    "consultazione": true,\r\n    "codice": "\\/**********\\nFunzione che invia i messaggi da parte delle basi sul mezzo di comunicazione.\\nIl mezzo di comunicazione \\u00e8 un array di 6 elementi chiamato \\"canaliTrasmissione\\" aventi struttura: { idRadio: \\"AX1\\", messaggio: \\"[00:12] Questo \\u00e8 un messaggio di prova\\" }.\\nI messaggi provenienti dalla base numero 0, ossia quella pi\\u00f9 a destra, vengono inseriti nel canaliTrasmissione[0] e cos\\u00ec via...\\n\\nQuesta funzione ritorna i \\"canaliTrasmissione\\" caricati con messaggi e identificatori radio opportunatamente mescolati per confondere il nemico tramite \\"mescolaCanali()\\".\\n**********\\/\\nfunction spedisciMessaggiBasi ( ) {  \\n  var messaggi = [];\\n  messaggi[0] = \\"[21:06] Parla base BX0, ci serve immediato aiuto, siamo sotto attacco!\\";\\n  messaggi[1] = \\"[21:04] Parla base AX1, ci serve immediato aiuto, siamo sotto attacco!\\";\\n  messaggi[2] = \\"[21:02] Parla base BX2, ci serve immediato aiuto, siamo sotto attacco!\\";\\n  messaggi[3] = \\"[21:08] Parla base AX3, ci serve immediato aiuto, siamo sotto attacco!\\";\\n  messaggi[4] = \\"[21:01] Parla base BX4, ci serve immediato aiuto, siamo sotto attacco!\\";\\n  messaggi[5] = \\"[21:02] Parla base AX5, ci serve immediato aiuto, siamo sotto attacco!\\";\\n  \\n  var canaliTrasmissione = [];\\n  canaliTrasmissione[0] = { idRadio: \\"BX0\\", messaggio: messaggi[0] };\\n  canaliTrasmissione[1] = { idRadio: \\"AX1\\", messaggio: messaggi[1] };\\n  canaliTrasmissione[2] = { idRadio: \\"BX2\\", messaggio: messaggi[2] };\\n  canaliTrasmissione[3] = { idRadio: \\"AX3\\", messaggio: messaggi[3] };\\n  canaliTrasmissione[4] = { idRadio: \\"BX4\\", messaggio: messaggi[4] };\\n  canaliTrasmissione[5] = { idRadio: \\"AX5\\", messaggio: messaggi[5] };\\n  \\n  \\/\\/ I canali di trasmissione vengono mescolati per confondere il nemico.\\n  mescolaCanali( canaliTrasmissione );\\n  \\n  return canaliTrasmissione;\\n}\\n\\n\\/**********\\nFunzione che riceve i messaggi dai canali di tramissione e li smista alle relative basi.\\ncanaliTrasmissione \\u00e8 un array di 6 elementi aventi struttura: { idRadio: \\"AX1\\", messaggio: \\"[00:12] Questo \\u00e8 un messaggio di prova\\" }.\\n**********\\/\\nfunction riceviMessaggiBasi ( canaliTrasmissione ) { \\n  \\/\\/ Vengono riordinati i canali di trasmissione per consentire la corretta ricezione\\n  riordinaCanali( canaliTrasmissione );\\n    \\n  var messaggiRicevuti = [];\\n  messaggiRicevuti[0] = canaliTrasmissione[0].messaggio;\\n  messaggiRicevuti[1] = canaliTrasmissione[1].messaggio;\\n  messaggiRicevuti[2] = canaliTrasmissione[2].messaggio;\\n  messaggiRicevuti[3] = canaliTrasmissione[3].messaggio;\\n  messaggiRicevuti[4] = canaliTrasmissione[4].messaggio;\\n  messaggiRicevuti[5] = canaliTrasmissione[5].messaggio;\\n  return messaggiRicevuti;\\n}" },\r\n    {"nomeFile": "identificaBersagliPrioritari.js",\r\n    "consultazione": true,\r\n    "codice": "\\/**********\\nCiao, caro.\\nQuesta funzione \\u00e8 utilizzata dal vostro Nemico per determinare i bersagli terrestri da colpire. \\nCome puoi notare vengono colpite prima le basi il cui canale di trasmissione contiene\\nl''identificatore radio \\"AX\\".\\nSpero ti sia utile,\\nZurlin\\n**********\\/\\nvar determinaBersagliDaColpire = function ( canaleTrasmissione ) {\\n  var bersagliPrioritari = [];\\n  \\n  \\/\\/ Ecco come vengono identificate le basi vitali dal nemico\\n  for( var i = 0; i < canaleTrasmissione.length; ++i ) {\\n    if( c.idRadio[0] === \\"A\\" && c.idRadio[1] === \\"X\\" )\\n      bersagliPrioritari.push( basi[i] );\\n  }\\n  \\n  return bersagliPrioritari;\\n}" },\r\n    {"nomeFile": "Decoder.js",\r\n    "consultazione": false,\r\n    "codice": "\\/**********\\nQuesto \\u00e8 il file per scrivere il codice delle funzioni di codifica e decodifica.\\nFanne buon uso.\\n\\/\\\\\\/\\\\\\/\\\\ Gen. Ortiz \\/\\\\\\/\\\\\\/\\\\\\n**********\\/\\n\\n\\/**********\\nFunzione per il mescolamento dei canali di trasmissione per confondere il nemico.\\nPrende come input un array di 6 elementi chiamato \\"canaliTrasmissione\\" aventi struttura: { idRadio: \\"AX1\\", messaggio: \\"[00:12] Questo \\u00e8 un messaggio di prova\\" }.\\n\\nQuesta funzione deve mescolare i canali di trasmissione in modo tale che ad una base vitale sia associato il canale di tramissione di una base non vitale. Il nemico colpir\\u00e0 con priorit\\u00e0 quest''ultima ignorando l''altra.\\nEsempio:\\n  base in posizione 0 (non vitale) ---> canale 0\\n  base in posizione 1 (vitale)     ---> canale 1\\n  \\n  Invertendo il canale 0 con il canale 1 il nemico creder\\u00e0 che la base non vitale occupi la posizione 1 mentre quella vitale la 0.\\n**********\\/\\nvar mescolaCanali = function ( canaleTrasmissione ) {\\n\\/\\/###START_MODIFICABILE###\\n  \\/\\/ Funzione da implementare!\\n\\/\\/###END_MODIFICABILE###\\n}\\n\\n\\n\\/**********\\nFunzione per il riordinamento dei canali di tramissione a seguito del mescolamento per confondere il nemico.\\nPrende come input un array di 6 elementi chiamato \\"canaliTrasmissione\\" aventi struttura: { idRadio: \\"AX1\\", messaggio: \\"[00:12] Questo \\u00e8 un messaggio di prova\\" }.\\n**********\\/\\nvar riordinaCanali = function ( canaleTrasmissione ) {\\n\\/\\/###START_MODIFICABILE###\\n  \\/\\/ Funzione da implementare!\\n\\/\\/###END_MODIFICABILE###\\n}",\r\n    "test": "( function () {\\n  var basi = [ \\n    new BaseMilitare( 80,  430, false, 100, ''red'', null ),\\n    new BaseMilitare( 130,  430, true, 100, ''cyan'', null ),\\n    new BaseMilitare( 180,  430, false, 100, ''red'', null ),\\n    new BaseMilitare( 300,  430, true, 100, ''cyan'', null ),\\n    new BaseMilitare( 350,  430, false, 100, ''red'', null ),\\n    new BaseMilitare( 400,  430, true, 100, ''cyan'', null ) \\n  ];\\n  \\n  var messaggi = [];\\n  messaggi[0] = \\"[21:06] Parla base BX0, ci serve immediato aiuto, siamo sotto attacco!\\";\\n  messaggi[1] = \\"[21:04] Parla base AX1, ci serve immediato aiuto, siamo sotto attacco!\\";\\n  messaggi[2] = \\"[21:02] Parla base BX2, ci serve immediato aiuto, siamo sotto attacco!\\";\\n  messaggi[3] = \\"[21:08] Parla base AX3, ci serve immediato aiuto, siamo sotto attacco!\\";\\n  messaggi[4] = \\"[21:01] Parla base BX4, ci serve immediato aiuto, siamo sotto attacco!\\";\\n  messaggi[5] = \\"[21:02] Parla base AX5, ci serve immediato aiuto, siamo sotto attacco!\\";\\n  var canale = [];\\n  canale[0] = { idRadio: \\"BX0\\", messaggio: messaggi[0] };\\n  canale[1] = { idRadio: \\"AX1\\", messaggio: messaggi[1] };\\n  canale[2] = { idRadio: \\"BX2\\", messaggio: messaggi[2] };\\n  canale[3] = { idRadio: \\"AX3\\", messaggio: messaggi[3] };\\n  canale[4] = { idRadio: \\"BX4\\", messaggio: messaggi[4] };\\n  canale[5] = { idRadio: \\"AX5\\", messaggio: messaggi[5] };\\n  \\n  var canaleMescolato = spedisciMessaggiBasi( );\\n    \\n  var bersagliPrioritari = [];\\n  $.each( canaleMescolato, function( i, c ) {\\n    if( c.idRadio.indexOf(\\"AX\\") >= 0 )\\n      bersagliPrioritari.push( basi[i] );\\n  } ); \\n    \\n  var esito = true;\\n  var cause = [];\\n  $.each( bersagliPrioritari, function( i, b ) {\\n    if( b.vitale === true ) {\\n      esito = false;\\n    }\\n  } );\\n        \\n  var messaggiRicevuti = riceviMessaggiBasi( canaleMescolato );\\n      \\n  $.each( canale, function( i, m ) {\\n    if( m.messaggio !== messaggiRicevuti[i] ) {\\n      esito = false;\\n    }\\n  } );\\n  \\n  return esito;\\n}\\n) ();",\r\n    "descrizione": "L&#x27;obiettivo &#xE8; quello di riempire due funzioni: la prima necessaria per la codifica del segnale radio e la seconda per la decodifica.<br>\\nNota bene! Le basi colorate di rosso sono quelle ausiliarie, mentre quelle azzurre sono le basi vitali.<br>\\nNella funzione di codifica andr&#xE0; dunque sostituito il segnale di una base ausiliaria con quello di una base vitale e viceversa, scambiando completamente i due tipi di base agli occhi del Nemico.<br>\\nLa funzione di decodifica deve invece ripristinare il collegamento esattamente com&#x27;era prima della codifica: riscambiando cio&#xE8; i codici dei canali radio.",\r\n    "aiuto": "La funzione <tt>mescolaCanali()<\\/tt> pu&#xF2; essere implementata nel modo seguente:\\n<pre><code>var temporaneo;\\ntemporaneo = canaleTrasmissione[0];\\ncanaleTrasmissione[0] = canaleTrasmissione[1];\\ncanaleTrasmissione[1] = temporaneo;\\ntemporaneo = canaleTrasmissione[2];\\ncanaleTrasmissione[2] = canaleTrasmissione[3];\\ncanaleTrasmissione[3] = temporaneo;\\ntemporaneo = canaleTrasmissione[4];\\ncanaleTrasmissione[4] = canaleTrasmissione[5];\\ncanaleTrasmissione[5] = temporaneo;\\n<\\/code><\\/pre>\\nMentre la funzione <tt>riordinaCanali()<\\/tt>, che deve effettuare l&#x27;operazione contraria, pu&#xF2; essere scritta nel modo seguente:\\n<pre><code>var temporaneo;\\ntemporaneo = canaleTrasmissione[1];\\ncanaleTrasmissione[1] = canaleTrasmissione[0];\\ncanaleTrasmissione[0] = temporaneo;\\ntemporaneo = canaleTrasmissione[3];\\ncanaleTrasmissione[3] = canaleTrasmissione[2];\\ncanaleTrasmissione[2] = temporaneo;\\ntemporaneo = canaleTrasmissione[5];\\ncanaleTrasmissione[5] = canaleTrasmissione[4];\\ncanaleTrasmissione[4] = temporaneo;\\n<\\/code><\\/pre>\\nNota bene! La variabile temporanea permette di scambiare agilmente i valori dei canali: senza sarebbe molto pi&#xF9; complicata.",\r\n    "messaggioFallimento": "Codifica o decodifica errate."}\r\n  ]\r\n}');
INSERT INTO `livello` (`idlivello`, `numero`, `nome`, `json`) VALUES
(9, 9, 'Mellara', '{\r\n  "nomeLivello": "Mellara",\r\n "numeroLivello": 9,\r\n "costoAiuti": 6000,\r\n\r\n  "dialogoIniziale": [{\r\n   "nome": "Simeoni",\r\n    "testo": "Eccomi, generale."\r\n  }, {\r\n    "nome": "Ortiz",\r\n    "testo": "Bene, colonnello. Ci siamo tutti, credo."\r\n }, {\r\n    "nome": "Zurlin",\r\n   "testo": "Silenzio! Miei cari, ho l&#39;onore di presentarvi il generale di stato maggiore dell&#39;esercito ibrido, lady Mellara!"\r\n }, {\r\n    "nome": "Mellara",\r\n    "testo": "Buongiorno a tutti. &#200; un onore presenziare alla prima operazione congiunta. Terrestri ed Ibridi, uniti in un solo esercito pronto a contrastare la pi&#249; terribile delle minacce. I faragi non sono nemici comuni: divoratori di mondi, si nutrono dell&#39;oscurit&#224; cosmica. Non si limitano a soggiogare i pianeti, li distruggono, trasformandoli in polvere."\r\n  }, {\r\n    "nome": "Simeoni",\r\n    "testo": "L&#39;onore &#232; nostro, lady Mellara. Speriamo che questa cooperazione diventi fruttuosa, anche dopo la vittoria."\r\n }, {\r\n    "nome": "Mellara",\r\n    "testo": "Ti vedo particolarmente convinto, terrestre."\r\n }, {\r\n    "nome": "Simeoni",\r\n    "testo": "Beh, non abbiamo ancora perso, giusto?"\r\n }, {\r\n    "nome": "Mellara",\r\n    "testo": "Sono felice del tuo morale. Sei il colonnello Simeoni giusto? Il generale Ortiz mi ha parlato molto di te..."\r\n }, {\r\n    "nome": "Simeoni",\r\n    "testo": "Immagino con l&#39;appellativo di ficcanaso, per lo meno all&#39;inizio."\r\n }, {\r\n    "nome": "Ortiz",\r\n    "testo": "Ah ah ah! Esattamente. Ma credo che ogni conflitto tra noi si sia spento, ora."\r\n }, {\r\n    "nome": "Mellara",\r\n    "testo": "Ne sono convinta. Passiamo al punto centrale. I faragi stanno per attaccare Angustina, con armi che nemmeno immaginiamo. Ho bisogno dei migliori tecnici a disposizione."\r\n }, {\r\n    "nome": "Zurlin",\r\n   "testo": "Tenente Zurlin presente, mia signora!"\r\n  }, {\r\n    "nome": "Simeoni",\r\n    "testo": "Colonnello Simeoni presente!"\r\n }, {\r\n    "nome": "Prosdocimo",\r\n   "testo": "Tecnico Maggiore Prosdocimo presente!"\r\n  }, {\r\n    "nome": "Simeoni",\r\n    "testo": "Ecco l&#39;altro ficcanaso. Ti hanno dato i gradi, allora?"\r\n }, {\r\n    "nome": "Prosdocimo",\r\n   "testo": "Ovviamente, eh eh eh. Non potevano esimersi."\r\n }, {\r\n    "nome": "Mellara",\r\n    "testo": "Basta con i convenevoli. &#200; ora di rispedire i faragi nelle tenebre che li hanno generati. Il loro primo attacco solitamente mira a radere al suolo ogni costruzione che compare sulla faccia del pianeta. Per questo sono certa che Angustina subir&#224; un bombardamento a tappeto."\r\n }, {\r\n    "nome": "Ortiz",\r\n    "testo": "Utilizzano missili molto veloci e molto potenti. Per contrastarli sar&#224; necessario creare un nuovo sistema di sparo che li neutralizzi prima che tocchino il suolo di Angustina."\r\n }, {\r\n    "nome": "Prosdocimo",\r\n   "testo": "L&#39;ideale sarebbe progettare un comando che rilasci pi&#249; missili da una torretta, in modo da creare uno sbarramento di fuoco. L&#39;esplosione dei nostri missili fermerebbe l&#39;avanzata dei loro. Eh eh eh..."\r\n }, {\r\n    "nome": "Simeoni",\r\n    "testo": "Praticamente una striscia di esplosioni dalla quale nessuno dei missili dei faragi possa uscire... &#232; una buona idea, Prosdocimo!"\r\n  }, {\r\n    "nome": "Prosdocimo",\r\n   "testo": "Eh eh eh, grazie."\r\n  }, {\r\n    "nome": "Mellara",\r\n        "testo": "Allora &#232; deciso. Presto, cominciate a lavorare su questa nuova arma... me lo sento, stanno arrivando."\r\n }],\r\n\r\n "dialogoFinale": [{\r\n   "nome": "Mellara",\r\n    "testo": "Ottimo lavoro, soldati. Ma torneranno. Ci manca l&#39;ultimo passo per la vittoria, ma &#232; il passo pi&#249; difficile. I faragi stanno preparando la loro nave madre, capace con una sola cannonata di distruggere Angustina."\r\n  }, {\r\n    "nome": "Zurlin",\r\n   "testo": "La Divoratrice..."\r\n  }, {\r\n    "nome": "Mellara",\r\n    "testo": "Esattamente, tenente. Ma non dobbiamo scoraggiarci. Questa alleanza ha appena dimostrato di come due popoli, prima contrapposti ed ora uniti, possano andare al di l&#224; dei limiti che pensavano di avere. Vedrete che la vittoria arriver&#224;."\r\n }, {\r\n    "nome": "Ortiz",\r\n    "testo": "Propongo di andare a dormire. Domani sar&#224; una lunga giornata nell&#39;eterna notte di Bastiani."\r\n }, {\r\n    "nome": "Simeoni",\r\n    "testo": "Ma siamo su Angustina, signore."\r\n  }, {\r\n    "nome": "Ortiz",\r\n    "testo": "Ah ah ah. Perdonami, Simeoni. Ho passato talmente tanto tempo su quel pianeta..."\r\n }, {\r\n    "nome": "Simeoni",\r\n    "testo": "..."\r\n  }, {\r\n    "nome": "Zurlin",\r\n   "testo": "Se ne sono andati tutti a dormire caro... dovresti andare anche tu."\r\n  }, {\r\n    "nome": "Simeoni",\r\n    "testo": "Ah, sei tu Zurlin. Stavo guardando il cielo di Angustina... e riflettendo."\r\n }, {\r\n    "nome": "Zurlin",\r\n   "testo": "Su cosa, caro?"\r\n }, {\r\n    "nome": "Simeoni",\r\n    "testo": "Questo potrebbe essere la nostra ultima notte."\r\n }, {\r\n    "nome": "Zurlin",\r\n   "testo": "Pensieri cos&#236; cupi non ti si addicono. Ti pensavo uno abbastanza spavaldo da non spaventarsi davanti alle difficolt&#224;..."\r\n  }, {\r\n    "nome": "Simeoni",\r\n    "testo": "Ed io pensavo lo stesso di te. Ma ho visto che quando lady Mellara ha nominato la Divoratrice sei sbiancata. Tu l&#39;hai vista quell&#39;astronave... o sbaglio?"\r\n  }, {\r\n    "nome": "Zurlin",\r\n   "testo": "Non sbagli, purtroppo. Ero ancora una ragazzina, quando su Tronk cominciarono a girare i video degli attacchi dei faragi... la Divoratrice non si limita ad uccidere. Ti trasforma in polvere. Come se non fossi mai esistito..."\r\n }, {\r\n    "nome": "Simeoni",\r\n    "testo": "Speriamo di riuscire a sconfiggerla... anche se mi sembra un&#39;impresa titanica."\r\n }, {\r\n    "nome": "Zurlin",\r\n        "testo": "Vedrai che ce la faremo, caro. Separati, non avremmo avuto possibilit&#224;... ma nulla &#232; impossibile, ora che siamo uniti."\r\n  }],\r\n\r\n "manuale": "<b>Array<\\/b>\\nTi ricordi? Un array &#xE8; una variabile che contiene pi&#xF9; valori. Un esempio di array pu&#xF2; essere il seguente:\\n<pre><code>var numeri = [1, 2, 3, 4];\\n<\\/code><\\/pre>\\nquesto array contiene i numeri da 1 a 4.<br>\\nPer inserire successivamente un elemento in un array, &#xE8; necessario utilizzare l&#x27;istruzione di <tt>push<\\/tt>. Per esempio, se vogliamo aggiungere l&#x27;elemento 5 nell&#x27;array <tt>numeri<\\/tt>, &#xE8; necessario effettuare la seguente istruzione:\\n<pre><code>numeri.push( 5 );\\n<\\/code><\\/pre>\\nL&#x27;array che risulta da questa istruzione sar&#xE0; il seguente:\\n<pre><code>[1, 2, 3, 4, 5]\\n<\\/code><\\/pre>\\nNota bene! Ogni elemento di un array ha un numero, che indica la sua posizione all&#x27;interno dell&#x27;array stesso. Tale numero parte da 0, e viene cos&#xEC; utilizzato:\\n<pre><code>var a = numeri[ 0 ];\\nvar b = numeri[ 4 ];\\n<\\/code><\\/pre>\\nIn questo codice, <tt>a<\\/tt> contiene il valore 1, che occupa la posizione 0 all&#x27;interno dell&#x27;array; la variabile <tt>b<\\/tt> contiene invece il valore 5, che occupa la posizione 4.<br>\\nUn&#x27;operazione molto importante applicabile agli array &#xE8; quella per determinarne la lunghezza.<br>\\nSi prenda un esempio di array di stringhe:\\n<pre><code>var personaggi = [\\"Simeoni\\", \\"Ortiz\\", \\"Prosdocimo\\"];\\n<\\/code><\\/pre>\\nLa lunghezza di un array corrisponde al numero di elementi che esso contiene: in questo caso &#xE8; pari a 3, dato che <tt>personaggi<\\/tt> contiene tre stringhe. Per ottenere tale numero &#xE8; necessario effettuare la seguente operazione:\\n<pre><code>var lunghezzaArray = personaggi.length;\\n<\\/code><\\/pre>\\nLa variabile <tt>lunghezzaArray<\\/tt> contiene il numero 3, che &#xE8; il numero di elementi presenti in <tt>personaggi<\\/tt>.<br>\\n<b>Struttura<\\/b>\\n<b>Struttura<\\/b><br>\\nUna <b>struttura<\\/b> \\u00e8 invece simile ad una classe, ma possiede solamente campi e nessuna funzione. Eccone un esempio:\\n<pre><code>var soldato = {grado: \\"colonnello\\", matricola: 150716};\\n<\\/code><\\/pre>\\n&#200; possibile accedere ad un campo di una struttura in maniera molto semplice:\\n<pre><code>var matricola = soldato.matricola;\\n<\\/code><\\/pre>\\nIn questo caso, la variabile <tt>matricola<\\/tt> conterr\\u00e0 il valore 150716.<br>\\nOvviamente &#xE8; possibile utilizzare le strutture per creare degli array.<br>\\nL&#x27;esempio seguente mostra come fare un array di strutture, utilizzando la struttura vista in precedenza:\\n<pre><code>var soldato1 = {grado: \\"colonnello\\", matricola: 150716};\\nvar soldato2 = {grado: \\"soldato semplice\\", matricola: 150717};\\nvar soldato3 = {grado: \\"generale\\", matricola: 150718};\\n\\/\\/ Si crea l''array che deve contenere i soldati\\nvar arraySoldati = [];\\n\\/\\/ Si riempie questo array\\narraySoldati.push(soldato1);\\narraySoldati.push(soldato2);\\narraySoldati.push(soldato3);\\n<\\/code><\\/pre>\\nPer accedere al campo <tt>grado<\\/tt> della variabile <tt>soldato2<\\/tt>, per esempio, &#xE8; necessario effettuare la seguente operazione:\\n<pre><code>\\/\\/ Ricorda! Gli indici degli array partono da 0.\\nvar gradoSoldato2 = arraySoldati[1].grado;\\n<\\/code><\\/pre>\\nLa variabile <tt>gradoSoldato2<\\/tt> contiene dunque la stringa <tt>soldato semplice<\\/tt>.",\r\n\r\n "codiceLivello": "function Livello9 ( callbackFineLivello ) {\\n  CoreLevel.call( this, callbackFineLivello );\\n}\\n\\nLivello9.prototype = Object.create( CoreLevel.prototype );\\nLivello9.prototype.constructor = Livello9;\\n\\nLivello9.prototype.inizializzaLivello = function ( numeroOndata ) {\\n  var mySelf = this;\\n  \\n  this.numeroOndata = numeroOndata;\\n  \\n  this.inizializzaMirino();\\n  this.coreGame = new CoreGame( this.canvas, this.mirino, {\\n    coloreSfondo: ''black'',\\n    coloreTerreno: ''red'',\\n    coloreTestoPrimario: ''blue'',\\n    coloreTestoSecondario: ''red''\\n  });\\n  var coeff = this.calcolaCoefficienteOndata();\\n  this.coreGame.aggiornaCoefficienteOndata( coeff );\\n  this.inizializzaTorrette();\\n  \\n  if( this.numeroOndata === 1 ) {\\n    this.inizializzaBasi();\\n  } else {\\n    $.each( this.basi, function ( indice, base ) {\\n      base.coreGame = mySelf.coreGame\\n    } );\\n    mySelf.coreGame.basi = mySelf.basi;\\n  }\\n  \\n  this.inizializzaArmiNemiche();\\n  this.inizializzaArmiTerrestri();\\n}\\n\\nLivello9.prototype.inizializzaBasi = function ( ) {\\n  this.coreGame.aggiungiBase( new BaseMilitare( 80,  430, true, 100, ''cyan'', this.coreGame ) );\\n  this.coreGame.aggiungiBase( new BaseMilitare( 130,  430, true, 100, ''cyan'', this.coreGame ) );  \\n  this.coreGame.aggiungiBase( new BaseMilitare( 180,  430, true, 100, ''cyan'', this.coreGame ) );\\n  this.coreGame.aggiungiBase( new BaseMilitare( 300,  430, true, 100, ''cyan'', this.coreGame ) );\\n  this.coreGame.aggiungiBase( new BaseMilitare( 350,  430, true, 100, ''cyan'', this.coreGame ) );\\n  this.coreGame.aggiungiBase( new BaseMilitare( 400,  430, true, 100, ''cyan'', this.coreGame ) );\\n}\\n\\nLivello9.prototype.inizializzaArmiNemiche = function ( ) {\\n  var areaPertenza = this.coreGame.canvas.width;\\n  var ritardoMassimo = 900 * (this.numeroOndata * 0.05);\\n  var velMin = 1.8 + this.numeroOndata * 0.1;\\n  var velMax = 2.0 + this.numeroOndata * 0.1;\\n  var numeroMissili = 30 + Math.floor( this.numeroOndata );\\n  var numeroMissiliSdoppiabili = rand( 0, numeroMissili );\\n  var ritardoRand;\\n  var bersagli = this.coreGame.bersagliAttaccabili();\\n    \\n  for( var i = 0; i < numeroMissili ; i++ ) {\\n    var xRand = rand( 0, areaPertenza );\\n    var velRand = rand( velMin, velMax );\\n    ritardoRand = rand( 0, ritardoMassimo );\\n    this.coreGame.missiliNemici.push( new MissileNemico( {\\n      coloreTestata: ''yellow'',\\n      coloreScia: ''red'',\\n      massimoRaggioEsplosione: 30\\n    }, bersagli, areaPertenza, xRand, velRand,  ritardoRand, this.coreGame) );\\n  }\\n}\\n\\nLivello9.prototype.calcolaCoefficienteOndata = function ( ) {\\n  return this.numeroOndata * 2.5;\\n}\\n\\nLivello9.prototype.setupListeners = function ( ) { \\n  var mySelf = this;\\n  $( ''.gameContainer'' ).off();\\n  $( ''.gameContainer'' ).focus();\\n  \\n  $( ''.gameContainer'' ).on( ''click'', function ( ) {\\n    mySelf.sparo( mySelf.coreGame.mirino.x, mySelf.coreGame.mirino.y, null );\\n  } );\\n  $( ''.gameContainer'' ).bind( ''keyup'', function( event ) {\\n    if( event.which === 32)\\n      mySelf.sparoSpeciale( mySelf.coreGame.mirino.x, mySelf.coreGame.mirino.y );\\n  });\\n  \\n  $( ''.gameContainer'' ).on( ''mouseover'', function( event ) {\\n    mySelf.coreGame.mirino.stato = Mirino.TRACCIAMENTO;\\n  });\\n  $( ''.gameContainer'' ).on( ''mouseout'', function( ) {\\n    mySelf.coreGame.mirino.stato = Mirino.SPENTO;\\n  });\\n  $( ''.gameContainer'' ).on( ''mousemove'', function( event ) {\\n    var offset = $(\\".gameContainer\\").offset();\\n    mySelf.coreGame.mirino.inseguiX = event.pageX - offset.left;\\n    mySelf.coreGame.mirino.inseguiY = event.pageY - offset.top;\\n    mySelf.coreGame.mirino.cambiaMira();\\n  });\\n}\\n\\nLivello9.prototype.scegliTorretta = function ( x, y, tasto ) {\\n  var nonFunzionante = function ( torretta ) {  \\n    if( torretta.stato === BatteriaAntimissile.ATTIVA &&\\n        torretta.numeroMissili > 0 &&\\n        torretta.blocco === false )\\n      return false;\\n    else\\n      return true;\\n  }\\n  \\n  var torrette = this.coreGame.batterieAntimissile;\\n  var torrettaSelezionata;\\n  \\n  if( 0 <= x && x < 170 ) {\\n    torrettaSelezionata = 0;\\n  }\\n  if( 170 <= x && x < 340 ) {\\n    torrettaSelezionata = 1;\\n  }\\n  if( 340 <= x && x <= 510 ) {\\n    torrettaSelezionata = 2;\\n  }\\n  \\n  if( nonFunzionante(torrette[torrettaSelezionata]) === true )\\n    torrettaSelezionata = 1;\\n  if( nonFunzionante(torrette[torrettaSelezionata]) === true )\\n    torrettaSelezionata = 0;\\n  if( nonFunzionante(torrette[torrettaSelezionata]) === true )\\n    torrettaSelezionata = 2;\\n  if( nonFunzionante(torrette[torrettaSelezionata]) === true )\\n    return -1;\\n    \\n  return torrettaSelezionata;\\n}\\n\\nLivello9.prototype.sparo = function ( x, y, tasto ) {\\n\\n  var indiceTorretta = this.scegliTorretta( x, y, tasto );\\n  if( indiceTorretta === -1 )\\n    return;\\n  \\n  var torretta = this.coreGame.batterieAntimissile[indiceTorretta];\\n  var x1 = x + 10;\\n  var x2 = x - 10;\\n  var ySdoppio = (Math.abs(430 - y) \\/ 2) + y;\\n    \\n  var distanzaX = Math.abs( x - torretta.x );\\n  var distanzaY = Math.abs( y - torretta.y );\\n  this.coreGame.missiliTerrestri.push( new _MissileTerrestreDoppio( {\\n    xDiPartenza: torretta.x,\\n    yDiPartenza: torretta.y,\\n    xDiArrivo: x,\\n    yDiArrivo: y,\\n    coloreTestata: ''yellow'',\\n    coloreScia: ''blue'',\\n    massimoRaggioEsplosione: 30,\\n    distanzaPerFrame: 7\\n  }, this.coreGame, torretta.x - distanzaX\\/2, ySdoppio, 2 ) );\\n  \\n  this.coreGame.aggiornaPunteggioMissiliSparati();\\n  torretta.numeroMissili--;\\n  torretta.temperatura += 100;\\n  var temperaturaMinima = 500\\n  torretta.temperaturaSblocco = temperaturaMinima;\\n  if( torretta.temperatura >= 799 ) {\\n    torretta.blocco = true;\\n  };\\n}\\n\\nLivello9.prototype.mostraSchermataIniziale = function ( punteggio ) {\\n  var mySelf = this;\\n  mySelf.coreGame.disegnaStatoGioco();\\n  mySelf.coreGame.disegnaBatterieAntimissile();\\n  var ctx = mySelf.ctx;\\n  \\n  this.intervalloSchermata = setInterval( function () {\\n    mySelf.coreGame.disegnaStatoGioco();\\n    mySelf.coreGame.disegnaBatterieAntimissile();\\n    if( mySelf.numeroSchermata === 0 ) {\\n      ctx.fillStyle = mySelf.coreGame.coloreTestoSecondario;\\n      ctx.textAlign = \\"center\\"; \\n      ctx.font = ''bold 20px arial'';\\n      ctx.fillText( \\"Punteggio: \\" + punteggio, \\n                   mySelf.canvas.width\\/2, mySelf.canvas.height\\/2 - 20 - 120 );\\n      ctx.textAlign = \\"start\\";\\n      \\n      ctx.fillStyle = mySelf.coreGame.coloreTestoPrimario;\\n      ctx.textAlign = \\"center\\"; \\n      ctx.font = ''bold 20px arial'';\\n      ctx.fillText( ''CLICK PER INIZIARE A GIOCARE'', \\n                   mySelf.canvas.width\\/2, mySelf.canvas.height\\/2 - 20 - 50 );\\n      ctx.textAlign = \\"start\\";\\n      \\n      \\/\\/ parte fissa\\n      ctx.textAlign = \\"center\\";\\n      ctx.font = ''bold 20px arial'';\\n      ctx.fillStyle = mySelf.coreGame.coloreTestoSecondario;\\n      ctx.fillText( ''Ondata '' + mySelf.numeroOndata, \\n                   mySelf.canvas.width\\/2, mySelf.canvas.height\\/2 + 20 - 50);\\n      ctx.textAlign = \\"start\\";\\n      var img = document.getElementById(\\"source-mouse-click\\");\\n      ctx.drawImage(img, \\n                    mySelf.canvas.width\\/2 - 100, mySelf.canvas.height\\/2 + 40, 30, 80);\\n      ctx.textAlign = \\"left\\";\\n      ctx.fillStyle = mySelf.coreGame.coloreTestoSecondario;\\n      ctx.fillText(\\"Fare click sinistro\\", \\n                   mySelf.canvas.width\\/2 - 40, mySelf.canvas.height\\/2 + 40 + 40);\\n      ctx.fillText(\\"per sparare\\", \\n                   mySelf.canvas.width\\/2 - 40, mySelf.canvas.height\\/2 + 40 + 40 + 20);\\n      ctx.textAlign = \\"start\\";\\n    } else {\\n      ctx.fillStyle = mySelf.coreGame.coloreTestoSecondario;\\n      ctx.textAlign = \\"center\\"; \\n      ctx.font = ''bold 20px arial'';\\n      ctx.fillText( \\"Punteggio: \\" + punteggio, \\n                   mySelf.canvas.width\\/2, mySelf.canvas.height\\/2 - 20 - 120 );\\n      ctx.textAlign = \\"start\\";\\n      \\n      ctx.textAlign = \\"center\\";\\n      ctx.font = ''bold 20px arial'';\\n      ctx.fillStyle = mySelf.coreGame.coloreTestoSecondario;\\n      ctx.fillText( ''Ondata '' + mySelf.numeroOndata, \\n                   mySelf.canvas.width\\/2, mySelf.canvas.height\\/2 + 20 - 50);\\n      ctx.textAlign = \\"start\\";\\n      var img = document.getElementById(\\"source-mouse-click\\");\\n      ctx.drawImage(img, \\n                    mySelf.canvas.width\\/2 - 100, mySelf.canvas.height\\/2 + 40, 30, 80);\\n      ctx.textAlign = \\"left\\";\\n      ctx.fillStyle = mySelf.coreGame.coloreTestoSecondario;\\n      ctx.fillText(\\"Fare click sinistro\\", \\n                   mySelf.canvas.width\\/2 - 40, mySelf.canvas.height\\/2 + 40 + 40);\\n      ctx.fillText(\\"per sparare\\", \\n                   mySelf.canvas.width\\/2 - 40, mySelf.canvas.height\\/2 + 40 + 40 + 20);\\n      ctx.textAlign = \\"start\\";    \\n    }\\n    mySelf.numeroSchermata = (mySelf.numeroSchermata + 1) % 2;\\n  }, 500 );\\n  \\n  $( ''.gameContainer'' ).off();\\n  $( ''.gameContainer'' ).one( ''click'', function() {\\n    clearInterval( mySelf.intervalloSchermata );\\n    mySelf.preparazioneAvvio();\\n  } );                     \\n}\\n\\nLivello9.prototype.sparoSpeciale = function ( x, y ) {  \\n  var munizioniDaUtilizzare = function ( base ) {\\n    var n = base.numeroMissili;\\n    if ( n > 6 )\\n      return n - 6;\\n    if ( n > 3 )\\n      return n - 3;\\n    if ( n > 1 )\\n      return n - 1;\\n    if ( n === 1 )\\n      return 1;\\n    return 0;\\n  }\\n  var munizioniUtilizzabili = [];\\n  var sommaMunizioniUtilizzabili = 0;\\n  $.each( this.coreGame.batterieAntimissile, function ( i, b ) {\\n    if( b.stato === BatteriaAntimissile.ATTIVA ) {\\n      munizioniUtilizzabili[i] = munizioniDaUtilizzare( b );\\n      sommaMunizioniUtilizzabili += munizioniDaUtilizzare( b );\\n    }\\n  } );\\n  \\n  var area = 30 * sommaMunizioniUtilizzabili;\\n  var inizio = x - area\\/2;\\n  var fine = x + area\\/2;\\n  var contatore = 0;\\n  \\n  var ordineDiFuoco = [];\\n  while( sommaMunizioniUtilizzabili > 0 ) {\\n    $.each( this.coreGame.batterieAntimissile, function ( i, b ) {\\n      if( b.stato === BatteriaAntimissile.ATTIVA \\n         && munizioniUtilizzabili[i] > 0) {\\n        \\n        --munizioniUtilizzabili[i];\\n        --sommaMunizioniUtilizzabili;\\n        \\n        var torretta = b;\\n        \\n        var xSparo = inizio + (contatore * 30);\\n        var ySparo = y;\\n        ordineDiFuoco.push ({ x: xSparo, y: ySparo, numeroTorretta: i });\\n        \\n        ++contatore;\\n      }\\n    } );\\n  }\\n    \\n  var torrette = [];\\n  torrette[0] = new _TorrettaVirtuale ( 0 );\\n  torrette[1] = new _TorrettaVirtuale ( 1 );\\n  torrette[2] = new _TorrettaVirtuale ( 2 );\\n\\n  comandoSparoMultiplo( ordineDiFuoco, torrette );\\n\\n  var mySelf = this;\\n  $.each( torrette, function ( i, t ) {\\n    $.each( t._ordineSparo, function ( j, o ) {\\n      var torretta = mySelf.coreGame.batterieAntimissile[i];\\n      mySelf.coreGame.missiliTerrestri.push( new MissileTerrestre( {\\n        xDiPartenza: torretta.x,\\n        yDiPartenza: torretta.y,\\n        xDiArrivo: o.x,\\n        yDiArrivo: o.y,\\n        coloreTestata: ''yellow'',\\n        coloreScia: ''blue'',\\n        massimoRaggioEsplosione: 30,\\n        distanzaPerFrame: 10\\n      }, mySelf.coreGame ) );\\n      mySelf.coreGame.aggiornaPunteggioMissiliSparati();\\n      torretta.numeroMissili--;\\n    } );\\n  } );\\n    \\n  \\/\\/torretta.temperatura += 100;\\n  \\/\\/var temperaturaMinima = 500\\n  \\/\\/torretta.temperaturaSblocco = temperaturaMinima;\\n  \\/\\/if( torretta.temperatura >= 799 ) {\\n  \\/\\/  torretta.blocco = true;\\n  \\/\\/};\\n}\\n\\nfunction _TorrettaVirtuale ( indice ) {\\n  this.indice = indice;\\n  this._ordineSparo = [];\\n}\\n\\n_TorrettaVirtuale.prototype.cicloSparo = function ( x, y ) {\\n  this._ordineSparo.push( { x: x, y: y } );\\n}\\n\\nvar sceltaTorrettaMigliore = function ( x, y, _torrette ) {\\n  var nonFunzionante = function ( torretta ) {  \\n    if( torretta.stato === BatteriaAntimissile.ATTIVA &&\\n        torretta.numeroMissili > 0 &&\\n        torretta.blocco === false )\\n      return false;\\n    else\\n      return true;\\n  }\\n  \\n  var torrette = this.coreGame.batterieAntimissile;\\n  var torrettaSelezionata;\\n  \\n  if( 0 <= x && x < 170 ) {\\n    torrettaSelezionata = 0;\\n  }\\n  if( 170 <= x && x < 340 ) {\\n    torrettaSelezionata = 1;\\n  }\\n  if( 340 <= x && x <= 510 ) {\\n    torrettaSelezionata = 2;\\n  }\\n  \\n  if( nonFunzionante(torrette[torrettaSelezionata]) === true )\\n    torrettaSelezionata = 1;\\n  if( nonFunzionante(torrette[torrettaSelezionata]) === true )\\n    torrettaSelezionata = 0;\\n  if( nonFunzionante(torrette[torrettaSelezionata]) === true )\\n    torrettaSelezionata = 2;\\n  if( nonFunzionante(torrette[torrettaSelezionata]) === true )\\n    return undefined;\\n    \\n  return torrettaSelezionata;\\n}",\r\n\r\n  "fileVirtuali": [{\r\n    "nomeFile": "ComandoSparoSingolo.js",\r\n   "consultazione": true,\r\n    "codice": "\\/**********\\nFunzione che comanda ad una torretta, scelta opportunamente, di lanciare un missile alla coordinata indicata.\\n\\nPrende come parametri:\\n  - x: intero che indentifica la coordinata x del bersaglio;\\n  - y: intero che indentifica la coordinata y del bersaglio;\\n  - torrette: array di torrette.\\n**********\\/\\nvar comandoSparoSingolo = function ( x, y, torrette ) {\\n  var indiceTorretta = sceltaTorrettaMigliore( x, y, torrette );\\n  if( indiceTorretta !== undefined ) {\\n    var torretta = torrette[indiceTorretta];\\n    torretta.cicloSparo( x, y );\\n  }\\n}"\r\n  }, {\r\n    "nomeFile": "ComandoSparoMultiplo.js",\r\n    "consultazione": false,\r\n   "codice": "\\/**********\\nFunzione che comanda a tutte le torrette di sparare missili lungo una linea creando uno sbarramento di fuoco in cielo.\\n\\nPrende come parametri:\\n  - ordiniDiFuoco: un array di strutture { numeroTorretta: 0, x: 416, y: 188 } dove x ed y sono le coordinate a cui sparare mentre numeroTorretta rappresenta l''identificatore della torretta a cui \\u00e8 diretto l''ordine;\\n  - torrette: array di oggetti torretta le quali possiedono un indice ( torretta.indice ) e consentono lo sparo tramite il metodo torretta.cicloSparo().\\n    \\nObiettivo della funzione \\u00e8 far sparare le torrette in accordo con gli ordini contenuti in ordiniDiFuoco.\\n**********\\/\\nvar comandoSparoMultiplo = function ( ordiniDiFuoco, torrette ) {\\n\\/\\/###START_MODIFICABILE###\\n  \\/\\/ Implementare la funzione!\\n\\/\\/###END_MODIFICABILE###\\n}",\r\n   "test": "( function () {\\n  var esito = true;\\n\\n  var torrette = [];\\n  torrette[0] = new _TorrettaVirtuale ( 0 );\\n  torrette[1] = new _TorrettaVirtuale ( 1 );\\n  torrette[2] = new _TorrettaVirtuale ( 2 );\\n\\n  var ordiniDiFuoco = [];\\n  for( var i = 0; i < rand(4, 4); ++i ) {\\n    ordiniDiFuoco[i] = {\\n      numeroTorretta: rand(0, 2),\\n      x: rand(0, 510),\\n      y: rand(0, 300)\\n    }\\n  }\\n\\n  var ordiniPerTorretta = [];\\n  $.each( ordiniDiFuoco, function ( i, o ) {\\n    ordiniPerTorretta[o.numeroTorretta] = [];\\n  } );\\n  $.each( ordiniDiFuoco, function ( i, o ) {\\n    ordiniPerTorretta[o.numeroTorretta].push( {x: o.x, y: o.y} );\\n  } );\\n\\n  comandoSparoMultiplo( ordiniDiFuoco, torrette );\\n\\n  $.each( torrette, function ( i, t ) {\\n    if( ordiniPerTorretta[t.indice] === undefined )\\n      return;\\n\\n    var ordineTest = ordiniPerTorretta[t.indice];\\n    var ordineUtente = t._ordineSparo;\\n\\n    ordineTest.sort( function( a, b ) { return a.x < b.x; } );\\n    ordineUtente.sort( function( a, b ) { return a.x < b.x; } );\\n\\n    if( ordineTest.length !== ordineUtente.length )\\n      esito = false;\\n    else {\\n      $.each( ordineTest, function ( j, o1 ) {\\n        var o2 = ordineUtente[j];\\n        if( o1.x !== o2.x || o1.y != o2.y )\\n          esito = false;  \\n      } );\\n    }\\n  } );\\n\\n  return esito;\\n} ) ();",\r\n   "descrizione": "L''obiettivo \\u00e8 la creazione di un''arma speciale in grado di eseguire un attacco coordinato tra tutte le torrette, creando uno sbarramento di fuoco.<br>\\nOgni torretta utilizza un''intera fila di missili dal caricatore: quindi alla prima pressione della barra spaziatrice sparer\\u00e0 al pi\\u00f9 4 missili, alla seconda al pi\\u00f9 3, alla terza al pi\\u00f9 2 e alla quarta al pi\\u00f9 1.<br>\\nTale arma viene attivata premendo la barra spaziatrice.<br>\\nIspirandoti alla funzione <tt>comandoSparoSingolo()<\\/tt> dovrai implementare la funzione <tt>comandoSparoMultiplo()<\\/tt>, in grado di fornire alle torrette gli ordini di sparo con le coordinate sulle quali dirigere i propri missili.",\r\n    "aiuto": "L''implementazione della funzione <tt>comandoSparoMultiplo()<\\/tt> pu\\u00f2 essere cos\\u00ec pensata:\\n<pre><code>var l = ordiniDiFuoco.length;\\nfor( var i = 0; i < l; ++i ) {\\n  var ordine = ordiniDiFuoco[i];\\n  var indiceTorretta = ordine.numeroTorretta;\\n  var x = ordine.x;\\n  var y = ordine.y;\\n  var torretta = torrette[indiceTorretta];\\n  torretta.cicloSparo( x, y );\\n}",\r\n   "messaggioFallimento": "Sparo multiplo non implementato correttamente."\r\n }]\r\n}');
INSERT INTO `livello` (`idlivello`, `numero`, `nome`, `json`) VALUES
(10, 10, 'La Divoratrice', '{\r\n  "nomeLivello": "La Divoratrice",\r\n  "numeroLivello": 10,\r\n  "costoAiuti": 10000,\r\n\r\n  "dialogoIniziale":\r\n  [\r\n    {"nome": "Mellara",\r\n    "testo": "Buongiorno a tutti. La Divoratrice &#xE8; stata avvistata non lontano dell&#x27;orbita di Angustina. Dobbiamo prepararci, perch&#xE9; sar&#xE0; qui a breve."},\r\n    {"nome": "Ortiz",\r\n    "testo": "Zurlin, Simeoni e Prosdocimo, siete pronti?"},\r\n    {"nome": "Zurlin",\r\n    "testo": "Pronta e combattiva, caro."},\r\n    {"nome": "Simeoni",\r\n    "testo": "Pronto, signore."},\r\n    {"nome": "Prosdocimo",\r\n    "testo": "Attenti! Eh eh eh."},\r\n    {"nome": "Mellara",\r\n    "testo": "Mi piace vedervi di buon umore. Spero che comprendiate comunque la gravit&#xE0; del momento. Qualcuno ha delle idee su come risolvere la questione Divoratrice?"},\r\n    {"nome": "Ortiz",\r\n    "testo": "La Divoratrice &#xE8; un&#x27;astronave di classe 0, grande il doppio della nave presidenziale e decisamente meglio armata. Possiede due torrette automatiche sui lati, che sparano a bersagli fermi ed in movimento."},\r\n    {"nome": "Mellara",\r\n    "testo": "L&#x27;attacco dei faragi viene accompagnato da dieci navi di classe 3 in orbita, che supportano la discesa della Divoratrice."},\r\n    {"nome": "Ortiz",\r\n    "testo": "La Divoratrice ha un unico punto debole: la pancia dell&#x27;astronave presenta infatti uno sfiato per i gas necessari al caricamento del polverizzatore. Sarebbe bene colpirla con l&#x27;arma pi&#xF9; grossa che abbiamo..."},\r\n    {"nome": "Simeoni",\r\n    "testo": "Potremmo costruire un missile nucleare, indirizzato con sufficiente precisione, per entrare in questo sfiato."},\r\n    {"nome": "Zurlin",\r\n    "testo": "Buona idea caro, anche se le torrette automatiche lo distruggerebbero appena uscito dalla rampa di lancio."},\r\n    {"nome": "Prosdocimo",\r\n    "testo": "Eh eh eh, acuta osservazione. Il problema sono le torrette automatiche..."},\r\n    {"nome": "Mellara",\r\n    "testo": "Protette da un campo di forza, dunque impossibili da abbattere con i missili che usiamo solitamente."},\r\n    {"nome": "Simeoni",\r\n    "testo": "Dobbiamo scortare il missile nucleare usando una torretta... ma in questo modo non riusciremmo a concentrarci sulle navi di classe 3 che ci bombardano dall&#x27;orbita."},\r\n    {"nome": "Prosdocimo",\r\n    "testo": "Beh, per quello ho un&#x27;ideuccia... eh eh eh. Ho sviluppato qualche pezzo di codice, per testare se fosse fossibile creare una tipologia di torretta in grado di puntare e sparare automaticamente ad un bersaglio."},\r\n    {"nome": "Ortiz",\r\n    "testo": "Saresti in grado di concluderlo?"},\r\n    {"nome": "Prosdocimo",\r\n    "testo": "Beh aiutato da loro sicuramente. Eh eh eh."},\r\n    {"nome": "Zurlin",\r\n    "testo": "Quindi scorteremmo il missile nucleare con la torretta centrale, comandata manualmente. Ai lati avremo due torrette automatiche, che ci permettono di non pensare ai missili lanciati dalle navi di classe 3. Il missile nucleare centra lo sfiato e bum! I faragi se ne tornano da dove sono venuti."},\r\n    {"nome": "Simeoni",\r\n    "testo": "Direi che abbiamo un piano."},\r\n    {"nome": "Mellara",\r\n    "testo": "Buona fortuna, soldati. Il destino della galassia &#xE8; nelle vostre mani, ma non credo sia necessario ricordarvelo."}\r\n  ],\r\n  \r\n  "dialogoFinale":\r\n  [\r\n    {"nome": "Simeoni",\r\n    "testo": "Ce l&#x27;abbiamo fatta! Ah ah ah!"},\r\n    {"nome": "Ortiz",\r\n    "testo": "Ben gli sta a quei faragi."},\r\n    {"nome": "Mellara",\r\n    "testo": "La galassia &#xE8; salva. Non sappiamo se torneranno o meno, ma quello che importa &#xE8; aver dimostrato che due culture che si uniscono sono meglio di due culture che si combattono."},\r\n    {"nome": "Ortiz",\r\n    "testo": "Adesso arriva il lavoro grosso. Entra in campo la diplomazia, mentre noi soldati... beh torneremo a marcire su pianeti come Bastiani."},\r\n    {"nome": "Simeoni",\r\n    "testo": "Del resto &#xE8; il nostro lavoro, generale. Prova ad immaginare: se non fossi mai stato su Bastiani, non si sarebbe forse mai arrivati a questa alleanza."},\r\n    {"nome": "Ortiz",\r\n    "testo": "&#xC8; giusto vederla cos&#xEC;."},\r\n    {"nome": "Prosdocimo",\r\n    "testo": "Abbiamo finito con i discorsi sul destino, la vita, l&#x27;universo e tutto quanto? Andiamo a festeggiare! Eh eh eh."},\r\n    {"nome": "Zurlin",\r\n    "testo": "Simeoni, posso parlarti un attimo? In privato."},\r\n    {"nome": "Simeoni",\r\n    "testo": "Certo."},\r\n    {"nome": "Zurlin",\r\n    "testo": "Bene, ora che siamo soli, caro... cio&#xE8;, colonnello. Adesso siamo alleati, quindi..."},\r\n    {"nome": "Simeoni",\r\n    "testo": "Cosa vuoi chiedermi, Zurlin?"},\r\n    {"nome": "Zurlin",\r\n    "testo": "Mi stai simpatico, questo te l&#x27;ho gi&#xE0; detto... mi piacerebbe che venissi su Tronk, con me. So che la tua curiosit&#xE0; prima o poi ti ci porter&#xE0;... ma vorrei che fosse adesso."},\r\n    {"nome": "Simeoni",\r\n    "testo": "Avevo effettivamente intenzione di venire, Zurlin. Magari posso congedarmi dall&#x27;esercito... e insegnare la programmazione! Ai bambini ibridi e terrestri... pensa: la prima scuola di programmazione mista!"},\r\n    {"nome": "Zurlin",\r\n    "testo": "Sarebbe fantastico..."},\r\n    {"nome": "Simeoni",\r\n    "testo": "Allora &#xE8; deciso! Verr&#xF2; con te su Tronk."},\r\n    {"nome": "Zurlin",\r\n    "testo": "Come sono contenta!"},\r\n    {"nome": "Simeoni",\r\n    "testo": "Ora torniamo ai festeggiamenti. Poi, un po&#x27; di meritato riposo e... domani sentir&#xF2; il generale per il mio congedo. Ma ora festeggiamo, su! Che domani avremo un&#x27;altra lunga giornata, nell&#x27;eterna notte di Bastiani..."}\r\n  ],\r\n  \r\n  "manuale": "L''ultima parola chiave importante per comprendere il linguaggio JS \\u00e8 <b>instanceof<\\/b>.<br>\\n<i>instanceof<\\/i> viene utilizzata per capire se un oggetto appartiene o meno ad una classe.<br>\\nPrendi l''esempio seguente, dove vengono creati alcuni oggetti:\\n<pre><code>var fucile = new Arma();\\nvar padella = new Utensile();\\n<\\/code><\\/pre>\\nI due oggetti sono stati creati da due classi diverse, ma possono essere facilmente riconosciute. Prendi per esempio la funzione seguente:\\n<pre><code>var assegnaArma = function ( oggetto, soldato ) {\\n  if ( oggetto instanceof Arma ) {\\n    soldato.arma = oggetto;\\n  }\\n}\\n<\\/code><\\/pre>\\nChiamando tale funzione con l''oggetto <tt>padella<\\/tt> non viene assegnata nessuna arma al soldato, perch\\u00e9 <tt>padella<\\/tt> \\u00e8 di tipo <tt>Utensile<\\/tt>, e non di tipo <tt>Arma<\\/tt>. Se invece viene chiamata passandogli l''oggetto <tt>fucile<\\/tt>, il soldato ricever\\u00e0 il fucile come arma, perch\\u00e9 <tt>fucile<\\/tt> \\u00e8 di tipo <tt>Arma<\\/tt>.",\r\n\r\n  "codiceLivello": "var _missiliSparati = [];\\n\\nvar diff = function ( a1, a2 ) {\\n  var newA = a1.filter( function( x ) {\\n    return a2.indexOf( x ) < 0;\\n  } );\\n  return newA;\\n}\\n\\nfunction Livello10 ( callbackFineLivello ) {\\n  CoreLevel.call( this, callbackFineLivello );\\n}\\n\\nLivello10.prototype = Object.create( CoreLevel.prototype );\\nLivello10.prototype.constructor = Livello10;\\n\\nLivello10.prototype.inizializzaLivello = function ( numeroOndata ) {\\n  var mySelf = this;\\n  \\n  this.numeroOndata = numeroOndata;\\n  \\n  this.inizializzaMirino();\\n  this.coreGame = new CoreGame( this.canvas, this.mirino, {\\n    coloreSfondo: ''black'',\\n    coloreTerreno: ''red'',\\n    coloreTestoPrimario: ''blue'',\\n    coloreTestoSecondario: ''red''\\n  });\\n  var coeff = this.calcolaCoefficienteOndata();\\n  this.coreGame.aggiornaCoefficienteOndata( coeff );\\n  this.inizializzaTorrette();\\n  \\n  if( this.numeroOndata === 1 ) {\\n    this.inizializzaBasi();\\n  } else {\\n    $.each( this.basi, function ( indice, base ) {\\n      base.coreGame = mySelf.coreGame\\n    } );\\n    mySelf.coreGame.basi = mySelf.basi;\\n  }\\n  \\n  this.inizializzaArmiNemiche();\\n  this.inizializzaArmiTerrestri();\\n}\\n\\nLivello10.prototype.inizializzaTorrette = function ( ) {\\n  var coloreMissili = [ ''yellow'', ''yellow'', ''yellow'', ''yellow'', ''yellow'', ''yellow'', ''yellow'', ''yellow'', ''yellow'', ''yellow'' ];\\n  \\n  var mySelf = this;\\n  \\n  var filtro = function ( missile ) {\\n    return ( missile.y > 10 )\\n  };\\n  \\n  var opzioniBatteria1 = { \\n    x: 35, \\n    y: 410, \\n    nMissili: 0, \\n    nSoldati: 10, \\n    colori: coloreMissili, \\n    Tmin: 50, \\n    Tmax: 1000, \\n    deltaTempo: 70, \\n    deltaRaffreddamento: 3\\n  };\\n  this.coreGame.aggiungiBatteriaAntimissile ( \\n    new _TorrettaAutomaticaInterfaccia( 0, opzioniBatteria1, 100, true, filtro, true, 15, 10, ''yellow'', this.coreGame) );\\n  this.coreGame.aggiungiBatteriaAntimissile ( \\n    new BatteriaAntimissile( 255, 410, 10, 10, coloreMissili, 50, 1000, 70, 10, this.coreGame ) );\\n  var opzioniBatteria2 = { \\n    x: 475, \\n    y: 410, \\n    nMissili: 0, \\n    nSoldati: 10, \\n    colori: coloreMissili, \\n    Tmin: 50, \\n    Tmax: 1000, \\n    deltaTempo: 70, \\n    deltaRaffreddamento: 3\\n  };\\n  this.coreGame.aggiungiBatteriaAntimissile ( \\n    new _TorrettaAutomaticaInterfaccia( 2, opzioniBatteria2, 100, true, filtro, true, 15, 10, ''yellow'', this.coreGame ) );  \\n}\\n\\nLivello10.prototype.inizializzaArmiTerrestri = function ( ) {\\n  this.missileNucleare = new MissileNucleare( 255, 410, 255, this.coreGame.minacce[ 0 ].y + 53, this.coreGame );\\n  this.coreGame.missiliTerrestri.push( this.missileNucleare );\\n}\\n\\nLivello10.prototype.inizializzaArmiNemiche = function ( ) {\\n  var ampiezzaAreaPertenza = 50;\\n  var ritardoMassimo = 1000;\\n  var xRand;\\n  var velRand;\\n  var ritardoRand;\\n  var bersagli = this.coreGame.bersagliAttaccabili();\\n  var numeroMissili = 100;\\n    \\n  for( var i = 0; i < numeroMissili \\/ 2 ; i++ ) {\\n    xRand = rand( 0, ampiezzaAreaPertenza );\\n    velRand = rand( 5, 5 );\\n    ritardoRand = rand( 0, ritardoMassimo );\\n    this.coreGame.missiliNemici.push( new MissileNemico( {\\n      coloreTestata: ''yellow'',\\n      coloreScia: ''red'',\\n      massimoRaggioEsplosione: 10\\n    }, bersagli, this.canvas.width, xRand, velRand,  ritardoRand, this.coreGame) );\\n  }\\n  \\n  for( var i = numeroMissili \\/ 2; i < numeroMissili; i++ ) {\\n    xRand = rand( this.canvas.width - ampiezzaAreaPertenza, this.canvas.width );\\n    velRand = rand( 5, 5 );\\n    ritardoRand = rand( 0, ritardoMassimo );\\n    this.coreGame.missiliNemici.push( new MissileNemico( {\\n      coloreTestata: ''yellow'',\\n      coloreScia: ''red'',\\n      massimoRaggioEsplosione: 10\\n    }, bersagli, this.canvas.width, xRand, velRand,  ritardoRand, this.coreGame ) );\\n  }\\n  \\n  var astronaveNemica = new AstronaveNemica( this.ctx, this.coreGame );\\n  this.coreGame.aggiungiMinaccia( astronaveNemica );\\n  \\n  var opzioniBatteria1 = {\\n    x: astronaveNemica.x + 40, \\n    y: astronaveNemica.y + 54, \\n    nMissili: 0, \\n    nSoldati: 10, \\n    colori: [], \\n    Tmin: 50, \\n    Tmax: 1000, \\n    deltaTempo: 70, \\n    deltaRaffreddamento: 3\\n  };\\n  \\n  var filtro = function ( missile ) {\\n    return ( missile.y < 500 && missile.y > astronaveNemica.y && missile instanceof MissileNucleare );\\n  };\\n  \\n  this.coreGame.aggiungiBatteriaAntimissile ( \\n    new _TorrettaAutomatica( 0, opzioniBatteria1, -10000 + (this.numeroOndata*100), false, filtro, false, 0.5, 10, ''#97F52D'', this.coreGame) );\\n  var opzioniBatteria2 = { \\n    x: astronaveNemica.x + 260, \\n    y: astronaveNemica.y + 54, \\n    nMissili: 0, \\n    nSoldati: 10, \\n    colori: [], \\n    Tmin: 50, \\n    Tmax: 1000, \\n    deltaTempo: 70, \\n    deltaRaffreddamento: 3\\n  };\\n  this.coreGame.aggiungiBatteriaAntimissile ( \\n    new _TorrettaAutomatica( 0, opzioniBatteria2, -10000 + (this.numeroOndata*100), false, filtro, false, 0.5, 10, ''#97F52F'', this.coreGame) );\\n}\\n\\nLivello10.prototype.calcolaCoefficienteOndata = function ( ) {\\n  return this.numeroOndata * 3.0;\\n}\\n\\nLivello10.prototype.setupListeners = function ( ) { \\n  var mySelf = this;\\n  $( ''.gameContainer'' ).off();\\n  $( ''.gameContainer'' ).focus();\\n  \\n  $( ''.gameContainer'' ).on( ''click'', function ( ) {\\n    mySelf.sparo( mySelf.coreGame.mirino.x, mySelf.coreGame.mirino.y, null );\\n  } );\\n  \\n  $( ''.gameContainer'' ).on( ''mouseover'', function( event ) {\\n    mySelf.coreGame.mirino.stato = Mirino.TRACCIAMENTO;\\n  });\\n  $( ''.gameContainer'' ).on( ''mouseout'', function( ) {\\n    mySelf.coreGame.mirino.stato = Mirino.SPENTO;\\n  });\\n  $( ''.gameContainer'' ).on( ''mousemove'', function( event ) {\\n    var offset = $(\\".gameContainer\\").offset();\\n    mySelf.coreGame.mirino.inseguiX = event.pageX - offset.left;\\n    mySelf.coreGame.mirino.inseguiY = event.pageY - offset.top;\\n    mySelf.coreGame.mirino.cambiaMira();\\n  });\\n}\\n\\nLivello10.prototype.scegliTorretta = function ( x, y, tasto ) {\\n  var nonFunzionante = function ( torretta ) {  \\n    if( torretta.stato === BatteriaAntimissile.ATTIVA &&\\n        torretta.numeroMissili > 0 &&\\n        torretta.blocco === false )\\n      return false;\\n    else\\n      return true;\\n  }\\n  \\n  var torrette = this.coreGame.batterieAntimissile;\\n  var torrettaSelezionata = 1;\\n  \\n  if( nonFunzionante(torrette[torrettaSelezionata]) === true )\\n    return -1;\\n    \\n  return torrettaSelezionata;\\n}\\n\\nLivello10.prototype.sparo = function ( x, y, tasto ) {\\n  var indiceTorretta = this.scegliTorretta( x, y, tasto );\\n  if( indiceTorretta === -1 )\\n    return;\\n  \\n  var torretta = this.coreGame.batterieAntimissile[indiceTorretta];\\n  \\n  this.coreGame.missiliTerrestri.push( new MissileTerrestre( {\\n    xDiPartenza: torretta.x,\\n    yDiPartenza: torretta.y,\\n    xDiArrivo: x,\\n    yDiArrivo: y,\\n    coloreTestata: ''yellow'',\\n    coloreScia: ''blue'',\\n    massimoRaggioEsplosione: 30,\\n    distanzaPerFrame: 7\\n  }, this.coreGame ) );\\n  \\n  this.coreGame.aggiornaPunteggioMissiliSparati();\\n  torretta.numeroMissili--;\\n  torretta.temperatura += 100;\\n  var temperaturaMinima = 500\\n  torretta.temperaturaSblocco = temperaturaMinima;\\n  if( torretta.temperatura >= 799 ) {\\n    torretta.blocco = true;\\n  };\\n}\\n\\nLivello10.prototype.verificaFineLivello = function ( ) {\\n  if( this.coreGame.minacce.length === 0 ) {\\n    return true;  \\n  }\\n  \\n  \\n  var indice = this.coreGame.missiliTerrestri.indexOf( this.missileNucleare );\\n  if( indice < 0 && this.missileNucleare.y > this.coreGame.minacce[0].y + 53 ) {\\n    return false;\\n  }\\n  \\n  if( this.coreGame.basi.filter( function ( base ) { return base.attiva === true } ).length === 0 )  {\\n    return false;\\n  }\\n  return undefined;\\n}\\n\\nLivello10.prototype.mostraSchermataIniziale = function ( punteggio ) {\\n  var mySelf = this;\\n  mySelf.coreGame.disegnaStatoGioco();\\n  mySelf.coreGame.disegnaBatterieAntimissile();\\n  var ctx = mySelf.ctx;\\n  \\n  this.intervalloSchermata = setInterval( function () {\\n    mySelf.coreGame.disegnaStatoGioco();\\n    mySelf.coreGame.disegnaBatterieAntimissile();\\n    if( mySelf.numeroSchermata === 0 ) {\\n      ctx.fillStyle = mySelf.coreGame.coloreTestoSecondario;\\n      ctx.textAlign = \\"center\\"; \\n      ctx.font = ''bold 20px arial'';\\n      ctx.fillText( \\"Punteggio: \\" + punteggio, \\n                   mySelf.canvas.width\\/2, mySelf.canvas.height\\/2 - 20 - 120 );\\n      ctx.textAlign = \\"start\\";\\n      \\n      ctx.fillStyle = mySelf.coreGame.coloreTestoPrimario;\\n      ctx.textAlign = \\"center\\"; \\n      ctx.font = ''bold 20px arial'';\\n      ctx.fillText( ''CLICK PER INIZIARE A GIOCARE'', \\n                   mySelf.canvas.width\\/2, mySelf.canvas.height\\/2 - 20 - 50 );\\n      ctx.textAlign = \\"start\\";\\n      \\n      \\/\\/ parte fissa\\n      ctx.textAlign = \\"center\\";\\n      ctx.font = ''bold 20px arial'';\\n      ctx.fillStyle = mySelf.coreGame.coloreTestoSecondario;\\n      ctx.fillText( ''Ondata '' + mySelf.numeroOndata, \\n                   mySelf.canvas.width\\/2, mySelf.canvas.height\\/2 + 20 - 50);\\n      ctx.textAlign = \\"start\\";\\n      var img = document.getElementById(\\"source-mouse-click\\");\\n      ctx.drawImage(img, \\n                    mySelf.canvas.width\\/2 - 100, mySelf.canvas.height\\/2 + 40, 30, 80);\\n      ctx.textAlign = \\"left\\";\\n      ctx.fillStyle = mySelf.coreGame.coloreTestoSecondario;\\n      ctx.fillText(\\"Fare click sinistro\\", \\n                   mySelf.canvas.width\\/2 - 40, mySelf.canvas.height\\/2 + 40 + 40);\\n      ctx.fillText(\\"per sparare\\", \\n                   mySelf.canvas.width\\/2 - 40, mySelf.canvas.height\\/2 + 40 + 40 + 20);\\n      ctx.textAlign = \\"start\\";\\n    } else {\\n      ctx.fillStyle = mySelf.coreGame.coloreTestoSecondario;\\n      ctx.textAlign = \\"center\\"; \\n      ctx.font = ''bold 20px arial'';\\n      ctx.fillText( \\"Punteggio: \\" + punteggio, \\n                   mySelf.canvas.width\\/2, mySelf.canvas.height\\/2 - 20 - 120 );\\n      ctx.textAlign = \\"start\\";\\n      \\n      ctx.textAlign = \\"center\\";\\n      ctx.font = ''bold 20px arial'';\\n      ctx.fillStyle = mySelf.coreGame.coloreTestoSecondario;\\n      ctx.fillText( ''Ondata '' + mySelf.numeroOndata, \\n                   mySelf.canvas.width\\/2, mySelf.canvas.height\\/2 + 20 - 50);\\n      ctx.textAlign = \\"start\\";\\n      var img = document.getElementById(\\"source-mouse-click\\");\\n      ctx.drawImage(img, \\n                    mySelf.canvas.width\\/2 - 100, mySelf.canvas.height\\/2 + 40, 30, 80);\\n      ctx.textAlign = \\"left\\";\\n      ctx.fillStyle = mySelf.coreGame.coloreTestoSecondario;\\n      ctx.fillText(\\"Fare click sinistro\\", \\n                   mySelf.canvas.width\\/2 - 40, mySelf.canvas.height\\/2 + 40 + 40);\\n      ctx.fillText(\\"per sparare\\", \\n                   mySelf.canvas.width\\/2 - 40, mySelf.canvas.height\\/2 + 40 + 40 + 20);\\n      ctx.textAlign = \\"start\\";    \\n    }\\n    mySelf.numeroSchermata = (mySelf.numeroSchermata + 1) % 2;\\n  }, 500 );\\n  \\n  $( ''.gameContainer'' ).off();\\n  $( ''.gameContainer'' ).one( ''click'', function() {\\n    clearInterval( mySelf.intervalloSchermata );\\n    mySelf.preparazioneAvvio();\\n  } );                     \\n}\\n\\nfunction _MissileTorretta ( parametri, torretta, coreGame ) {\\n  this.torretta = torretta;\\n  this.coreGame = coreGame;\\n  MissileTerrestre.call( this, parametri, coreGame );\\n}\\n\\n_MissileTorretta.prototype = Object.create( MissileTerrestre.prototype );\\n_MissileTorretta.prototype.constructor = _MissileTorretta;\\n\\n_MissileTorretta.prototype.update = function () {\\n  if(this.yDiPartenza <= this.yDiArrivo) {\\n    if( this.stato === Missile.ATTIVO && this.y >= this.yDiArrivo  ) {\\n      this.x = this.xDiArrivo;\\n      this.y = this.yDiArrivo;\\n      this.stato = Missile.ESPLOSIONE;\\n    }\\n  }\\n  else {\\n    if( this.stato === Missile.ATTIVO && this.y <= this.yDiArrivo ) {\\n      this.x = this.xDiArrivo;\\n      this.y = this.yDiArrivo;\\n      this.stato = Missile.ESPLOSIONE;\\n    } \\n  }\\n  \\n  if( this.stato === Missile.ATTIVO ) {\\n    this.x += this.dx;\\n    this.y += this.dy;\\n  } else {\\n    this.esplodi();\\n  }\\n}\\n\\n_MissileTorretta.prototype.disegna = function ( ctx, coreGame ) {\\n  Missile.prototype.disegna.call( this, ctx, coreGame );\\n}\\n\\nfunction MissileNucleare ( xDiPartenza, yDiPartenza, xDiArrivo, yDiArrivo, coreGame ) {\\n  MissileTerrestre.call( this, {\\n    xDiPartenza: xDiPartenza,\\n    yDiPartenza: yDiPartenza,\\n    xDiArrivo: xDiArrivo,\\n    yDiArrivo: yDiArrivo,\\n    coloreTestata: ''white'',\\n    coloreScia: ''white'',\\/\\/''yellow'',\\n    massimoRaggioEsplosione: 50,\\n    distanzaPerFrame: 0.4\\n  }, coreGame );\\n  this.coloreCorpo = ''white'' \\/\\/#FF00FF'';\\n}\\n\\nMissileNucleare.prototype = Object.create( MissileTerrestre.prototype );\\nMissileNucleare.prototype.constructor = MissileNucleare;\\n\\nMissileNucleare.prototype.disegna = function ( ctx, coreGame ) {\\n  this.animazioneColore = (this.animazioneColore + 1) % Missile.COLORI.length;\\n  if( this.stato === Missile.ATTIVO ) {\\n    var n = 20;\\n    \\n    ctx.strokeStyle = this.coloreScia;\\n    \\/\\/ctx.fillStyle = this.coloreScia;\\n    ctx.lineWidth = 2;\\n    ctx.beginPath();\\n    ctx.moveTo( this.xDiPartenza, this.yDiPartenza );\\n    ctx.lineTo( this.x, this.y );\\n    ctx.closePath();\\n    ctx.stroke();\\n    \\n    \\/\\/ctx.strokeStyle = this.animazioneColore;\\n    ctx.fillStyle = ''white'';\\n    ctx.beginPath();\\n    ctx.arc( this.x + this.dx*n, this.y + this.dy*2.2*n, 2, 0, 2 * Math.PI );\\n    ctx.closePath();\\n    ctx.fill();\\n    \\n    ctx.strokeStyle = this.coloreCorpo;\\n    ctx.fillStyle = this.coloreCorpo;\\n    ctx.lineWidth = 4;\\n    ctx.beginPath();\\n    ctx.moveTo( this.x + this.dx*n, this.y + this.dy*2*n );\\n    ctx.lineTo( this.x - this.dx*n, this.y \\/*+ this.dy*n*\\/ );\\n    ctx.closePath();\\n    ctx.stroke(); \\n  }\\n  else if ( this.stato === Missile.ESPLOSIONE || \\n            this.stato === Missile.IMPLOSIONE ) {\\n    \\n    ctx.fillStyle = ''red'';\\/\\/Missile.COLORI[this.animazioneColore];\\n    ctx.beginPath();\\n    ctx.arc( this.x, this.y, this.raggioDiEsplosione, 0, 2 * Math.PI );\\n    ctx.closePath();\\n    \\/\\/ this.esplosioneAltriMissili( ctx, coreGame );\\n    if ( coreGame.minacce[ 0 ].stato === AstronaveNemica.ATTIVO && this.y <= coreGame.minacce[ 0 ].y + 53 ) {\\n      coreGame.minacce[ 0 ].distruggiti();\\n    }\\n    ctx.fill();\\n  }\\n}\\n\\nMissileNucleare.prototype.update = function () {\\n  if( this.stato === Missile.ATTIVO && this.y <= this.yDiArrivo ) {\\n    this.x = this.xDiArrivo;\\n    this.y = this.yDiArrivo;\\n    this.stato = Missile.ESPLOSIONE;\\n  }\\n  if( this.stato === Missile.ATTIVO ) {\\n    this.x += this.dx;\\n    this.y += this.dy;\\n  } else {\\n    this.esplodi();\\n  }\\n}\\n\\nMissileNucleare.prototype.esplodi = function () {  \\n  if( this.stato === Missile.ESPLOSIONE ) {\\n    this.raggioDiEsplosione += 2;\\n  }\\n  if( this.raggioDiEsplosione > this.massimoRaggioEsplosione ) {\\n    this.stato = Missile.IMPLOSIONE;\\n  }  \\n  if( this.stato === Missile.IMPLOSIONE ) {\\n    this.raggioDiEsplosione -= 1;\\n  }\\n  if( this.raggioDiEsplosione < 0 ) {\\n    this.stato = Missile.ESPLOSO;\\n  }\\n}\\n\\nfunction _TorrettaAutomatica ( indice, opzioniBatteria, tempoRicarica, disegnaScritte, funzioneDiFiltroMissili, aggancio, velMissili, raggioEsplosione, coloreScia, coreGame ) {\\n  this.indice = indice;\\n  \\n  \\/\\/ Chiamata al costruttore della classe base\\n  BatteriaAntimissile.call(\\n    this, \\n    opzioniBatteria.x, \\n    opzioniBatteria.y, \\n    opzioniBatteria.nMissili, \\n    opzioniBatteria.nSoldati, \\n    opzioniBatteria.colori, \\n    opzioniBatteria.Tmin, \\n    opzioniBatteria.Tmax, \\n    opzioniBatteria.deltaTempo, \\n    opzioniBatteria.deltaRaffreddamento,\\n    coreGame\\n  );\\n  \\n  \\/\\/ Impostazioni torretta\\n  this.tempoRicarica = tempoRicarica;\\n  this.disegnaScritte = disegnaScritte;\\n  this.coreGame = coreGame;\\n  this.funzioneDiFiltroMissili = funzioneDiFiltroMissili;\\n  this.aggancio = aggancio;\\n  \\n  \\/\\/ Impostazione missili sparati\\n  this.velMissili = velMissili;\\n  this.raggioDiEsplosione = raggioEsplosione;\\n  this.coloreScia = coloreScia;\\n  \\n  \\/\\/ Stato interno\\n  this.bersagliAgganciati = [];\\n  this.missilePronto = true;\\n  \\n  if( this.tempoRicarica < 0 )\\n    this.timerRicarica = setTimeout( \\n      this.ricarica.bind( this, this ), rand(0, Math.abs( this.tempoRicarica )) );\\n  else\\n     this.timerRicarica = setTimeout( \\n      this.ricarica.bind( this, this ), this.tempoRicarica );\\n  };\\n\\n\\/\\/ Ereditariet\\u00e0 da BatteriaAntimissile\\n_TorrettaAutomatica.prototype = Object.create( BatteriaAntimissile.prototype );\\n_TorrettaAutomatica.prototype.constructor = _TorrettaAutomatica;\\n\\n_TorrettaAutomatica.prototype.avvia = function ( ) {\\n  if( this.tempoRicarica < 0 )\\n    this.timerRicarica = setTimeout( \\n      this.ricarica.bind( this, this ), rand(0, Math.abs( this.tempoRicarica )) );\\n  else\\n     this.timerRicarica = setTimeout( \\n      this.ricarica.bind( this, this ), this.tempoRicarica );\\n  }\\n\\n_TorrettaAutomatica.prototype.stop = function ( ) {\\n  clearTimeout(this.timerRicarica);\\n}\\n\\n_TorrettaAutomatica.prototype.ricarica = function ( mySelf ) {\\n  mySelf.missilePronto = true;\\n}\\n\\n_TorrettaAutomatica.prototype.update = function ( ) {\\n  \\/\\/ Chiamo update classe base\\n  BatteriaAntimissile.prototype.update.call( this );\\n  \\n  if( this.stato !== BatteriaAntimissile.ATTIVA )\\n    return;\\n  if( this.missilePronto !== true )\\n    return;    \\n    \\n  var bersaglio = this.identificaBersaglio();\\n  if( bersaglio !== undefined ) {\\n    var coordinate = this.mira( bersaglio );\\n    if( coordinate.status === true ) {\\n      var missileSparato = this.spara( coordinate );\\n      this.bersagliAgganciati.push( bersaglio );\\n    }\\n  }\\n}\\n\\n_TorrettaAutomatica.prototype.identificaBersaglio = function ( ) {\\n  var mySelf = this;\\n  var missiliInGioco = this.coreGame.missiliNemici.concat(\\n    this.coreGame.missiliTerrestri );\\n  \\n  missiliInGioco = missiliInGioco.filter( function ( m ) { \\n    return m.stato === Missile.ATTIVO;\\n  } );\\n  \\n  \\/\\/ Escludo i missili lanciati da me\\n  missiliInGioco = missiliInGioco.filter( function ( m ) { \\n    if( m instanceof _MissileTorretta )\\n      if ( m.torretta === mySelf )\\n        return false;\\n    return true;\\n  } );\\n  \\n  if( this.aggancio === true ) {\\n    \\/\\/ Esludo i missili gi\\u00e0 agganciati\\n    missiliInGioco = diff(missiliInGioco, this.bersagliAgganciati); \\n  }\\n    \\n  \\/\\/ Applico un filtro proprio della torretta\\n  missiliInGioco = missiliInGioco.filter( this.funzioneDiFiltroMissili );\\n  \\/\\/ Ordino per altezza\\n  missiliInGioco.sort( function ( a, b ) {\\n    var distanzaA = Math.sqrt(Math.pow(a.x - mySelf.x, 2) + Math.pow(a.y - mySelf.y, 2));\\n    var distanzaB = Math.sqrt(Math.pow(b.x - mySelf.x, 2) + Math.pow(b.y - mySelf.y, 2));\\n    return distanzaA <= distanzaB;    \\n  } );    \\n  \\/\\/ Prelevo il primo\\n  return missiliInGioco.pop();\\n}\\n\\n_TorrettaAutomatica.prototype.mira = function ( bersaglio ) {\\n  var xi1 = bersaglio.x, \\n      yi1 = bersaglio.y, \\n      xf1 = bersaglio.xDiArrivo, \\n      yf1 = bersaglio.yDiArrivo, \\n      speed1 = bersaglio.velCaduta, \\n      dx1 = bersaglio.dx, \\n      dy1 = bersaglio.dy, \\n      xi2 = this.x, \\n      yi2 = this.y,\\n      speed2 = this.velMissili;\\n  \\n  var distance1 = Math.sqrt(Math.pow(xf1 - xi1, 2) + \\n\\t\\t\\tMath.pow(yf1 - yi1, 2));\\n  var distanceX1 = xf1 - xi1;\\n  var distanceY1 = yf1 - yi1;\\n  var time1 = distance1 \\/ speed1;\\n  \\/*\\n  console.log(\\"originale:\\")\\n  console.log(\\n    xi1,\\n    yi1,\\n    xf1,\\n    yf1,\\n    speed1,\\n    dx1,\\n    dy1,\\n    xi2,\\n    yi2  \\n  );\\n  console.log(\\"----------------\\")*\\/\\n    \\n  for(var t1 = 0.0; t1 < time1; t1 += 1) {\\n    var x1 = xi1 + dx1 * t1;\\n    var y1 = yi1 + dy1 * t1;\\n\\n    var distanceX2 = x1 - xi2;\\n    var distanceY2 = y1 - yi2;\\n    var distance2 = Math.sqrt(Math.pow(distanceX2, 2) \\n      + Math.pow(distanceY2, 2));\\n    var t2 = distance2 \\/ speed2;\\n    var time2 = Math.ceil(distance2 \\/ speed2);\\n        \\n    if( t1 - time2 === 0 ) { \\n      var anticipoX = 2;\\n      var anticipoY = 2;\\n      return { status: true, x: x1 + anticipoX*dx1, y: y1 + anticipoY*dy1 };\\n    }\\n  }\\n  return {status: false, x: 0, y: 0};\\n}\\n\\n_TorrettaAutomatica.prototype.spara = function ( coordinate ) {\\n  --this.nMissili;\\n  this.temperatura += 5; \\/\\/this.aumentoTemperatura;\\n  \\n  var missile = new _MissileTorretta( {\\n    xDiPartenza: this.x,\\n    yDiPartenza: this.y,\\n    xDiArrivo: coordinate.x,\\n    yDiArrivo: coordinate.y,\\n    coloreTestata: ''yellow'',\\n    coloreScia: this.coloreScia,\\n    massimoRaggioEsplosione: this.raggioDiEsplosione,\\n    distanzaPerFrame: this.velMissili }, this, this.coreGame );\\n  this.coreGame.missiliTerrestri.push(missile);\\n  \\n  clearTimeout(this.timerRicarica);\\n  if( this.tempoRicarica < 0 )\\n    this.timerRicarica = setTimeout( \\n      this.ricarica.bind( this, this ), rand(0, Math.abs( this.tempoRicarica )) );\\n  else\\n     this.timerRicarica = setTimeout( \\n      this.ricarica.bind( this, this ), this.tempoRicarica );\\n  this.missilePronto = false;\\n  \\n  return missile;\\n}\\n\\n_TorrettaAutomatica.prototype.disegna = function ( ctx ) {\\nthis.animazioneColore = (this.animazioneColore + 1) % Missile.COLORI.length;\\n  if( this.stato === BatteriaAntimissile.ATTIVA && this.disegnaScritte === true ) {\\n    var txt = \\"[AUTO]\\";\\n    \\/\\/ Scrivi temperatura\\n    var coloreTesto = ''black'';    \\n    ctx.fillStyle = coloreTesto;\\n    ctx.font = ''bold 12px arial'';\\n    var dx = ctx.measureText(txt).width;\\n    var dy = ctx.measureText(txt).height;\\n    ctx.fillText( txt, this.x - dx\\/2, this.y + 45 );\\n  }\\n    \\n  \\/\\/ Anima esplosione\\n  if( this.stato === BatteriaAntimissile.ESPLOSIONE || \\n      this.stato === BatteriaAntimissile.IMPLOSIONE ) {\\n    ctx.fillStyle = BatteriaAntimissile.COLORI[this.animazioneColore];\\n    ctx.beginPath();\\n    ctx.arc( this.x, this.y, this.raggioDiEsplosione, 0, 2 * Math.PI );\\n    ctx.closePath();\\n    ctx.fill();\\n  }\\n}\\n\\n_TorrettaAutomatica.prototype.distruggiti = function ( ) {\\n  \\/\\/ Chiamo distruggiti classe base\\n  this.stop();\\n  BatteriaAntimissile.prototype.distruggiti.call( this );\\n}\\n\\nfunction _TorrettaAutomaticaInterfaccia ( indice, opzioniBatteria, tempoRicarica, disegnaScritte, funzioneDiFiltroMissili, aggancio, velMissili, raggioEsplosione, coloreScia, coreGame ) {\\n   _TorrettaAutomatica.call( this, indice, opzioniBatteria, tempoRicarica, disegnaScritte,\\n    funzioneDiFiltroMissili, aggancio, velMissili, raggioEsplosione, coloreScia, coreGame );\\n};\\n\\n_TorrettaAutomaticaInterfaccia.prototype = Object.create( _TorrettaAutomatica.prototype );\\n_TorrettaAutomaticaInterfaccia.prototype.constructor = _TorrettaAutomaticaInterfaccia;\\n\\n_TorrettaAutomaticaInterfaccia.prototype.update = function ( ) {\\n  \\/\\/ Chiamo update classe base\\n  BatteriaAntimissile.prototype.update.call( this );\\n\\n  if( this.stato !== BatteriaAntimissile.ATTIVA )\\n    return;\\n  if( this.missilePronto !== true )\\n    return; \\n  \\n  if( this.indice === 0 ) {\\n    var xMin = 0;\\n    var xMax = Math.floor(510\\/2);\\n  }\\n  if( this.indice === 2 ) {  \\n    var xMin = Math.ceil(510\\/2);\\n    var xMax = 510;\\n  }\\n    \\n  var torrettaFittizia = new TorrettaAutomatica( \\n    { x: this.x, y: this.y }, this.velMissili, xMin, xMax );\\n  \\n  var mySelf = this;\\n  var missiliInGioco = this.coreGame.missiliNemici.concat(\\n    this.coreGame.missiliTerrestri );\\n \\n  \\n  missiliInGioco = missiliInGioco.filter( function ( m ) { \\n    return m.stato === Missile.ATTIVO;\\n  } );\\n  \\n  \\/\\/ Escludo i missili lanciati da me\\n  missiliInGioco = missiliInGioco.filter( function ( m ) { \\n    if( m instanceof _MissileTorretta )\\n      if ( m.torretta === mySelf )\\n        return false;\\n    return true;\\n  } );\\n    \\n  if( this.aggancio === true ) {\\n    \\/\\/ Esludo i missili gi\\u00e0 agganciati\\n    missiliInGioco = diff(missiliInGioco, this.bersagliAgganciati); \\n  }\\n    \\n  \\/\\/ Applico un filtro proprio della torretta\\n  missiliInGioco = missiliInGioco.filter( this.funzioneDiFiltroMissili );\\n  \\n  var bersagli = [];\\n  $.each( missiliInGioco, function ( i, m ) {\\n    var ogg = { \\n      x: m.x, \\n      y: m.y, \\n      xArrivo: m.xDiArrivo, \\n      yArrivo: m.yDiArrivo, \\n      velocita: m.velCaduta, \\n      tipo: m }\\n    bersagli.push( ogg );\\n  } );\\n  \\n  var bersaglio = torrettaFittizia.identificaBersaglio( bersagli );\\n  \\n  if( bersaglio !== undefined ) {\\n    \\n    var coordinate = torrettaFittizia.mira( bersaglio );\\n    \\n    if( coordinate.status === true ) {\\n      _missiliSparati = [];\\n      torrettaFittizia.sparo( coordinate.x, coordinate.y );\\n      \\n      if( _missiliSparati.length !== 1 )\\n        return;\\n      \\n      var missileSparato = this.spara( { status: null, x: _missiliSparati[0].x, y: _missiliSparati[0].y } );\\n      this.bersagliAgganciati.push( bersaglio.tipo );\\n    }\\n  }\\n}\\n\\nfunction MissileTorrettaAutomatica ( x, y ) {\\n  this.x = x;\\n  this.y = y;\\n  \\n  this.velocita = 10;\\n  this.raggioEsplosione = 10;\\n} \\n\\nMissileTorrettaAutomatica.prototype.lancia = function ( ) {\\n  _missiliSparati.push( this );\\n}\\n\\nvar coordinateIntercettaBersaglio = function ( \\n    xBersaglio, yBersaglio, \\n    xArrivo, yArrivo,\\n    velocitaMissili, velocitaBersaglio, \\n    posizioneTorretta ) {\\n      \\n  var distanzaX = xArrivo - xBersaglio;\\n  var distanzaY = yArrivo - yBersaglio;\\n  var scala = ( function ( d ) {\\n    var distanza = Math.sqrt( Math.pow( distanzaX, 2 ) + Math.pow( distanzaY, 2 ) );\\n    return distanza \\/ d;\\n  })( velocitaBersaglio );\\n  \\n      \\n  var xi1 = xBersaglio; \\n  var yi1 = yBersaglio;\\n  var xf1 = xArrivo;\\n  var yf1 = yArrivo; \\n  var speed1 = velocitaBersaglio;\\n  var dx1 = distanzaX \\/ scala;\\n  var dy1 = distanzaY \\/ scala;\\n  var xi2 = posizioneTorretta.x;\\n  var yi2 = posizioneTorretta.y;\\n  var speed2 = velocitaMissili;\\n      \\n  \\/*\\n  console.log(\\"nuovo:\\")\\n  console.log(\\n    xi1,\\n    yi1,\\n    xf1,\\n    yf1,\\n    speed1,\\n    dx1,\\n    dy1,\\n    xi2,\\n    yi2  \\n  );\\n  console.log(\\"----------------\\")*\\/\\n      \\n  var distance1 = Math.sqrt(Math.pow(xf1 - xi1, 2) + \\n\\t\\t\\tMath.pow(yf1 - yi1, 2));\\n  var distanceX1 = xf1 - xi1;\\n  var distanceY1 = yf1 - yi1;\\n  var time1 = distance1 \\/ speed1;\\n    \\n  for(var t1 = 0.0; t1 < time1; t1 += 1) {\\n    var x1 = xi1 + dx1 * t1;\\n    var y1 = yi1 + dy1 * t1;\\n\\n    var distanceX2 = x1 - xi2;\\n    var distanceY2 = y1 - yi2;\\n    var distance2 = Math.sqrt(Math.pow(distanceX2, 2) \\n      + Math.pow(distanceY2, 2));\\n    var t2 = distance2 \\/ speed2;\\n    var time2 = Math.ceil(distance2 \\/ speed2);\\n    \\n    if( t1 - time2 === 0 ) { \\n      var anticipoX = 2;\\n      var anticipoY = 2;\\n      return { status: true, x: x1 + anticipoX*dx1, y: y1 + anticipoY*dy1 };\\n    }\\n  }\\n  return {status: false, x: 0, y: 0};  \\n} ",\r\n  \r\n  "fileVirtuali":\r\n  [\r\n    {"nomeFile": "TorrettaAutomatica.js",\r\n    "consultazione": false,\r\n    "codice": "\\/**********\\nClasse che implementa le torrette automatiche in grado di intercettare con un missile le minacce individuate.\\nLa torretta automatica viene costruita con:\\n  - posizione: struttura del tipo { x: 50, y: 430 } che identifica la posizione della torretta;\\n  - velocitaMissili: intero che descrive la velocita dei missili sparati.\\n  - xMinAreaSparo e xMaxAreaSparo: coordinate che indentificano quale area deve essere coperta dalla torretta antimissile (area compresa tra xMinAreaSparo e xMaxAreaSparo).\\n**********\\/\\nfunction TorrettaAutomatica ( posizione, velocitaMissili, xMinAreaSparo, xMaxAreaSparo ) {\\n  this.posizioneTorretta = posizione;\\n  this.velocitaMissili = velocitaMissili;\\n  this.xMinAreaSparo = xMinAreaSparo;\\n  this.xMaxAreaSparo = xMaxAreaSparo;\\n}\\n\\n\\/**********\\nFunzione che identifica il missile che sara'' intercettato. Deve essere ritornato un missile di classe MissileNemico e le cui coordinate sono comprese nell''area this.xMinAreaSparo e this.xMaxAreaSparo.\\n\\nPrende come parametro:\\n  - bersagli: array di oggetti con struttura { x: 157, y: 597, tipo: tipologia }; tipo e'' a sua volta un oggetto di classe MissileNemico o MissileTerreste. N.B.: ricordarsi di instanceof per determinare se un oggetto appartiene ad una certa classe.\\n  \\nRestituisce come valore:\\n  - un oggetto di con struttura bersaglio { x: 157, y: 597, tipo: tipologia } \\n**********\\/\\nTorrettaAutomatica.prototype.identificaBersaglio = function ( bersagli ) {\\n  var candidato;\\n\\/\\/###START_MODIFICABILE###\\n  \\/\\/ Implementare individuazione bersaglio tra i bersagli\\n\\/\\/###END_MODIFICABILE###\\n  return candidato;\\n}\\n\\n\\/**********\\nFunzione che dato un bersaglio ricava le coordinate dove sparare il missile in grado di intercettarlo.\\n\\nPrende come parametro:\\n  - bersaglio: oggetto con struttura { x: 157, y: 597, tipo: tipologia }\\nRestituisce come valore:\\n  - un oggetto coordinata di struttura { x: 130, y: 657 }\\n**********\\/\\nTorrettaAutomatica.prototype.mira = function ( bersaglio ) {\\n  this.bersaglio = bersaglio;\\n  var xBersaglio = bersaglio.x;\\n  var yBersaglio = bersaglio.y;\\n  var xImpattoBersaglio = bersaglio.xArrivo;\\n  var yImpattoBersaglio = bersaglio.yArrivo;\\n  var velocitaBersaglio = bersaglio.velocita;\\n  var coordinate = coordinateIntercettaBersaglio( \\n    xBersaglio, yBersaglio, \\n    xImpattoBersaglio, yImpattoBersaglio,\\n    this.velocitaMissili, velocitaBersaglio, \\n    this.posizioneTorretta ); \\n  return coordinate;\\n}\\n\\n\\/**********\\nFunzione che effettua il lancio di un missile verso le coordinate, passate come parametro.\\n**********\\/\\nTorrettaAutomatica.prototype.sparo = function ( x, y ) {\\n  var missile = new MissileTorrettaAutomatica( x, y );\\n  missile.lancia();\\n}\\n\\n\\/**********\\nFunzione che descrive il processo di identificazione, mira e sparo necessari ad ogni missile per intercettare una minaccia.\\nQuesta funzione prende come parametro:\\n  - bersagliPossibili: un array di oggetti con \\n    struttura { x: 157, y: 597, tipo: tipologia } che rappresentano\\n    tutti i missili (amici e non) in volo in quel momento.    \\nObiettivo di questa funzione \\u00e8 permettere l''indentificazione di un bersaglio tra quelli possibili, ricavare le coordinate per intercettarlo ed infine sparare un missile.\\n**********\\/\\nTorrettaAutomatica.prototype.cicloSparoAutomatico = function ( bersagliPossibili ) {\\n\\/\\/###START_MODIFICABILE###\\n  \\/\\/ Implementare il ciclo di sparo utilizzando le funzionalit\\u00e0\\n  \\/\\/ gi\\u00e0 implementate nella TorrettaAutomatica.\\n  \\/\\/ Ciclo sparo: \\n  \\/\\/  1) identificare bersaglio;\\n  \\/\\/  2) mirare;\\n  \\/\\/  3) fare fuoco.\\n  \\/\\/ N.B.: ricordardi il this quando si richiama una funzione della classe. \\n\\/\\/###END_MODIFICABILE###  \\n}",\r\n    "test": "(\\nfunction ( ) {\\n  var esito = true;\\n\\n  var indiciT = [0, 2]\\n  var numeroTorretta = indiciT[rand(0, 1)];\\n  var x = rand( 0, 100 );\\n  var y = 430\\n  \\n  if( numeroTorretta === 0 ) {\\n    var xMin = 0;\\n    var xMax = Math.floor(510\\/2);\\n  }\\n  \\n  if( numeroTorretta === 2 ) {  \\n    var xMin = Math.ceil(510\\/2);\\n    var xMax = 510;\\n  }\\n  \\n  var torretta = new TorrettaAutomatica( {x: x, y: y}, 2, xMin, xMax );\\n  var bersagli = [];\\n  var tipiBersagli = [ new MissileTerrestre( { xDiPartenza: 0,\\n                        yDiPartenza: 0,\\n                        xDiArrivo: 100,\\n                        yDiArrivo: 100,\\n                        coloreTestata: ''yellow'',\\n                        coloreScia: ''blue'',\\n                        massimoRaggioEsplosione: 30,\\n                        distanzaPerFrame: 7\\n                       }, null ),\\n                       new MissileNemico( {\\n                        coloreTestata: ''yellow'',\\n                        coloreScia: ''red'',\\n                        massimoRaggioEsplosione: 10\\n                       }, [ {x: 200, y: 200} ], 0, 0, 1,  1, null ) ];\\n  \\n  for( var i = 0; i < rand(20, 20); ++i ) {\\n    bersagli.push ( { x: rand(0, 510), y: rand(150, 250), \\n      xArrivo: rand(0, 510), yArrivo: 430, \\n      velocita: rand(1.0, 1.0), tipo: tipiBersagli[rand(0, 1)] } );\\n  }\\n  \\n  _missiliSparati = []; \\n  var candidati = bersagli.filter( function ( b ) {\\n    return (b.tipo instanceof MissileNemico);\\n  } );\\n     \\n  var bersaglioUtente = torretta.identificaBersaglio( bersagli );\\n    \\n  if( bersaglioUtente === undefined ) {\\n    \\/\\/console.log( \\"bersaglio undef\\" );\\n    return false;\\n  }\\n  \\n  var trovato = false;\\n  $.each( candidati, function ( i, c ) {\\n    if( bersaglioUtente.x === c.x \\n       && bersaglioUtente.y === c.y ) \\n    trovato = true;\\n  } );\\n  \\n  if( trovato === false ) {\\n    \\/\\/console.log( \\"individua bersaglio errore\\" );\\n    return false;\\n  }\\n  \\n  var coordinate = coordinateIntercettaBersaglio( bersaglioUtente.x, bersaglioUtente.y, \\n    bersaglioUtente.xArrivo, bersaglioUtente.yArrivo,\\n    2, bersaglioUtente.velocita, torretta.posizioneTorretta );  \\n  \\n  var coordinateUtente = torretta.mira( bersaglioUtente );\\n  \\n  if( coordinateUtente.x !== coordinate.x\\n    || coordinateUtente.y !== coordinate.y ) {\\n    \\/\\/console.log( \\"mira sbagliata\\" );\\n    return false\\n  }\\n    \\n  torretta.sparo( coordinateUtente.x, coordinateUtente.y );\\n  \\n  if( _missiliSparati.length !== 1 ) {\\n    \\/\\/console.log(\\"missile non sparato\\")\\n    return false;\\n  }\\n    \\n  _missiliSparati = [];\\n  torretta.cicloSparoAutomatico( bersagli );\\n  var missile = _missiliSparati[0];\\n  \\n  if( ! (xMin <= torretta.bersaglio.x && torretta.bersaglio.x <= xMax) )\\n    return false;\\n    \\n  if( missile.x !== coordinate.x || missile.y !== coordinate.y ) {\\n    \\/\\/console.log( \\" ciclosparo non va \\" );\\n    return false;\\n  }\\n  \\n  return esito;\\n} \\n) ();",\r\n    "descrizione": "L''obiettivo \\u00e8 rendere le due torrette laterali automatiche. Per fare ci\\u00f2 \\u00e8 necessario scrivere la funzione che consente di identificare i bersagli corretti.<br>\\nL''area di sparo \\u00e8 larga <tt>this.xMinAreaSparo</tt> fino a <tt>this.xMaxAreaSparo</tt>unit\\u00e0 sull''asse <i>x<\\/i>. Bisogna prestare attenzione affinch\\u00e9 tali torrette identifichino i nostri missili come non ostili e dunque non li abbattano.<br>\\nRicapitolando, dato un array chiamato <tt>bersagli<\\/tt> contenente tutti i missili in volo (amici e nemici), si dovr\\u00e0:\\n<li> escludere i missili amici (appartenenti alla classe <tt>MissileTerrestre<\\/tt>); <\\/li>\\n<li> includere i missili nemici (appartenenti alla classe <tt>MissileNemico<\\/tt>); <\\/li>\\n<li> includere solo i missili nell'' area di sparo della torretta;<br> Una volta individuato il bersaglio di dovr\\u00e0 implementare la funzione <tt>cicloSparoAutomatico</tt> (presente in fondo al file) utilizzando appropriatamente le funzioni gi\\u00e0 implementate nella classe (individua bersaglio, mira e spara).",\r\n    "aiuto": "Un esempio di implementazione della funzione <tt>identificaBersaglio()<\\/tt> pu\\u00f2 essere la seguente:<pre><code>for( var i = 0; i < bersagli.length; ++i ) {\\n    var b = bersagli[i];\\n    if( b.tipo instanceof MissileNemico\\n      && this.xMinAreaSparo <= b.x \\n      && b.x <= this.xMaxAreaSparo ) {\\n      candidato = b;\\n      break;\\n    }\\n}</code></pre>",\r\n    "messaggioFallimento": "Torretta automatica non implementata a dovere."}\r\n  ]\r\n}');

-- --------------------------------------------------------

--
-- Table structure for table `livello_eseguito`
--

CREATE TABLE IF NOT EXISTS `livello_eseguito` (
  `email` varchar(250) NOT NULL,
  `idlivello` int(11) NOT NULL,
  `file_virtuali_aggiornati` text NOT NULL,
  `ondate` int(11) NOT NULL DEFAULT '0',
  `punteggio` int(11) NOT NULL DEFAULT '0',
  `missili_abbattuti` int(11) NOT NULL DEFAULT '0',
  `minacce_abbattute` int(11) NOT NULL DEFAULT '0',
  `missili_lanciati` int(11) NOT NULL DEFAULT '0',
  `missili_rimasti` int(11) NOT NULL DEFAULT '0',
  `torrette_salvate` int(11) NOT NULL DEFAULT '0',
  `morti` int(11) NOT NULL DEFAULT '0'
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

--
-- Dumping data for table `livello_eseguito`
--

INSERT INTO `livello_eseguito` (`email`, `idlivello`, `file_virtuali_aggiornati`, `ondate`, `punteggio`, `missili_abbattuti`, `minacce_abbattute`, `missili_lanciati`, `missili_rimasti`, `torrette_salvate`, `morti`) VALUES
('a.b@gmail.it', 1, '{"fileVirtuali":[{"nomeFile":"Benvenuto.hob","codice":"/*\\n __   __  _______  _______         _______  _______  _______  _______ \\n|  | |  ||       ||  _    |       |       ||  _    ||  _    ||  _    |\\n|  |_|  ||   _   || |_|   | ____  |____   || | |   || | |   || | |   |\\n|       ||  | |  ||       ||____|  ____|  || | |   || | |   || | |   |\\n|       ||  |_|  ||  _   |        | ______|| |_|   || |_|   || |_|   |\\n|   _   ||       || |_|   |       | |_____ |       ||       ||       |\\n|__| |__||_______||_______|       |_______||_______||_______||_______|\\nQuesto file Ã¨ stato generato automaticamente dal sistema antimissilistico\\nHOB-2000.\\n\\n\\nBuongiorno, sono il sistema antimissilistico HOB-2000, per comunicarvi che\\nl''autenticazione automatica Ã¨ fallita. Se proprio desiderate procedere, avete la possibilitÃ  di utilizzare l''autenticazione manuale.\\n\\nGrazie per aver scelto HOB-2000.\\nCopyright (C) 4096 Orsa Minore Software Inc. - Tutti i diritti riservati\\nÃˆ possibile utilizzare, distribuire o modificare questo file secondo i termini della licenza galattica GGPA-DA1979, che sfortunatamente non verrÃ  scritta se non nel prossimo secolo.\\n*/","aiutoUtilizzato":"false"},{"nomeFile":"AutenticazioneManuale.js","codice":"/**********\\nIl codice seguente permette l''autenticazione manuale di un operatore, tramite la creazione di una parola di accesso ottenuta dalla concatenazione di piÃ¹ stringhe.\\nATTENZIONE! Utilizzare solo in caso di fallimento dell''autenticazione automatica.\\n\\nInserire il proprio nome utente nella variabile \\"nome\\", la propria matricola nella variabile \\"matricola\\" e la propria password nella variabile \\"password\\".\\n**********/\\nvar autenticazioneManuale = function () {\\n//###START_MODIFICABILE###\\n  // Ricorda: il simbolo = permette di assegnare il valore alla variabile.\\n  var nome = \\"Cpt Simeoni\\";\\n  var matricola = 150716;\\n  var password = \\"utf-8_tuono\\";\\n  \\n  // Ricorda: il simbolo + tra due stringhe indica la loro concatenazione.\\n  var stringaAccesso = nome + \\"%\\"+ matricola + \\"<\\" + password + \\">\\";\\n//###END_MODIFICABILE###\\n  \\n  return [nome, matricola, password, stringaAccesso];\\n}","aiutoUtilizzato":"true"},{"nomeFile":"VerificaCervello.js","codice":"/**********\\nIl codice che segue Ã¨ necessario per verificare la presenza di un operatore umano.\\nIl quesito posto Ã¨ semplice: la variabile \\"areaRettangolo\\" deve contenere la corretta formula per il calcolo dell''area di un rettangolo.\\n**********/\\nvar verificaPresenzaCervelloOperatore = function ( base, altezza ) {\\n//###START_MODIFICABILE###\\n  var areaRettangolo = base * altezza;\\n//###END_MODIFICABILE###\\n  return areaRettangolo;\\n}","aiutoUtilizzato":"true"}]}', 4, 99999999, 330, 0, 408, 492, 30, 9010),
('a.b@gmail.it', 2, '{"fileVirtuali":[{"nomeFile":"PermessiCalibrazione.js","codice":"/**********\\nBenvenuto nel file di sblocco dei permessi di calibrazione.\\nIl seguente file permette di sbloccare ed accedere alle funzionalitÃ \\ndi configurazione planetaria, fondamentiali per la corretta impostazione\\ndelle armi.\\n**********/\\n\\n// Variabile contenente il codice del pianeta su cui si trovano le armi.\\nvar _codicePianeta;\\n\\n// Codice per lo sblocco dei permessi di calibrazione,\\n// contenente anche lo sblocco di configurazione planetaria.\\n// Attenzione! Senza lo sblocco della calibrazione attiva,\\n// non sarÃ  possibile attivare la configurazione planetaria.\\nvar sbloccoPermessiCalibrazione = function () {\\n//###START_MODIFICABILE###\\n  // Variabile di sblocco del sistema di calibrazione.\\n  var sbloccoCalibrazione = true;\\n//###END_MODIFICABILE###\\n  var accessoConfigurazionePianeti = false;\\n  // Variabili contenenti i codici planetari.\\n  var codiceDefault = 1;\\n  var codiceBastiani = 2;\\n  var codiceColombre = 3;\\n  var codiceButtafuoco = 4;\\n  var codiceBarnabo = 5;\\n  var codiceBuzzati = 6;\\n  \\n  if ( sbloccoCalibrazione === true ) {\\n    accessoConfigurazionePianeti = true;\\n  }\\n//###START_MODIFICABILE###\\n  // Attenzione! Modificare solo se il pianeta desiderato non Ã¨ quello di default.\\n  if ( accessoConfigurazionePianeti === false ) {\\n//###END_MODIFICABILE###\\n    _codicePianeta = codiceDefault;\\n  } else {\\n    // Assegnare alla variabile il codice del pianeta desiderato.\\n    _codicePianeta = codiceButtafuoco;\\n  }\\n  \\n  return [sbloccoCalibrazione, accessoConfigurazionePianeti, _codicePianeta]\\n}","aiutoUtilizzato":"true"},{"nomeFile":"ConfigPlanetaria.js","codice":"/**********\\nBenvenuto nel file di configurazione planetaria del sistema Hob-2000.\\nTroverai in elenco le caratteristiche di ogni pianeta,\\nnecessarie per il corretto funzionamento del sistema stesso.\\nOgni pianeta ha cinque caratteristiche: il nome, la forza gravitazionale,\\nil vento, l''atmosfera e il settore galattico.\\nTali caratteristiche influiscono pesantemente sulle capacitÃ  di sparo,\\nrendendo potenzialmente inutilizzabili le armi se configurate per il pianeta errato.\\n**********/\\n\\nvar configurazioneParametriPianeti = function () {\\n  var nomePianeta;\\n  var forzaGravitazionale;\\n  var vento;\\n  var atmosfera;\\n  var settoreGalattico;\\n  \\n//###START_MODIFICABILE###\\n  _codicePianeta = 6;\\n  if ( _codicePianeta === 1 ) {\\n    nomePianeta = \\"Terra\\";\\n    forzaGravitazionale = 1;\\n    vento = 1;\\n    atmosfera = \\"respirabile\\";\\n    settoreGalattico = 0;\\n  } else if ( _codicePianeta === 2 ) {\\n    nomePianeta = \\"Buzzati\\";\\n    forzaGravitazionale = 2;\\n    vento = 19.06;\\n    atmosfera = \\"respirabile\\";\\n    settoreGalattico = 5;\\n  } else if ( _codicePianeta === 3 ) {\\n    nomePianeta = \\"Colombre\\";\\n    forzaGravitazionale = 0.5;\\n    vento = 0.7;\\n    atmosfera = \\"non_respirabile\\";\\n    settoreGalattico = 6;\\n  } else if ( _codicePianeta === 4 ) {\\n    nomePianeta = \\"Buttafuoco\\";\\n    forzaGravitazionale = 4.5;\\n    vento = 80;\\n    atmosfera = \\"non_respirabile\\";\\n    settoreGalattico = 3;\\n  } else if ( _codicePianeta === 5 ) {\\n    nomePianeta = \\"Barnabo\\";\\n    forzaGravitazionale = 13;\\n    vento = 0;\\n    atmosfera = \\"parzialmente_respirabile\\";\\n    settoreGalattico = 1;\\n  } else if ( _codicePianeta === 6 ) {\\n    nomePianeta = \\"Bastiani\\";\\n    forzaGravitazionale = 4.2;\\n    vento = 23;\\n    atmosfera = \\"respirabile\\";\\n    settoreGalattico = 7;\\n//###END_MODIFICABILE###\\n    // /\\\\/\\\\/\\\\ Â£Nos****KnÂ£$%BsorJOJSONHbooooooLK666dbw**\\n    // **&fgHJS666&78765&4%4$$LÂ£sC&GSTntadjr /\\\\/\\\\/\\\\\\n  } else if ( _codicePianeta === \\"00110111\\" ) {\\n    nomePianeta = \\"01000001 01101110 01100111 01110101 01110011 01110100 01101001 01101110 01100001\\";\\n    forzaGravitazionale = \\"00110010 00101110 00110011\\";\\n    vento = \\"01101110 01101111 01101110 01011111 01110000 01110010 01100101 01110011 01100101 01101110 01110100 01100101\\";\\n    atmosfera = \\"01110010 01100101 01110011 01110000 01101001 01110010 01100001 01100010 01101001 01101100 01100101\\";\\n    settoreGalattico = \\"00111000\\";\\n  }\\n  \\n  return [nomePianeta, forzaGravitazionale, vento, atmosfera, settoreGalattico];\\n}","aiutoUtilizzato":"true"}]}', 1, -3000, 66, 0, 84, 96, 6, 2020),
('a.b@gmail.it', 3, '{"fileVirtuali":[{"nomeFile":"CaricatoreMunizioni.js","codice":"/**********\\nBenvenuto nel file di caricamento delle torrette del sistema Hob-2000.\\nOgni torretta preleva dal magazzino i missili, uno ad uno,\\nper inserirli automaticamente nel caricatore della torretta.\\nSe sono presenti tipologie di proiettili difettose,\\nmodificare il codice seguente.\\n**********/\\n\\n// Questo codice viene ripetuto per ogni torretta automaticamente.\\nvar meccanismoCaricamento = function ( ) {\\n  // Variabile contenente il carico del magazzino.\\n  var magazzino = prelevaCarico();\\n  // Array vuoti per il caricatore della torretta e\\n  // per il deposito dei missili difettosi.\\n  var caricatoreTorretta = [];\\n  var proiettiliScartati = [];\\n  \\n//###START_MODIFICABILE###\\n  for( i = 0; i < magazzino.length; ++i ) {\\n    // Variabile contenente il proiettile i-esimo del magazzino.\\n    var proiettile = magazzino[i];\\n    // Se i missili al plutonio sono difettosi,\\n    // inserirli nell''array dei missili scartati.\\n    if( proiettile.nucleoEsplosivo === ''plutonio'' ) {\\n      proiettiliScartati.push( proiettile );\\n    }\\n    // Se i missili al plasma sono difettosi,\\n    // inserirli nell''array dei missili scartati.\\n    if( proiettile.nucleoEsplosivo === ''plasma'' ) {\\n      caricatoreTorretta.push( proiettile  );\\n    }\\n    // Se i missili sonici sono difettosi,\\n    // inserirli nell''array dei missili scartati.\\n    if( proiettile.nucleoEsplosivo === ''sonico'' ) {\\n      proiettiliScartati.push( proiettile );\\n    }\\n    \\n    if( caricatoreTorretta.length >= 10 )\\n      break;\\n  }\\n//###END_MODIFICABILE###\\n  \\n  return caricatoreTorretta;\\n}","aiutoUtilizzato":"true"},{"nomeFile":"SistemaRaffreddamento.js","codice":"/**********\\nBenvenuto nel file di raffreddamento torrette del sistema Hob-2000.\\nIl codice seguente permette di modificare la soglia di temperatura minima,\\ncioÃ¨ la soglia di temperatura dalla quale Ã¨ possibile ricominciare\\na sparare in caso di surriscaldamento della torretta.\\n\\nQuesto codice vale per tutte le torrette.\\n**********/\\n\\nvar sistemaRaffreddamento = function ( ) {\\n  T = rilevaTemperatura();\\n//###START_MODIFICABILE###\\n  // Variabile contenente la soglia di temperatura minima.\\n  var sogliaTemperaturaMinima = 799;\\n//###END_MODIFICABILE###\\n  \\n  if( T >= 799 ) {\\n//###START_MODIFICABILE###\\n    // Ciclo per la gestione delle pompe di raffreddamento.\\n    // Deve rimanere attivo finchÃ© la temperatura T non Ã¨\\n    // uguale o superiore alla soglia.\\n    while( T >= sogliaTemperaturaMinima ) {\\n      azionaPompeRaffreddamento();\\n      T = rilevaTemperatura();\\n    }\\n//###END_MODIFICABILE###\\n  }\\n}","aiutoUtilizzato":"true"}]}', 4, -15350, 86, 0, 92, 58, 5, 670),
('a.b@gmail.it', 4, '{"fileVirtuali":[{"nomeFile":"ArmaSabotata.js","codice":"/**********\\nCiao, caro. Il codice che vedi di seguito Ã¨ una mia idea su come potrebbe essere un''arma sabotata da caricare al posto di quelle standard all''interno del codice del Nemico.\\nAggiusta i parametri della classe per rendere l''arma piÃ¹ consona alle tue esigenze.\\nSaluti,\\nZurlin\\n**********/\\n  \\nfunction ArmaNemicaSabotata () {\\n//###START_MODIFICABILE###\\n  // Campo per il tempo di ricarica massimo delle torrette antiterrestri.\\n  this.tempoRicaricaMassimo = 100;\\n  // Campo per la tipologia di propellente.\\n  // PiÃ¹ Ã¨ alto il numero, migliore Ã¨ il propellente.\\n  this.propellente = 5;\\n  // Campo per il numero di missili della torretta antiterrestre.\\n  this.numeroMissili = 20;\\n  // Tipologia di munizione.\\n  // PuÃ² essere \\"massima_efficacia\\" oppure \\"massima_esplosione\\".\\n  this.tipoMunizione = \\"massima_efficacia\\";\\n//###END_MODIFICABILE###\\n}","aiutoUtilizzato":"true"},{"nomeFile":"CaricamentoArma.js","codice":"/**********\\nFile di creazione delle batterie antiterrestri.\\nRicordiamo che Ã¨ necessario autenticarsi in seguito a qualunque modifica.\\n**********/\\n\\nvar inizializzaBatteriaAntiterrestri = function () {\\n//###START_MODIFICABILE###\\n  // Variabile contenente la batteria antiterrestre\\n  // di tipo standard.\\n  var batteria = new BatteriaAntiterrestre();\\n  return batteria;\\n//###END_MODIFICABILE###\\n}","aiutoUtilizzato":"true"},{"nomeFile":"HackingPassword.js","codice":"/**********\\nCiao, caro.\\nNella funzione generaPassword() hai un esempio di funzione ricorsiva per il calcolo della password necessaria per salvare le modifiche.\\nQuesto codice prova ad indovinare la password generando tutte le combinazioni possibili dei caratteri ''A'', ''B'' e ''C''.\\nNella funzione hackingPassword() queste combinazioni vengono mandate al server centrale del Nemico, continuando finchÃ© non viene approvata una delle combinazioni.\\nSpero di non aver fatto errori.\\nSaluti,\\nZurlin\\n**********/\\n\\n// Simboli utilizzati per la password.\\nvar simboli = [''A'', ''B'', ''C''];\\n/**********\\nFunzione per la generazione di tutte le password possibili.\\nProvo tutti i simboli per la prima cifra:\\n    - A * *\\n    - B * * \\n    - C * *\\nA questo punto il gioco Ã¨ fatto: per le restanti cifre * * ripeto la stessa procedura come se volessi generare tutte le combinazioni di una password di lunghezza 2:\\n    - A * * -> A A *\\n            -> A B *\\n            -> A C *\\ne cosÃ¬ via... \\n**********/\\nvar generaPassword = function ( combinazioniPossibili, combinazione, k ) {\\n  var combinazione = copiaArray( combinazione );\\n  // k indica il numero della cifra che si sta cercando di indovinare\\n//###START_MODIFICABILE###\\n  if (k === 2) {\\n//###END_MODIFICABILE###\\n    combinazioniPossibili.push( combinazione );\\n  }\\n  else {\\n  \\tvar i = 0;\\n    for( i; i < 3; i++ ) {\\n      combinazione[ k ] = simboli[ i ];\\n      generaPassword( combinazioniPossibili, combinazione, k + 1 );\\n    }\\n  }\\n}\\n\\n// Funzione per il test delle combinazioni.\\nvar hackingPassword = function () {\\n  var combinazioniPossibili = [];\\n  // Variabile con la combinazione di partenza.\\n  var combinazione = [''*'', ''*'', ''*''];\\n  // Chiamata alla funzione di generazione delle password,\\n  // che inserisce tutte quelle possibili nella variabile\\n  // combinazioniPossibili.\\n  generaPassword( combinazioniPossibili, combinazione, 0 );\\n  \\n  var hacking = false;\\n  // Questo ciclo scorre tutte le combinazioni\\n  // e le manda una ad una al server del Nemico.\\n  for ( var i = 0; i < combinazioniPossibili.length; ++i ) {\\n    // Qui viene chiamata la funzione per il test della password.\\n    hacking = autenticazioneOperatoreNonTerrestre( combinazioniPossibili[ i ] );\\n    // Se la password Ã¨ corretta, usciamo dal ciclo.\\n    if ( hacking === true ) {\\n      break;\\n    }\\n  }\\n  return hacking;\\n}","aiutoUtilizzato":"true"}]}', 1, -6200, 33, 0, 46, 44, 3, 0),
('a.b@gmail.it', 5, '{"fileVirtuali":[{"nomeFile":"ConfigTorrettaSx.js","codice":"/**********\\nBenvenuto nel file di configurazione della torretta sinistra del sistema Hob-2000.\\nOgni torretta contiene tre variabili fondamentali: l''energia per il compressore del gas di propulsione, l''energia per lo spostamento del cannone e la pressione del carburante del missile.\\nCambiare queste configurazioni solo se si notano malfunzionamenti nel meccanismo di sparo delle torrette.\\n**********/\\n\\n// Classe della torretta sinistra\\nfunction TorrettaSinistra ( magazzino, caricatore, compressore, generatore, mirino ) {\\n  this.magazzino = magazzino;\\n  this.mirino = mirino;\\n  this.generatore = generatore;\\n  this.caricatore = caricatore;\\n  this.compressore = compressore;\\n}\\n\\n// Funzione per il caricamento del missile.\\nTorrettaSinistra.prototype.caricaMissile = function () {\\n  for ( i = 0; i < this.magazzino.length; ++i ) {\\n    this.caricatore.immagazzinaMissile( this.magazzino[i], this.generatore );\\n  }\\n}\\n\\n// Funzione per lo spostamento del cannone.\\nTorrettaSinistra.prototype.mira = function ( x, y, energiaFornita ) {\\n  this.mirino.spostaMirino( x, y, energiaFornita, this.generatore );\\n}\\n\\n// Funzione per lo sparo.\\nTorrettaSinistra.prototype.spara = function ( x, y ) {\\n//###START_MODIFICABILE###\\n  // Variabile contenente l''energia del compressore del gas di propulsione.\\n  var energiaCompressore = 30;\\n  // Variabile contenente l''energia per lo spostamento del cannone.\\n  var energiaMirino = 10;\\n  // Variabile contenente la pressione del carburante del missile.\\n  var pressioneCarburante = 5;\\n//###END_MODIFICABILE###\\n  var missile = this.caricatore.caricaProiettile( this.generatore );  \\n  this.compressore.aumentaPressione( missile.combustibile, pressioneCarburante, \\n    energiaCompressore, this.generatore );\\n  this.mira( x, y, energiaMirino );\\n  this.caricatore.innescaFuoco( missile, this.compressore, this.generatore );\\n}","aiutoUtilizzato":"true"},{"nomeFile":"ConfigTorrettaCentro.js","codice":"/**********\\nBenvenuto nel file di configurazione della torretta centrale del sistema Hob-2000.\\nOgni torretta contiene tre variabili fondamentali: l''energia per il compressore del gas di propulsione, l''energia per lo spostamento del cannone e la pressione del carburante del missile.\\nCambiare queste configurazioni solo se si notano malfunzionamenti nel meccanismo di sparo delle torrette.\\n**********/\\n\\n// Classe della torretta centrale.\\nfunction TorrettaCentrale ( magazzino, caricatore, compressore, generatore, mirino ) {\\n  this.magazzino = magazzino;\\n  this.mirino = mirino;\\n  this.generatore = generatore;\\n  this.caricatore = caricatore;\\n  this.compressore = compressore;\\n}\\n\\n// Funzione per il caricamento del missile.\\nTorrettaCentrale.prototype.caricaMissile = function () {\\n  for ( i = 0; i < this.magazzino.length; ++i ) {\\n    this.caricatore.immagazzinaMissile( this.magazzino[i], this.generatore );\\n  }\\n}\\n\\n// Funzione per lo spostamento del cannone.\\nTorrettaCentrale.prototype.mira = function ( x, y, energiaFornita ) {\\n  this.mirino.spostaMirino( x, y, energiaFornita, this.generatore );\\n}\\n\\n// Funzione per lo sparo.\\nTorrettaCentrale.prototype.spara = function ( x, y ) {\\n//###START_MODIFICABILE###\\n  // Variabile contenente l''energia del compressore del gas di propulsione.\\n  var energiaCompressore = 5;\\n  // Variabile contenente l''energia per lo spostamento del cannone.\\n  var energiaMirino = 1;\\n  // Variabile contenente la pressione del carburante del missile.\\n  var pressioneCarburante = 15;\\n//###END_MODIFICABILE###\\n  var missile = this.caricatore.caricaProiettile( this.generatore );\\n  this.compressore.aumentaPressione( missile.combustibile, pressioneCarburante, \\n    energiaCompressore, this.generatore );\\n  this.mira( x, y, energiaMirino );\\n  this.caricatore.innescaFuoco( missile, this.compressore, this.generatore );\\n}","aiutoUtilizzato":"true"},{"nomeFile":"ConfigTorrettaDx.js","codice":"/**********\\nBenvenuto nel file di configurazione della torretta destra del sistema Hob-2000.\\nOgni torretta contiene tre variabili fondamentali: l''energia per il compressore del gas di propulsione, l''energia per lo spostamento del cannone e la pressione del carburante del missile.\\nCambiare queste configurazioni solo se si notano malfunzionamenti nel meccanismo di sparo delle torrette.\\n**********/\\n\\n// Classe della torretta destra\\nfunction TorrettaDestra ( magazzino, caricatore, compressore, generatore, mirino ) {\\n  this.magazzino = magazzino;\\n  this.mirino = mirino;\\n  this.generatore = generatore;\\n  this.caricatore = caricatore;\\n  this.compressore = compressore;\\n}\\n\\n// Funzione per il caricamento del missile.\\nTorrettaDestra.prototype.caricaMissile = function () {\\n  for ( i = 0; i < this.magazzino.length; ++i ) {\\n    this.caricatore.immagazzinaMissile( this.magazzino[i], this.generatore );\\n  }\\n}\\n\\n// Funzione per lo spostamento del cannone.\\nTorrettaDestra.prototype.mira = function ( x, y, energiaFornita ) {\\n  this.mirino.spostaMirino( x, y, energiaFornita, this.generatore );\\n}\\n\\n// Funzione per lo sparo.\\nTorrettaDestra.prototype.spara = function ( x, y ) {\\n//###START_MODIFICABILE###\\n  // Variabile contenente l''energia del compressore del gas di propulsione.\\n  var energiaCompressore = 80;\\n  // Variabile contenente l''energia per lo spostamento del cannone.\\n  var energiaMirino = 50;\\n  // Variabile contenente la pressione del carburante del missile.\\n  var pressioneCarburante = 20;\\n//###END_MODIFICABILE###\\n  var missile = this.caricatore.caricaProiettile( this.generatore );\\n  this.compressore.aumentaPressione( missile.combustibile, pressioneCarburante, \\n    energiaCompressore, this.generatore );\\n  this.mira( x, y, energiaMirino );\\n  this.caricatore.innescaFuoco( missile, this.compressore, this.generatore );\\n}","aiutoUtilizzato":"true"}]}', 1, -37250, 76, 0, 83, 37, 4, 100),
('a.b@gmail.it', 6, '{"fileVirtuali":[{"nomeFile":"MacchinettaCaffe.js","codice":"//###START_MODIFICABILE###\\n//###END_MODIFICABILE###\\n/**********\\nFunzione che abilita il click del mouse per azionare la macchinetta del caffÃ¨.\\nQuesta funzione potrebbe essere d''ispirazione per altri scopi...\\n**********/\\nvar azionaMacchinaCaffeConClick = function ( pulsantieraMacchinaCaffe ) {\\n  // Comandi plancia azionati da click del mouse, notale il ''click''\\n  $( pulsantieraMacchinaCaffe ).bind( ''click'', function ( eventoClick ) {\\n    // Questa parte di codice si attiva quando si clicca\\n    macchinaCaffe.faiIlCaffe();\\n  } );\\n}","aiutoUtilizzato":"false"},{"nomeFile":"TrovaTorrettaMigliore.js","codice":"//###START_MODIFICABILE###\\n//###END_MODIFICABILE###\\n/**********\\nFunzione che date le coordinate del bersaglio\\ndetermina la torretta migliore, e funzionante,\\nper colpire il bersaglio.\\n\\nQuesta funzione prende come parametri:\\n  - torretta: un array di torrette;\\n  - x: un intero che rappresenta la coordinata x;\\n  - y: un intero che rappresenta la coordinata y;\\nQuesta funzione restituisce la torretta migliore.\\n**********/\\nvar torrettaPiuVicina = function ( torrette, x, y ) {\\n  /** Funzione che restituisce true (vero) o false (falso)\\n  nel caso in cui la torretta sia o meno funzionante. */\\n  var torrettaNonFunzionante = function ( torretta ) {\\n    if( torretta.stato === BatteriaAntimissile.ATTIVA &&\\n        torretta.numeroMissili > 0 &&\\n        torretta.blocco === false )\\n      return false;\\n    else\\n      return true;\\n  } \\n  \\n  var torrettaSelezionata;\\n  if( 0 <= x && x < 170 ) {\\n    torrettaSelezionata = torrette[0];\\n  }\\n  if( 170 <= x && x < 340 ) {\\n    torrettaSelezionata = torrette[1];\\n  }\\n  if( 340 <= x && x <= 510 ) {\\n    torrettaSelezionata = torrette[2];\\n  }\\n  \\n  if( torrettaNonFunzionante(torrettaSelezionata) )\\n    torrettaSelezionata = torrette[1];\\n  if( torrettaNonFunzionante(torrettaSelezionata) )\\n    torrettaSelezionata = torrette[0];\\n  if( torrettaNonFunzionante(torrettaSelezionata) )\\n    torrettaSelezionata = torrette[2];\\n  \\n  return torrettaSelezionata;\\n}","aiutoUtilizzato":"false"},{"nomeFile":"AzionamentiPlanciaComandi.js","codice":"//###START_MODIFICABILE###\\n//###END_MODIFICABILE###\\n/**********\\nFunzione che abilita i comandi della plancia. Attualmente prendo i tasti 1, 2, 3\\nsulla tastiera si fa fuoco con la torretta rispettivamente sinistra, centrale e\\ndestra.\\nIl comando click Ã¨ abilitato ma non funzionante.\\n\\nLa funzione prende come parametri:\\n  - planciaComandi: classe che legge i comandi attivati;\\n  - torrette: array di torrette controllate;\\n  - mirino: classe che rappresenta il sistema di puntamento, restituisce\\n    le coordinate in cui Ã¨ attualmente tramite mirino.x() e mirino.y();\\n  - sistema: Ã¨ il sistema missilistico a cui sono rivolti i comandi.\\n**********/\\nvar azionamentoComandiPlancia = function ( planciaComandi, torrette, mirino, sistema ) {\\n  // Comandi plancia azionati da tastiera, sostituire con click mouse ed inserire selezione automatica torretta.\\n//###START_MODIFICABILE###\\n  $( planciaComandi ).bind( ''click'', function ( eventoClick ) {\\n    // Selezione coordinate a cui sparare\\n    var x = mirino.x;\\n    var y = mirino.y;\\n  \\n    // Selezione della torretta corrispondente, \\"which\\" significa \\"quale\\" in inglese\\n    var torrettaSelezionata;\\n    torrettaSelezionata = torrettaPiuVicina( torrette, x, y );\\n    \\n    // Lancio del missile\\n    azionaComandoSparo( torrettaSelezionata, sistema, x, y );\\n  } );\\n//###END_MODIFICABILE###\\n}","aiutoUtilizzato":"false"}]}', 1, 3800, 98, 0, 29, 31, 2, 410),
('a.b@gmail.it', 7, '', 1, 3550, 257, 0, 88, 62, 5, 640),
('a.b@gmail.it', 8, '', 2, 2850, 183, 0, 39, 171, 7, 1410),
('a.b@gmail.it', 9, '', 6, 2500, 542, 0, 344, 166, 17, 2610),
('muni@mazma.it', 1, '{"fileVirtuali":[{"nomeFile":"Benvenuto.hob","codice":"/*\\n __   __  _______  _______         _______  _______  _______  _______ \\n|  | |  ||       ||  _    |       |       ||  _    ||  _    ||  _    |\\n|  |_|  ||   _   || |_|   | ____  |____   || | |   || | |   || | |   |\\n|       ||  | |  ||       ||____|  ____|  || | |   || | |   || | |   |\\n|       ||  |_|  ||  _   |        | ______|| |_|   || |_|   || |_|   |\\n|   _   ||       || |_|   |       | |_____ |       ||       ||       |\\n|__| |__||_______||_______|       |_______||_______||_______||_______|\\nQuesto file Ã¨ stato generato automaticamente dal sistema antimissilistico\\nHOB-2000.\\n\\n\\nBuongiorno, sono il sistema antimissilistico HOB-2000, per comunicarvi che\\nl''autenticazione automatica Ã¨ fallita. Se proprio desiderate procedere, avete la possibilitÃ  di utilizzare l''autenticazione manuale.\\n\\nGrazie per aver scelto HOB-2000.\\nCopyright (C) 4096 Orsa Minore Software Inc. - Tutti i diritti riservati\\nÃˆ possibile utilizzare, distribuire o modificare questo file secondo i termini della licenza galattica GGPA-DA1979, che sfortunatamente non verrÃ  scritta se non nel prossimo secolo.\\n*/","aiutoUtilizzato":"false"},{"nomeFile":"AutenticazioneManuale.js","codice":"/**********\\nIl codice seguente permette l''autenticazione manuale di un operatore, tramite la creazione di una parola di accesso ottenuta dalla concatenazione di piÃ¹ stringhe.\\nATTENZIONE! Utilizzare solo in caso di fallimento dell''autenticazione automatica.\\n\\nInserire il proprio nome utente nella variabile \\"nome\\", la propria matricola nella variabile \\"matricola\\" e la propria password nella variabile \\"password\\".\\nCreare poi la corretta stringaAccesso, utilizzando la concatenazione di variabili che contengono una stringa.\\n**********/\\n\\n/* /\\\\/\\\\/\\\\ Gen. Ortiz /\\\\/\\\\/\\\\\\nSe hai bisogno di ricordarti cosa devi fare, controlla la sezione \\"Obiettivo\\" corrispondente al nome di questo file, presente sulla tua plancia di comando.*/\\nvar autenticazioneManuale = function () {\\n//###START_MODIFICABILE###\\n  // Ricorda: il simbolo = permette di assegnare il valore alla variabile.\\n  var nome = \\"Cpt Simeoni\\";\\n  var matricola = 150716;\\n  var password = \\"utf-8_tuono\\";\\n  // Ricorda: il simbolo + tra due variabili di tipo stringa indica la loro concatenazione.\\n  var stringaAccesso = nome + \\"%\\"+ matricola + \\"<\\" + password + \\">\\";\\n//###END_MODIFICABILE###\\n  \\n  return [nome, matricola, password, stringaAccesso];\\n}","aiutoUtilizzato":"false"},{"nomeFile":"VerificaCervello.js","codice":"/**********\\nIl codice che segue Ã¨ necessario per verificare la presenza di un operatore umano.\\nIl quesito posto Ã¨ semplice: la variabile \\"areaRettangolo\\" deve contenere la corretta formula per il calcolo dell''area di un rettangolo.\\n**********/\\nvar verificaPresenzaCervelloOperatore = function ( base, altezza ) {\\n//###START_MODIFICABILE###\\n  var areaRettangolo = base * altezza;\\n//###END_MODIFICABILE###\\n  return areaRettangolo;\\n}","aiutoUtilizzato":"false"}]}', 1, 2100, 11, 0, 0, 30, 1, 530),
('muni@mazma.it', 9, '{"fileVirtuali":[{"nomeFile":"ComandoSparoSingolo.js","codice":"/**********\\nFunzione che comanda ad una torretta, scelta opportunamente, di lanciare un missile alla coordinata indicata.\\n\\nPrende come parametri:\\n  - x: intero che indentifica la coordinata x del bersaglio;\\n  - y: intero che indentifica la coordinata y del bersaglio;\\n  - torrette: array di torrette.\\n**********/\\nvar comandoSparoSingolo = function ( x, y, torrette ) {\\n  var indiceTorretta = sceltaTorrettaMigliore( x, y, torrette );\\n  if( indiceTorretta !== undefined ) {\\n    var torretta = torrette[indiceTorretta];\\n    torretta.cicloSparo( x, y );\\n  }\\n}","aiutoUtilizzato":"false"},{"nomeFile":"ComandoSparoMultiplo.js","codice":"/**********\\nFunzione che comanda a tutte le torrette di sparare missili lungo una linea creando uno sbarramento di fuoco in cielo.\\n\\nPrende come parametri:\\n  - ordiniDiFuoco: un array di strutture { numeroTorretta: 0, x: 416, y: 188 } dove x ed y sono le coordinate a cui sparare mentre numeroTorretta rappresenta l''identificatore della torretta a cui Ã¨ diretto l''ordine;\\n  - torrette: array di oggetti torretta le quali possiedono un indice ( torretta.indice ) e consentono lo sparo tramite il metodo torretta.cicloSparo().\\n    \\nObiettivo della funzione Ã¨ far sparare le torrette in accordo con gli ordini contenuti in ordiniDiFuoco.\\n**********/\\nvar comandoSparoMultiplo = function ( ordiniDiFuoco, torrette ) {\\n//###START_MODIFICABILE###\\n \\n  }\\n//###END_MODIFICABILE###\\n}","aiutoUtilizzato":"false"}]}', 1, 2000, 124, 0, 105, 15, 4, 740),
('munic@mazma.it', 1, '{"fileVirtuali":[{"nomeFile":"Benvenuto.hob","codice":"/*\\n __   __  _______  _______         _______  _______  _______  _______ \\n|  | |  ||       ||  _    |       |       ||  _    ||  _    ||  _    |\\n|  |_|  ||   _   || |_|   | ____  |____   || | |   || | |   || | |   |\\n|       ||  | |  ||       ||____|  ____|  || | |   || | |   || | |   |\\n|       ||  |_|  ||  _   |        | ______|| |_|   || |_|   || |_|   |\\n|   _   ||       || |_|   |       | |_____ |       ||       ||       |\\n|__| |__||_______||_______|       |_______||_______||_______||_______|\\nQuesto file Ã¨ stato generato automaticamente dal sistema antimissilistico\\nHOB-2000.\\n\\n\\nBuongiorno, sono il sistema antimissilistico HOB-2000, per comunicarvi che\\nl''autenticazione automatica Ã¨ fallita. Se proprio desiderate procedere, avete la possibilitÃ  di utilizzare l''autenticazione manuale.\\n\\nGrazie per aver scelto HOB-2000.\\nCopyright (C) 4096 Orsa Minore Software Inc. - Tutti i diritti riservati\\nÃˆ possibile utilizzare, distribuire o modificare questo file secondo i termini della licenza galattica GGPA-DA1979, che sfortunatamente non verrÃ  scritta se non nel prossimo secolo.\\n*/","aiutoUtilizzato":"false"},{"nomeFile":"AutenticazioneManuale.js","codice":"/**********\\nIl codice seguente permette l''autenticazione manuale di un operatore, tramite la creazione di una parola di accesso ottenuta dalla concatenazione di piÃ¹ stringhe.\\nATTENZIONE! Utilizzare solo in caso di fallimento dell''autenticazione automatica.\\n\\nInserire il proprio nome utente nella variabile \\"nome\\", la propria matricola nella variabile \\"matricola\\" e la propria password nella variabile \\"password\\".\\nCreare poi la corretta stringaAccesso, utilizzando la concatenazione di variabili che contengono una stringa.\\n**********/\\n\\n/* /\\\\/\\\\/\\\\ Gen. Ortiz /\\\\/\\\\/\\\\\\nSe hai bisogno di ricordarti cosa devi fare, controlla la sezione \\"Obiettivo\\" corrispondente al nome di questo file, presente sulla tua plancia di comando.*/\\nvar autenticazioneManuale = function () {\\n//###START_MODIFICABILE###\\n  // Ricorda: il simbolo = permette di assegnare il valore alla variabile.\\n  var nome = \\"Cpt Simeoni\\";\\n  var matricola = 150716;\\n  var password = \\"utf-8_tuono\\";\\n  // Ricorda: il simbolo + tra due variabili di tipo stringa indica la loro concatenazione.\\n  var stringaAccesso = nome + \\"%\\"+ matricola + \\"<\\" + password + \\">\\";\\n//###END_MODIFICABILE###\\n  \\n  return [nome, matricola, password, stringaAccesso];\\n}","aiutoUtilizzato":"false"},{"nomeFile":"VerificaCervello.js","codice":"/**********\\nIl codice che segue Ã¨ necessario per verificare la presenza di un operatore umano.\\nIl quesito posto Ã¨ semplice: la variabile \\"areaRettangolo\\" deve contenere la corretta formula per il calcolo dell''area di un rettangolo.\\n**********/\\nvar verificaPresenzaCervelloOperatore = function ( base, altezza ) {\\n//###START_MODIFICABILE###\\n  var areaRettangolo = base * altezza;\\n//###END_MODIFICABILE###\\n  return areaRettangolo;\\n}","aiutoUtilizzato":"false"}]}', 1, 2100, 22, 0, 26, 34, 2, 630),
('munic@mazma.it', 2, '{"fileVirtuali":[{"nomeFile":"PermessiCalibrazione.js","codice":"/**********\\nBenvenuto nel file di sblocco dei permessi di calibrazione.\\nIl seguente file permette di sbloccare ed accedere alle funzionalitÃ  di configurazione planetaria, fondamentiali per la corretta impostazione delle armi.\\n**********/\\n\\n// Variabile contenente il codice del pianeta su cui si trovano le armi.\\nvar _codicePianeta;\\n\\n// Codice per lo sblocco dei permessi di calibrazione,\\n// contenente anche lo sblocco di configurazione planetaria.\\n// Attenzione! Senza lo sblocco della calibrazione attiva,\\n// non sarÃ  possibile attivare la configurazione planetaria.\\nvar sbloccoPermessiCalibrazione = function () {\\n//###START_MODIFICABILE###\\n  // Variabile di sblocco del sistema di calibrazione.\\n  var sbloccoCalibrazione = true;\\n//###END_MODIFICABILE###\\n  var accessoConfigurazionePianeti = false;\\n  // Variabili contenenti i codici planetari.\\n  var codiceTerra = 1;\\n  var codiceBastiani = 2;\\n  var codiceColombre = 3;\\n  var codiceButtafuoco = 4;\\n  var codiceBarnabo = 5;\\n  var codiceBuzzati = 6;\\n  \\n  if ( sbloccoCalibrazione === true ) {\\n    accessoConfigurazionePianeti = true;\\n  }\\n//###START_MODIFICABILE###\\n  // Attenzione! Modificare solo se il pianeta desiderato non Ã¨ quello di default.\\n  if ( accessoConfigurazionePianeti === false ) {\\n//###END_MODIFICABILE###\\n    _codicePianeta = codiceTerra;\\n  } else {\\n    // Assegnare alla variabile il codice del pianeta desiderato.\\n    _codicePianeta = codiceBastiani;\\n  }\\n  \\n  return [sbloccoCalibrazione, accessoConfigurazionePianeti, _codicePianeta]\\n}","aiutoUtilizzato":"false"},{"nomeFile":"ConfigPlanetaria.js","codice":"/**********\\nBenvenuto nel file di configurazione planetaria del sistema Hob-2000.\\nTroverai in elenco le caratteristiche di ogni pianeta, necessarie per il corretto funzionamento del sistema stesso.\\nOgni pianeta ha cinque caratteristiche: il nome, la forza gravitazionale, il vento, l''atmosfera e il settore galattico.\\nTali caratteristiche influiscono pesantemente sulle capacitÃ  di sparo, rendendo potenzialmente inutilizzabili le armi se configurate per il pianeta errato.\\n**********/\\n\\nvar configurazioneParametriPianeti = function () {\\n  var nomePianeta;\\n  var forzaGravitazionale;\\n  var vento;\\n  var atmosfera;\\n  var settoreGalattico;\\n  console.log(\\"Il codice del pianeta selezionato Ã¨: \\" + _codicePianeta);  \\n//###START_MODIFICABILE###\\n  if ( _codicePianeta === 1 ) {\\n//###END_MODIFICABILE###\\n    nomePianeta = \\"Terra\\";\\n    forzaGravitazionale = 1;\\n    vento = 1;\\n    atmosfera = \\"respirabile\\";\\n    settoreGalattico = 0;\\n//###START_MODIFICABILE###\\n  } else if ( _codicePianeta === 6 ) {\\n//###END_MODIFICABILE###\\n    nomePianeta = \\"Buzzati\\";\\n    forzaGravitazionale = 2;\\n    vento = 19.06;\\n    atmosfera = \\"respirabile\\";\\n    settoreGalattico = 5;\\n//###START_MODIFICABILE###\\n  } else if ( _codicePianeta === 3 ) {\\n//###END_MODIFICABILE###\\n    nomePianeta = \\"Colombre\\";\\n    forzaGravitazionale = 0.5;\\n    vento = 0.7;\\n    atmosfera = \\"non_respirabile\\";\\n    settoreGalattico = 6;\\n//###START_MODIFICABILE###\\n  } else if ( _codicePianeta === 4 ) {\\n//###END_MODIFICABILE###\\n    nomePianeta = \\"Buttafuoco\\";\\n    forzaGravitazionale = 4.5;\\n    vento = 80;\\n    atmosfera = \\"non_respirabile\\";\\n    settoreGalattico = 3;\\n//###START_MODIFICABILE###\\n  } else if ( _codicePianeta === 5 ) {\\n//###END_MODIFICABILE###\\n    nomePianeta = \\"Barnabo\\";\\n    forzaGravitazionale = 13;\\n    vento = 0;\\n    atmosfera = \\"parzialmente_respirabile\\";\\n    settoreGalattico = 1;\\n//###START_MODIFICABILE###\\n  } else if ( _codicePianeta === 2 ) {\\n//###END_MODIFICABILE###\\n    nomePianeta = \\"Bastiani\\";\\n    forzaGravitazionale = 4.2;\\n    vento = 23;\\n    atmosfera = \\"respirabile\\";\\n    settoreGalattico = 7;\\n    // /\\\\/\\\\/\\\\ Â£Nos****KnÂ£$%BsorJOJSONHbooooooLK666dbw**\\n    // **&fgHJS666&78765&4%4$$LÂ£sC&GSTntadjr /\\\\/\\\\/\\\\\\n  } else if ( _codicePianeta === \\"00110111\\" ) {\\n    nomePianeta = \\"01000001 01101110 01100111 01110101 01110011 01110100 01101001 01101110 01100001\\";\\n    forzaGravitazionale = \\"00110010 00101110 00110011\\";\\n    vento = \\"01101110 01101111 01101110 01011111 01110000 01110010 01100101 01110011 01100101 01101110 01110100 01100101\\";\\n    atmosfera = \\"01110010 01100101 01110011 01110000 01101001 01110010 01100001 01100010 01101001 01101100 01100101\\";\\n    settoreGalattico = \\"00111000\\";\\n  }\\n  \\n  return [nomePianeta, forzaGravitazionale, vento, atmosfera, settoreGalattico];\\n}","aiutoUtilizzato":"false"}]}', 1, 650, 11, 0, 29, 1, 1, 330),
('munic@mazma.it', 3, '{"fileVirtuali":[{"nomeFile":"CaricatoreMunizioni.js","codice":"/**********\\nBenvenuto nel file di caricamento delle torrette del sistema Hob-2000.\\nOgni torretta preleva dal magazzino i missili, uno ad uno, per inserirli automaticamente nel caricatore della torretta.\\nSe sono presenti tipologie di proiettili difettose, modificare il codice seguente.\\n**********/\\n\\n// Questo codice viene ripetuto per ogni torretta automaticamente.\\nvar meccanismoCaricamento = function ( ) {\\n  // Variabile contenente il carico del magazzino.\\n  var magazzino = prelevaCarico();\\n  var numeroMunizioniMagazzino = magazzino.length;\\n  // Array vuoti per il caricatore della torretta e\\n  // per il deposito dei missili difettosi.\\n  var caricatoreTorretta = [];\\n  var proiettiliScartati = [];\\n  \\n//###START_MODIFICABILE###\\n  for( i = 0; i < numeroMunizioniMagazzino; ++i ) {\\n    // Variabile contenente il proiettile i-esimo del magazzino.\\n    var proiettile = magazzino[i];\\n    // Se i missili al plutonio sono difettosi,\\n    // inserirli nell''array dei missili scartati.\\n    if( proiettile.nucleoEsplosivo === ''plutonio'' ) {\\n      proiettiliScartati.push( proiettile );\\n    }\\n    // Se i missili al plasma sono difettosi,\\n    // inserirli nell''array dei missili scartati.\\n    if( proiettile.nucleoEsplosivo === ''plasma'' ) {\\n      caricatoreTorretta.push( proiettile  );\\n    }\\n    // Se i missili sonici sono difettosi,\\n    // inserirli nell''array dei missili scartati.\\n    if( proiettile.nucleoEsplosivo === ''sonico'' ) {\\n      proiettiliScartati.push( proiettile );\\n    }\\n//###END_MODIFICABILE###\\n    if( caricatoreTorretta.length >= 10 )\\n      break;\\n  }\\n  return caricatoreTorretta;\\n}","aiutoUtilizzato":"false"},{"nomeFile":"SistemaRaffreddamento.js","codice":"/**********\\nBenvenuto nel file di raffreddamento torrette del sistema Hob-2000.\\nIl codice seguente permette di modificare la soglia di temperatura minima, cioÃ¨ la soglia di temperatura dalla quale Ã¨ possibile ricominciare a sparare in caso di surriscaldamento della torretta.\\n\\nQuesto codice vale per tutte le torrette.\\n**********/\\nvar sistemaRaffreddamento = function ( ) {\\n  T = rilevaTemperatura();\\n  // Variabile contenente la soglia di temperatura minima. raggiunta la quale la torretta si sblocca.\\n  var sogliaTemperaturaMinima = 500;\\n  \\n  if( T >= 799 ) {\\n//###START_MODIFICABILE###\\n    // Ciclo per la gestione delle pompe di raffreddamento.\\n    // La torretta deve essere raffreddata fino a che la temperatura T\\n    // non scende sotto la soglia minima.\\n    while( T >= sogliaTemperaturaMinima ) {\\n      azionaPompeRaffreddamento();\\n      T = rilevaTemperatura();\\n    }\\n//###END_MODIFICABILE###\\n  }\\n}","aiutoUtilizzato":"false"}]}', 1, 1150, 16, 0, 24, 6, 1, 320),
('munic@mazma.it', 4, '{"fileVirtuali":[{"nomeFile":"ArmaSabotata.js","codice":"/**********\\nCiao, caro. Il codice che vedi di seguito Ã¨ una mia idea su come potrebbe essere un''arma sabotata da caricare al posto di quelle standard all''interno del codice del Nemico.\\nAggiusta i parametri della classe per rendere l''arma piÃ¹ consona alle tue esigenze.\\nSaluti,\\nZurlin\\n**********/\\n  \\nfunction ArmaNemicaSabotata () {\\n//###START_MODIFICABILE###\\n  // Campo per il tempo di ricarica massimo delle torrette antiterrestri.\\n  this.tempoRicaricaMassimo = 150;\\n  // Campo per la tipologia di propellente.\\n  // PiÃ¹ Ã¨ alto il numero, migliore Ã¨ il propellente.\\n  this.propellente = 3;\\n  // Campo per il numero di missili della torretta antiterrestre.\\n  this.numeroMissili = 10;\\n  // Tipologia di munizione.\\n  // PuÃ² essere \\"massima_efficacia\\" oppure \\"massima_esplosione\\".\\n  this.tipoMunizione = \\"massima_esplosione\\";\\n//###END_MODIFICABILE###\\n}","aiutoUtilizzato":"false"},{"nomeFile":"CaricamentoArma.js","codice":"/**********\\nFile di creazione delle batterie antiterrestri.\\nRicordiamo che Ã¨ necessario autenticarsi in seguito a qualunque modifica.\\n**********/\\n\\nvar inizializzaBatteriaAntiterrestri = function () {\\n//###START_MODIFICABILE###\\n  // Variabile contenente la batteria antiterrestre\\n  // di tipo standard.\\n  var batteria = new ArmaNemicaSabotata();\\n  return batteria;\\n//###END_MODIFICABILE###\\n}","aiutoUtilizzato":"false"},{"nomeFile":"HackingPassword.js","codice":"/**********\\nCiao, caro.\\nNella funzione generaPassword() hai un esempio di funzione ricorsiva per il calcolo della password necessaria per salvare le modifiche.\\nQuesto codice prova ad indovinare la password generando tutte le combinazioni possibili dei caratteri ''A'', ''B'' e ''C''.\\nNella funzione hackingPassword() queste combinazioni vengono mandate al server centrale del Nemico, continuando finchÃ© non viene approvata una delle combinazioni.\\nSpero di non aver fatto errori.\\nSaluti,\\nZurlin\\n**********/\\n\\n// Simboli utilizzati per la password.\\nvar simboli = [''A'', ''B'', ''C''];\\n/**********\\nFunzione per la generazione di tutte le password possibili.\\nProvo tutti i simboli per la prima cifra:\\n    - A * *\\n    - B * * \\n    - C * *\\nA questo punto il gioco Ã¨ fatto: per le restanti cifre * * ripeto la stessa procedura come se volessi generare tutte le combinazioni di una password di lunghezza 2:\\n    - A * * -> A A *\\n            -> A B *\\n            -> A C *\\ne cosÃ¬ via... \\n**********/\\nvar generaPassword = function ( combinazioniPossibili, combinazione, k ) {\\n  var combinazione = copiaArray( combinazione );\\n  // k indica il numero della cifra che si sta cercando di indovinare\\n//###START_MODIFICABILE###\\n//###END_MODIFICABILE###\\n//###START_MODIFICABILE###\\n//###END_MODIFICABILE###\\n//###START_MODIFICABILE###\\n  if (k === 3) {\\n//###END_MODIFICABILE###\\n    combinazioniPossibili.push( combinazione );\\n  }\\n  else {\\n  \\tvar i = 0;\\n    for( i; i < 3; i++ ) {\\n      combinazione[ k ] = simboli[ i ];\\n      generaPassword( combinazioniPossibili, combinazione, k + 1 );\\n    }\\n  }\\n}\\n\\n// Funzione per il test delle combinazioni.\\nvar hackingPassword = function () {\\n  var combinazioniPossibili = [];\\n  // Variabile con la combinazione di partenza.\\n  var combinazione = [''*'', ''*'', ''*''];\\n  // Chiamata alla funzione di generazione delle password,\\n  // che inserisce tutte quelle possibili nella variabile\\n  // combinazioniPossibili.\\n  generaPassword( combinazioniPossibili, combinazione, 0 );\\n  \\n  var hacking = false;\\n  // Questo ciclo scorre tutte le combinazioni\\n  // e le manda una ad una al server del Nemico.\\n  for ( var i = 0; i < combinazioniPossibili.length; ++i ) {\\n    // Qui viene chiamata la funzione per il test della password.\\n    hacking = autenticazioneOperatoreNonTerrestre( combinazioniPossibili[ i ] );\\n    // Se la password Ã¨ corretta, usciamo dal ciclo.\\n    if ( hacking === true ) {\\n      break;\\n    }\\n  }\\n  return hacking;\\n}","aiutoUtilizzato":"false"}]}', 1, 750, 11, 0, 27, 3, 1, 200);
INSERT INTO `livello_eseguito` (`email`, `idlivello`, `file_virtuali_aggiornati`, `ondate`, `punteggio`, `missili_abbattuti`, `minacce_abbattute`, `missili_lanciati`, `missili_rimasti`, `torrette_salvate`, `morti`) VALUES
('munic@mazma.it', 5, '{"fileVirtuali":[{"nomeFile":"ConfigTorrettaSx.js","codice":"/**********\\nBenvenuto nel file di configurazione della torretta sinistra del sistema Hob-2000.\\nOgni torretta contiene tre variabili fondamentali: l''energia per il compressore del gas di propulsione, l''energia per lo spostamento del cannone e la pressione del carburante del missile.\\nCambiare queste configurazioni solo se si notano malfunzionamenti nel meccanismo di sparo delle torrette.\\n**********/\\n\\n// Classe della torretta sinistra\\nfunction TorrettaSinistra ( magazzino, caricatore, compressore, generatore, mirino ) {\\n  this.magazzino = magazzino;\\n  this.mirino = mirino;\\n  this.generatore = generatore;\\n  this.caricatore = caricatore;\\n  this.compressore = compressore;\\n}\\n\\n// Funzione per il caricamento del missile.\\nTorrettaSinistra.prototype.caricaMissile = function () {\\n  for ( i = 0; i < this.magazzino.length; ++i ) {\\n    this.caricatore.immagazzinaMissile( this.magazzino[i], this.generatore );\\n  }\\n}\\n\\n// Funzione per lo spostamento del cannone.\\nTorrettaSinistra.prototype.mira = function ( x, y, energiaFornita ) {\\n  this.mirino.spostaMirino( x, y, energiaFornita, this.generatore );\\n}\\n\\n// Funzione per lo sparo.\\nTorrettaSinistra.prototype.spara = function ( x, y ) {\\n//###START_MODIFICABILE###\\n  // Variabile contenente l''energia del compressore del gas di propulsione.\\n  var energiaCompressore = 30;\\n  // Variabile contenente l''energia per lo spostamento del cannone.\\n  var energiaMirino = 10;\\n  // Variabile contenente la pressione del carburante del missile.\\n  var pressioneCarburante = 15;\\n//###END_MODIFICABILE###\\n  var missile = this.caricatore.caricaProiettile( this.generatore );  \\n  this.compressore.aumentaPressione( missile.combustibile, pressioneCarburante, \\n    energiaCompressore, this.generatore );\\n  this.mira( x, y, energiaMirino );\\n  this.caricatore.innescaFuoco( missile, this.compressore, this.generatore );\\n}","aiutoUtilizzato":"false"},{"nomeFile":"ConfigTorrettaCentro.js","codice":"/**********\\nBenvenuto nel file di configurazione della torretta centrale del sistema Hob-2000.\\nOgni torretta contiene tre variabili fondamentali: l''energia per il compressore del gas di propulsione, l''energia per lo spostamento del cannone e la pressione del carburante del missile.\\nCambiare queste configurazioni solo se si notano malfunzionamenti nel meccanismo di sparo delle torrette.\\n**********/\\n\\n// Classe della torretta centrale.\\nfunction TorrettaCentrale ( magazzino, caricatore, compressore, generatore, mirino ) {\\n  this.magazzino = magazzino;\\n  this.mirino = mirino;\\n  this.generatore = generatore;\\n  this.caricatore = caricatore;\\n  this.compressore = compressore;\\n}\\n\\n// Funzione per il caricamento del missile.\\nTorrettaCentrale.prototype.caricaMissile = function () {\\n  for ( i = 0; i < this.magazzino.length; ++i ) {\\n    this.caricatore.immagazzinaMissile( this.magazzino[i], this.generatore );\\n  }\\n}\\n\\n// Funzione per lo spostamento del cannone.\\nTorrettaCentrale.prototype.mira = function ( x, y, energiaFornita ) {\\n  this.mirino.spostaMirino( x, y, energiaFornita, this.generatore );\\n}\\n\\n// Funzione per lo sparo.\\nTorrettaCentrale.prototype.spara = function ( x, y ) {\\n//###START_MODIFICABILE###\\n  // Variabile contenente l''energia del compressore del gas di propulsione.\\n  var energiaCompressore = 30;\\n  // Variabile contenente l''energia per lo spostamento del cannone.\\n  var energiaMirino = 10;\\n  // Variabile contenente la pressione del carburante del missile.\\n  var pressioneCarburante = 15;\\n//###END_MODIFICABILE###\\n  var missile = this.caricatore.caricaProiettile( this.generatore );\\n  this.compressore.aumentaPressione( missile.combustibile, pressioneCarburante, \\n    energiaCompressore, this.generatore );\\n  this.mira( x, y, energiaMirino );\\n  this.caricatore.innescaFuoco( missile, this.compressore, this.generatore );\\n}","aiutoUtilizzato":"false"},{"nomeFile":"ConfigTorrettaDx.js","codice":"/**********\\nBenvenuto nel file di configurazione della torretta destra del sistema Hob-2000.\\nOgni torretta contiene tre variabili fondamentali: l''energia per il compressore del gas di propulsione, l''energia per lo spostamento del cannone e la pressione del carburante del missile.\\nCambiare queste configurazioni solo se si notano malfunzionamenti nel meccanismo di sparo delle torrette.\\n**********/\\n\\n// Classe della torretta destra\\nfunction TorrettaDestra ( magazzino, caricatore, compressore, generatore, mirino ) {\\n  this.magazzino = magazzino;\\n  this.mirino = mirino;\\n  this.generatore = generatore;\\n  this.caricatore = caricatore;\\n  this.compressore = compressore;\\n}\\n\\n// Funzione per il caricamento del missile.\\nTorrettaDestra.prototype.caricaMissile = function () {\\n  for ( i = 0; i < this.magazzino.length; ++i ) {\\n    this.caricatore.immagazzinaMissile( this.magazzino[i], this.generatore );\\n  }\\n}\\n\\n// Funzione per lo spostamento del cannone.\\nTorrettaDestra.prototype.mira = function ( x, y, energiaFornita ) {\\n  this.mirino.spostaMirino( x, y, energiaFornita, this.generatore );\\n}\\n\\n// Funzione per lo sparo.\\nTorrettaDestra.prototype.spara = function ( x, y ) {\\n//###START_MODIFICABILE###\\n  // Variabile contenente l''energia del compressore del gas di propulsione.\\n  var energiaCompressore = 30;\\n  // Variabile contenente l''energia per lo spostamento del cannone.\\n  var energiaMirino = 10;\\n  // Variabile contenente la pressione del carburante del missile.\\n  var pressioneCarburante = 15;\\n//###END_MODIFICABILE###\\n  var missile = this.caricatore.caricaProiettile( this.generatore );\\n  this.compressore.aumentaPressione( missile.combustibile, pressioneCarburante, \\n    energiaCompressore, this.generatore );\\n  this.mira( x, y, energiaMirino );\\n  this.caricatore.innescaFuoco( missile, this.compressore, this.generatore );\\n}","aiutoUtilizzato":"false"}]}', 1, 1000, 19, 0, 30, 0, 1, 220),
('munic@mazma.it', 6, '{"fileVirtuali":[{"nomeFile":"MacchinettaCaffe.js","codice":"/**********\\nFunzione che abilita il click del mouse per azionare la macchinetta del caffÃ¨.\\nQuesta funzione potrebbe essere d''ispirazione per altri scopi...\\n**********/\\nvar azionaMacchinaCaffeConClick = function ( pulsantieraMacchinaCaffe ) {\\n  // Comandi plancia azionati da click del mouse, notare il ''click''\\n  $( pulsantieraMacchinaCaffe ).bind( ''click'', function ( eventoClick ) {\\n    // Questa parte di codice si attiva quando si clicca\\n    macchinaCaffe.faiIlCaffe();\\n  } );\\n}","aiutoUtilizzato":"false"},{"nomeFile":"TrovaTorrettaMigliore.js","codice":"/**********\\nFunzione che date le coordinate del bersaglio determina la torretta migliore, e funzionante, per colpire il bersaglio.\\n\\nQuesta funzione prende come parametri:\\n  - torretta: un array di torrette;\\n  - x: un intero che rappresenta la coordinata x;\\n  - y: un intero che rappresenta la coordinata y;\\nQuesta funzione restituisce la torretta migliore.\\n**********/\\nvar torrettaPiuVicina = function ( torrette, x, y ) {\\n  /** Funzione che restituisce true (vero) o false (falso)\\n  nel caso in cui la torretta sia o meno funzionante. */\\n  var torrettaNonFunzionante = function ( torretta ) {\\n    if( torretta.stato === BatteriaAntimissile.ATTIVA &&\\n        torretta.numeroMissili > 0 &&\\n        torretta.blocco === false )\\n      return false;\\n    else\\n      return true;\\n  } \\n  \\n  var torrettaSelezionata;\\n  if( 0 <= x && x < 170 ) {\\n    torrettaSelezionata = torrette[0];\\n  }\\n  if( 170 <= x && x < 340 ) {\\n    torrettaSelezionata = torrette[1];\\n  }\\n  if( 340 <= x && x <= 510 ) {\\n    torrettaSelezionata = torrette[2];\\n  }\\n  \\n  if( torrettaNonFunzionante(torrettaSelezionata) )\\n    torrettaSelezionata = torrette[1];\\n  if( torrettaNonFunzionante(torrettaSelezionata) )\\n    torrettaSelezionata = torrette[0];\\n  if( torrettaNonFunzionante(torrettaSelezionata) )\\n    torrettaSelezionata = torrette[2];\\n  \\n  return torrettaSelezionata;\\n}","aiutoUtilizzato":"false"},{"nomeFile":"AzionamentiPlanciaComandi.js","codice":"/**********\\nFunzione che abilita i comandi della plancia. Attualmente prendo i tasti 1, 2, 3 sulla tastiera si fa fuoco con la torretta rispettivamente sinistra, centrale e destra.\\nIl comando click Ã¨ abilitato ma non funzionante.\\n\\nLa funzione prende come parametri:\\n  - planciaComandi: classe che legge i comandi attivati;\\n  - torrette: array di torrette controllate;\\n  - mirino: classe che rappresenta il sistema di puntamento, restituisce\\n    le coordinate in cui Ã¨ attualmente tramite mirino.x() e mirino.y();\\n  - sistema: Ã¨ il sistema missilistico a cui sono rivolti i comandi.\\n**********/\\nvar azionamentoComandiPlancia = function ( planciaComandi, torrette, mirino, sistema ) {\\n  // Comandi plancia azionati da tastiera, sostituire con click mouse ed inserire selezione automatica torretta.\\n//###START_MODIFICABILE###\\n  $( planciaComandi ).bind( ''click'', function ( evento ) {\\n    // Selezione coordinate a cui sparare\\n    var x = mirino.x;\\n    var y = mirino.y;\\n  \\n    // Selezione della torretta corrispondente, \\"which\\" significa \\"quale\\" in inglese\\n//###END_MODIFICABILE###\\n//###START_MODIFICABILE###\\n//###END_MODIFICABILE###\\n//###START_MODIFICABILE###\\n    var torrettaSelezionata = torrettaPiuVicina(torrette, x, y);\\n    \\n    // Lancio del missile\\n    azionaComandoSparo( torrettaSelezionata, sistema, x, y );\\n  } );\\n//###END_MODIFICABILE###\\n}","aiutoUtilizzato":"false"}]}', 1, 1050, 28, 0, 38, -8, 1, 330),
('munic@mazma.it', 7, '{"fileVirtuali":[{"nomeFile":"MissileTestataMultipla.js","codice":"/**********\\nCiao, caro.\\nQuesto Ã¨ un esempio di come Ã¨ implementato il missile a testata multipla.\\nUsalo pure per migliorare i missili standard terrestri.\\nSaluti,\\nZurlin\\n**********/\\n\\n// Classe esempio di missili sdoppiabili \\nfunction MissileTestataMultipla ( ) {\\n  this.obiettivoAgganciato;\\n} \\n\\n// Funzione per identificare l''obiettivo del missile.\\n// Assomiglia alla funzione miraBersaglio() del missile standard!\\nMissileTestataMultipla.prototype.identificaObiettivo = function ( obiettivi ) {\\n  // Esempio obiettivo = { x: 315, y: 145, tipo: \\"terrestre\\" }\\n  for( var i = 0; i < obiettivi.length; ++i ) {\\n    var obiettivo = obiettivi[i];\\n    if( obiettivo.tipo === \\"terrestre\\" ) {\\n      var x = obiettivo.x;\\n      var y = obiettivo.y;\\n  \\n      // Vengono memorizzare le coordinate del bersaglio.\\n      this.agganciaBersaglio( obiettivo );\\n      \\n      // Viene restituita l''altezza alla quale il missile detona e si sdoppia.\\n      var altezzaEsplosione = this.calcolaAltezzaSdoppiamento( y );\\n      return altezza;\\n    }\\n  }\\n}\\n\\n// Funzione per il calcolo della quota di sdoppiamento del missile.\\nMissileTestataMultipla.prototype.calcolaAltezzaSdoppiamento = function ( y ) {\\n  return ( Math.abs(430 - y) / 2 ) + y;\\n}\\n\\n// Funzione per agganciare l''obiettivo del missile.\\nMissileTestataMultipla.prototype.agganciaObiettivo = function ( obiettivo ) {\\n  this.obiettivoAgganciato = obiettivo;\\n}\\n\\n// Funzione di detonazione del missile doppio.\\n// Come puoi notare il missile si divide in due frammenti.\\n// Assomiglia alla funzione esplodi() del missile standard!\\nMissileTestataMultipla.prototype.detonazione = function ( ) {\\n  // this.obiettivo.x + 10 e this.obiettivo.x - 10\\n  // permette di indirizzare il missile in due punti diversi,\\n  // uno a 10 unitÃ  a destra del bersaglio del missile originale\\n  // ed uno a 10 unitÃ  a sinistra del bersaglio del missile originale.\\n  var frammentoMissile1 = new FrammentoMissile( this.obiettivo.x + 10, this.obiettivo.y );\\n  var frammentoMissile2 = new FrammentoMissile( this.obiettivo.x - 10, this.obiettivo.y );\\n  // Variabile che contiene i frammenti del missile.\\n  var frammentiMissile = [];\\n  frammentiMissile.push( frammentoMissile1 );\\n  frammentiMissile.push( frammentoMissile2 );\\n  \\n  return frammentiMissile;\\n}","aiutoUtilizzato":"false"},{"nomeFile":"MissileStandard.js","codice":"/**********\\nBenvenuto nel file di configurazione missili standard del sistema Hob-2000.\\nIn questo codice Ã¨ possibile modificare diverse proprietÃ  dei missili, in particolare i bersagli mirati, gli obiettivi agganciati e l''esplosione.\\n**********/\\n\\n// Classe che identifica il missile standard terrestre.\\nfunction MissileStandard ( ) { \\n  this.bersaglioAgganciato;\\n}\\n\\n// Funzione di identificazione del bersaglio\\nMissileStandard.prototype.miraBersaglio = function ( listaBersagli ) {\\n  // bersaglio = { appartieneNemico: true, x: 530, y: 95 }\\n  \\n  var numeroBersagli = listaBersagli.length;\\n  var i = 0;\\n  // Ciclo per la selezione dei bersagli di sparo.\\n  while( i <  numeroBersagli ) {\\n//###START_MODIFICABILE###\\n    var bersaglio = listaBersagli[i];\\n    if( bersaglio.appartieneNemico === true ) {\\n      var x = bersaglio.x;\\n      var y = bersaglio.y;\\n    \\n      this.agganciaObiettivo( bersaglio );\\n      \\n      // Altezza a cui avviene l''esplosione.\\n      var altezzaEsplosione = ( Math.abs(430 - y) / 2 ) + y;\\n      return altezzaEsplosione;\\n//###END_MODIFICABILE###\\n    }\\n    ++i;\\n  }\\n}\\n\\n// Funzione di aggancio del bersaglio.\\nMissileStandard.prototype.agganciaObiettivo = function ( bersaglio ) {\\n  this.bersaglioAgganciato = bersaglio;\\n}\\n\\n// Funzione di esplosione del missile standard.\\nMissileStandard.prototype.esplodi = function ( ) {\\n//###START_MODIFICABILE###\\n  var frammentoMissile1 = new FrammentoMissile( this.bersaglioAgganciato.x + 10, this.bersaglioAgganciato.y );\\n  var frammentoMissile2 = new FrammentoMissile( this.bersaglioAgganciato.x - 10, this.bersaglioAgganciato.y );\\n  var frammentiMissile = [];\\n  frammentiMissile.push( frammentoMissile1 );\\n  frammentiMissile.push( frammentoMissile2 );\\n  \\n  return frammentiMissile;\\n//###END_MODIFICABILE###\\n}","aiutoUtilizzato":"false"}]}', 3, 4800, 199, 0, 73, 17, 3, 570),
('munic@mazma.it', 8, '{"fileVirtuali":[{"nomeFile":"TrasmissioniRadio.js","codice":"/**********\\nFunzione che invia i messaggi da parte delle basi sul mezzo di comunicazione.\\nIl mezzo di comunicazione Ã¨ un array di 6 elementi chiamato \\"canaliTrasmissione\\" aventi struttura: { idRadio: \\"AX1\\", messaggio: \\"[00:12] Questo Ã¨ un messaggio di prova\\" }.\\nI messaggi provenienti dalla base numero 0, ossia quella piÃ¹ a destra, vengono inseriti nel canaliTrasmissione[0] e cosÃ¬ via...\\n\\nQuesta funzione ritorna i \\"canaliTrasmissione\\" caricati con messaggi e identificatori radio opportunatamente mescolati per confondere il nemico tramite \\"mescolaCanali()\\".\\n**********/\\nfunction spedisciMessaggiBasi ( ) {  \\n  var messaggi = [];\\n  messaggi[0] = \\"[21:06] Parla base BX0, ci serve immediato aiuto, siamo sotto attacco!\\";\\n  messaggi[1] = \\"[21:04] Parla base AX1, ci serve immediato aiuto, siamo sotto attacco!\\";\\n  messaggi[2] = \\"[21:02] Parla base BX2, ci serve immediato aiuto, siamo sotto attacco!\\";\\n  messaggi[3] = \\"[21:08] Parla base AX3, ci serve immediato aiuto, siamo sotto attacco!\\";\\n  messaggi[4] = \\"[21:01] Parla base BX4, ci serve immediato aiuto, siamo sotto attacco!\\";\\n  messaggi[5] = \\"[21:02] Parla base AX5, ci serve immediato aiuto, siamo sotto attacco!\\";\\n  \\n  var canaliTrasmissione = [];\\n  canaliTrasmissione[0] = { idRadio: \\"BX0\\", messaggio: messaggi[0] };\\n  canaliTrasmissione[1] = { idRadio: \\"AX1\\", messaggio: messaggi[1] };\\n  canaliTrasmissione[2] = { idRadio: \\"BX2\\", messaggio: messaggi[2] };\\n  canaliTrasmissione[3] = { idRadio: \\"AX3\\", messaggio: messaggi[3] };\\n  canaliTrasmissione[4] = { idRadio: \\"BX4\\", messaggio: messaggi[4] };\\n  canaliTrasmissione[5] = { idRadio: \\"AX5\\", messaggio: messaggi[5] };\\n  \\n  // I canali di trasmissione vengono mescolati per confondere il nemico.\\n  mescolaCanali( canaliTrasmissione );\\n  \\n  return canaliTrasmissione;\\n}\\n\\n/**********\\nFunzione che riceve i messaggi dai canali di tramissione e li smista alle relative basi.\\ncanaliTrasmissione Ã¨ un array di 6 elementi aventi struttura: { idRadio: \\"AX1\\", messaggio: \\"[00:12] Questo Ã¨ un messaggio di prova\\" }.\\n**********/\\nfunction riceviMessaggiBasi ( canaliTrasmissione ) { \\n  // Vengono riordinati i canali di trasmissione per consentire la corretta ricezione\\n  riordinaCanali( canaliTrasmissione );\\n    \\n  var messaggiRicevuti = [];\\n  messaggiRicevuti[0] = canaliTrasmissione[0].messaggio;\\n  messaggiRicevuti[1] = canaliTrasmissione[1].messaggio;\\n  messaggiRicevuti[2] = canaliTrasmissione[2].messaggio;\\n  messaggiRicevuti[3] = canaliTrasmissione[3].messaggio;\\n  messaggiRicevuti[4] = canaliTrasmissione[4].messaggio;\\n  messaggiRicevuti[5] = canaliTrasmissione[5].messaggio;\\n  return messaggiRicevuti;\\n}","aiutoUtilizzato":"false"},{"nomeFile":"identificaBersagliPrioritari.js","codice":"/**********\\nCiao, caro.\\nQuesta funzione Ã¨ utilizzata dal vostro Nemico per determinare i bersagli terrestri da colpire. \\nCome puoi notare vengono colpite prima le basi il cui canale di trasmissione contiene\\nl''identificatore radio \\"AX\\".\\nSpero ti sia utile,\\nZurlin\\n**********/\\nvar determinaBersagliDaColpire = function ( canaleTrasmissione ) {\\n  var bersagliPrioritari = [];\\n  \\n  // Ecco come vengono identificate le basi vitali dal nemico\\n  for( var i = 0; i < canaleTrasmissione.length; ++i ) {\\n    if( c.idRadio[0] === \\"A\\" && c.idRadio[1] === \\"X\\" )\\n      bersagliPrioritari.push( basi[i] );\\n  }\\n  \\n  return bersagliPrioritari;\\n}","aiutoUtilizzato":"false"},{"nomeFile":"Decoder.js","codice":"/**********\\nQuesto Ã¨ il file per scrivere il codice delle funzioni di codifica e decodifica.\\nFanne buon uso.\\n/\\\\/\\\\/\\\\ Gen. Ortiz /\\\\/\\\\/\\\\\\n**********/\\n\\n/**********\\nFunzione per il mescolamento dei canali di trasmissione per confondere il nemico.\\nPrende come input un array di 6 elementi chiamato \\"canaliTrasmissione\\" aventi struttura: { idRadio: \\"AX1\\", messaggio: \\"[00:12] Questo Ã¨ un messaggio di prova\\" }.\\n\\nQuesta funzione deve mescolare i canali di trasmissione in modo tale che ad una base vitale sia associato il canale di tramissione di una base non vitale. Il nemico colpirÃ  con prioritÃ  quest''ultima ignorando l''altra.\\nEsempio:\\n  base in posizione 0 (non vitale) ---> canale 0\\n  base in posizione 1 (vitale)     ---> canale 1\\n  \\n  Invertendo il canale 0 con il canale 1 il nemico crederÃ  che la base non vitale occupi la posizione 1 mentre quella vitale la 0.\\n**********/\\nvar mescolaCanali = function ( canaleTrasmissione ) {\\n//###START_MODIFICABILE###\\n  var t;\\n  t=canaleTrasmissione[1];\\n  canaleTrasmissione[1] = canaleTrasmissione[0];\\n  canaleTrasmissione[0] = t;\\n\\n  t=canaleTrasmissione[3];\\n  canaleTrasmissione[3] = canaleTrasmissione[2];\\n  canaleTrasmissione[2] = t;\\n\\n  t=canaleTrasmissione[5];\\n  canaleTrasmissione[5] = canaleTrasmissione[4];\\n  canaleTrasmissione[4] = t;\\n//###END_MODIFICABILE###\\n}\\n\\n\\n/**********\\nFunzione per il riordinamento dei canali di tramissione a seguito del mescolamento per confondere il nemico.\\nPrende come input un array di 6 elementi chiamato \\"canaliTrasmissione\\" aventi struttura: { idRadio: \\"AX1\\", messaggio: \\"[00:12] Questo Ã¨ un messaggio di prova\\" }.\\n**********/\\nvar riordinaCanali = function ( canaleTrasmissione ) {\\n//###START_MODIFICABILE###\\n//###END_MODIFICABILE###\\n//###START_MODIFICABILE###\\n//###END_MODIFICABILE###\\n//###START_MODIFICABILE###\\n  mescolaCanali (canaleTrasmissione)\\n//###END_MODIFICABILE###\\n}","aiutoUtilizzato":"false"}]}', 1, 1450, 26, 0, 28, 2, 1, 110),
('munic@mazma.it', 9, '{"fileVirtuali":[{"nomeFile":"ComandoSparoSingolo.js","codice":"/**********\\nFunzione che comanda ad una torretta, scelta opportunamente, di lanciare un missile alla coordinata indicata.\\n\\nPrende come parametri:\\n  - x: intero che indentifica la coordinata x del bersaglio;\\n  - y: intero che indentifica la coordinata y del bersaglio;\\n  - torrette: array di torrette.\\n**********/\\nvar comandoSparoSingolo = function ( x, y, torrette ) {\\n  var indiceTorretta = sceltaTorrettaMigliore( x, y, torrette );\\n  if( indiceTorretta !== undefined ) {\\n    var torretta = torrette[indiceTorretta];\\n    torretta.cicloSparo( x, y );\\n  }\\n}","aiutoUtilizzato":"false"},{"nomeFile":"ComandoSparoMultiplo.js","codice":"/**********\\nFunzione che comanda a tutte le torrette di sparare missili lungo una linea creando uno sbarramento di fuoco in cielo.\\n\\nPrende come parametri:\\n  - ordiniDiFuoco: un array di strutture { numeroTorretta: 0, x: 416, y: 188 } dove x ed y sono le coordinate a cui sparare mentre numeroTorretta rappresenta l''identificatore della torretta a cui Ã¨ diretto l''ordine;\\n  - torrette: array di oggetti torretta le quali possiedono un indice ( torretta.indice ) e consentono lo sparo tramite il metodo torretta.cicloSparo().\\n    \\nObiettivo della funzione Ã¨ far sparare le torrette in accordo con gli ordini contenuti in ordiniDiFuoco.\\n**********/\\nvar comandoSparoMultiplo = function ( ordiniDiFuoco, torrette ) {\\n//###START_MODIFICABILE###\\n  var indiceTorretta = sceltaTorrettaMigliore( x, y, torrette );\\n  if( indiceTorretta !== undefined ) {\\n    var torretta = torrette[indiceTorretta];\\n//###END_MODIFICABILE###\\n//###START_MODIFICABILE###\\n//###END_MODIFICABILE###\\n//###START_MODIFICABILE###\\n    torretta.ordiniDiFuoco( x, y );\\n  }\\n//###END_MODIFICABILE###\\n}","aiutoUtilizzato":"false"}]}', 1, 1700, 31, 0, 28, 2, 1, 200),
('sx@c.it', 1, '', 0, 0, 0, 0, 0, 0, 0, 0),
('x.b@h.it', 1, '', 0, 0, 0, 0, 0, 0, 0, 0),
('xxx@hotmail.tv', 1, '{"fileVirtuali":[{"nomeFile":"Benvenuto.hob","codice":"/*\\n __   __  _______  _______         _______  _______  _______  _______ \\n|  | |  ||       ||  _    |       |       ||  _    ||  _    ||  _    |\\n|  |_|  ||   _   || |_|   | ____  |____   || | |   || | |   || | |   |\\n|       ||  | |  ||       ||____|  ____|  || | |   || | |   || | |   |\\n|       ||  |_|  ||  _   |        | ______|| |_|   || |_|   || |_|   |\\n|   _   ||       || |_|   |       | |_____ |       ||       ||       |\\n|__| |__||_______||_______|       |_______||_______||_______||_______|\\nQuesto file Ã¨ stato generato automaticamente dal sistema antimissilistico\\nHOB-2000.\\n\\n\\nBuongiorno, sono il sistema antimissilistico HOB-2000, per comunicarvi che\\nl''autenticazione automatica Ã¨ fallita. Se proprio desiderate procedere, avete la possibilitÃ  di utilizzare l''autenticazione manuale.\\n\\nGrazie per aver scelto HOB-2000.\\nCopyright (C) 4096 Orsa Minore Software Inc. - Tutti i diritti riservati\\nÃˆ possibile utilizzare, distribuire o modificare questo file secondo i termini della licenza galattica GGPA-DA1979, che sfortunatamente non verrÃ  scritta se non nel prossimo secolo.\\n*/","aiutoUtilizzato":"false"},{"nomeFile":"AutenticazioneManuale.js","codice":"/**********\\nIl codice seguente permette l''autenticazione manuale di un operatore, tramite la creazione di una parola di accesso ottenuta dalla concatenazione di piÃ¹ stringhe.\\nATTENZIONE! Utilizzare solo in caso di fallimento dell''autenticazione automatica.\\n\\nInserire il proprio nome utente nella variabile \\"nome\\", la propria matricola nella variabile \\"matricola\\" e la propria password nella variabile \\"password\\".\\nCreare poi la corretta stringaAccesso, utilizzando la concatenazione di variabili che contengono una stringa.\\n**********/\\n\\n/* /\\\\/\\\\/\\\\ Gen. Ortiz /\\\\/\\\\/\\\\\\nSe hai bisogno di ricordarti cosa devi fare, controlla la sezione \\"Obiettivo\\" corrispondente al nome di questo file, presente sulla tua plancia di comando.*/\\nvar autenticazioneManuale = function () {\\n//###START_MODIFICABILE###\\n  // Ricorda: il simbolo = permette di assegnare il valore alla variabile.\\n  var nome = \\"Cpt Simeoni\\";\\n  var matricola = 150716;\\n  var password = \\"utf-8_tuono\\";\\n  // Ricorda: il simbolo + tra due variabili di tipo stringa indica la loro concatenazione.\\n  var stringaAccesso = nome + \\"%\\" + matricola + \\"<\\" + password + \\">\\";\\n//###END_MODIFICABILE###\\n  \\n  return [nome, matricola, password, stringaAccesso];\\n}","aiutoUtilizzato":"false"},{"nomeFile":"VerificaCervello.js","codice":"/**********\\nIl codice che segue Ã¨ necessario per verificare la presenza di un operatore umano.\\nIl quesito posto Ã¨ semplice: la variabile \\"areaRettangolo\\" deve contenere la corretta formula per il calcolo dell''area di un rettangolo.\\n**********/\\nvar verificaPresenzaCervelloOperatore = function ( base, altezza ) {\\n//###START_MODIFICABILE###\\n  var areaRettangolo = base * altezza;\\n//###END_MODIFICABILE###\\n  return areaRettangolo;\\n}","aiutoUtilizzato":"false"}]}', 1, 1000, 11, 0, 22, 8, 1, 130),
('xxx@hotmail.tv', 2, '{"fileVirtuali":[{"nomeFile":"PermessiCalibrazione.js","codice":"/**********\\nBenvenuto nel file di sblocco dei permessi di calibrazione.\\nIl seguente file permette di sbloccare ed accedere alle funzionalitÃ  di configurazione planetaria, fondamentali per la corretta impostazione delle armi.\\n**********/\\n\\n// Variabile contenente il codice del pianeta su cui si trovano le armi.\\nvar _codicePianeta;\\n\\n// Codice per lo sblocco dei permessi di calibrazione,\\n// contenente anche lo sblocco di configurazione planetaria.\\n// Attenzione! Senza lo sblocco della calibrazione attiva,\\n// non sarÃ  possibile attivare la configurazione planetaria.\\nvar sbloccoPermessiCalibrazione = function () {\\n//###START_MODIFICABILE###\\n  // Variabile di sblocco del sistema di calibrazione.\\n  var sbloccoCalibrazione = true;\\n//###END_MODIFICABILE###\\n  var accessoConfigurazionePianeti = false;\\n  // Variabili contenenti i codici planetari.\\n  var codiceTerra = 1;\\n  var codiceBastiani = 2;\\n  var codiceColombre = 3;\\n  var codiceButtafuoco = 4;\\n  var codiceBarnabo = 5;\\n  var codiceBuzzati = 6;\\n  \\n  if ( sbloccoCalibrazione === true ) {\\n    accessoConfigurazionePianeti = true;\\n  }\\n//###START_MODIFICABILE###\\n  // Attenzione! Modificare solo se il pianeta desiderato non Ã¨ quello di default.\\n  if ( accessoConfigurazionePianeti === false ) {\\n//###END_MODIFICABILE###\\n    _codicePianeta = codiceTerra;\\n  } else {\\n    // Assegnare alla variabile il codice del pianeta desiderato.\\n    _codicePianeta = codiceBastiani;\\n  }\\n  \\n  return [sbloccoCalibrazione, accessoConfigurazionePianeti, _codicePianeta]\\n}","aiutoUtilizzato":"false"},{"nomeFile":"ConfigPlanetaria.js","codice":"/**********\\nBenvenuto nel file di configurazione planetaria del sistema Hob-2000.\\nTroverai in elenco le caratteristiche di ogni pianeta, necessarie per il corretto funzionamento del sistema stesso.\\nOgni pianeta ha cinque caratteristiche: il nome, la forza gravitazionale, il vento, l''atmosfera e il settore galattico.\\nTali caratteristiche influiscono pesantemente sulle capacitÃ  di sparo, rendendo potenzialmente inutilizzabili le armi se configurate per il pianeta errato.\\n**********/\\n\\nvar configurazioneParametriPianeti = function () {\\n  var nomePianeta;\\n  var forzaGravitazionale;\\n  var vento;\\n  var atmosfera;\\n  var settoreGalattico;\\n  console.log(\\"Il codice del pianeta selezionato Ã¨: \\" + _codicePianeta);  \\n//###START_MODIFICABILE###\\n  if ( _codicePianeta === 1 ) {\\n//###END_MODIFICABILE###\\n    nomePianeta = \\"Terra\\";\\n    forzaGravitazionale = 1;\\n    vento = 1;\\n    atmosfera = \\"respirabile\\";\\n    settoreGalattico = 0;\\n//###START_MODIFICABILE###\\n  } else if ( _codicePianeta === 6 ) {\\n//###END_MODIFICABILE###\\n    nomePianeta = \\"Buzzati\\";\\n    forzaGravitazionale = 2;\\n    vento = 19.06;\\n    atmosfera = \\"respirabile\\";\\n    settoreGalattico = 5;\\n//###START_MODIFICABILE###\\n  } else if ( _codicePianeta === 3 ) {\\n//###END_MODIFICABILE###\\n    nomePianeta = \\"Colombre\\";\\n    forzaGravitazionale = 0.5;\\n    vento = 0.7;\\n    atmosfera = \\"non_respirabile\\";\\n    settoreGalattico = 6;\\n//###START_MODIFICABILE###\\n  } else if ( _codicePianeta === 4 ) {\\n//###END_MODIFICABILE###\\n    nomePianeta = \\"Buttafuoco\\";\\n    forzaGravitazionale = 4.5;\\n    vento = 80;\\n    atmosfera = \\"non_respirabile\\";\\n    settoreGalattico = 3;\\n//###START_MODIFICABILE###\\n  } else if ( _codicePianeta === 5 ) {\\n//###END_MODIFICABILE###\\n    nomePianeta = \\"Barnabo\\";\\n    forzaGravitazionale = 13;\\n    vento = 0;\\n    atmosfera = \\"parzialmente_respirabile\\";\\n    settoreGalattico = 1;\\n//###START_MODIFICABILE###\\n  } else if ( _codicePianeta === 2 ) {\\n//###END_MODIFICABILE###\\n    nomePianeta = \\"Bastiani\\";\\n    forzaGravitazionale = 4.2;\\n    vento = 23;\\n    atmosfera = \\"respirabile\\";\\n    settoreGalattico = 7;\\n    // /\\\\/\\\\/\\\\ Â£Nos****KnÂ£$%BsorJOJSONHbooooooLK666dbw**\\n    // **&fgHJS666&78765&4%4$$LÂ£sC&GSTntadjr /\\\\/\\\\/\\\\\\n  } else if ( _codicePianeta === \\"00110111\\" ) {\\n    nomePianeta = \\"01000001 01101110 01100111 01110101 01110011 01110100 01101001 01101110 01100001\\";\\n    forzaGravitazionale = \\"00110010 00101110 00110011\\";\\n    vento = \\"01101110 01101111 01101110 01011111 01110000 01110010 01100101 01110011 01100101 01101110 01110100 01100101\\";\\n    atmosfera = \\"01110010 01100101 01110011 01110000 01101001 01110010 01100001 01100010 01101001 01101100 01100101\\";\\n    settoreGalattico = \\"00111000\\";\\n  }\\n  \\n  return [nomePianeta, forzaGravitazionale, vento, atmosfera, settoreGalattico];\\n}","aiutoUtilizzato":"false"}]}', 1, 850, 11, 0, 25, 5, 1, 230),
('xxx@hotmail.tv', 3, '{"fileVirtuali":[{"nomeFile":"CaricatoreMunizioni.js","codice":"/**********\\nBenvenuto nel file di caricamento delle torrette del sistema Hob-2000.\\nOgni torretta preleva dal magazzino i missili, uno ad uno, per inserirli automaticamente nel caricatore della torretta.\\nSe sono presenti tipologie di proiettili difettose, modificare il codice seguente.\\n**********/\\n\\n// Questo codice viene ripetuto per ogni torretta automaticamente.\\nvar meccanismoCaricamento = function ( ) {\\n  // Variabile contenente il carico del magazzino.\\n  var magazzino = prelevaCarico();\\n  var numeroMunizioniMagazzino = magazzino.length;\\n  // Array vuoti per il caricatore della torretta e\\n  // per il deposito dei missili difettosi.\\n  var caricatoreTorretta = [];\\n  var proiettiliScartati = [];\\n  \\n//###START_MODIFICABILE###\\n  for( i = 0; i < numeroMunizioniMagazzino; ++i ) {\\n    // Variabile contenente il proiettile i-esimo del magazzino.\\n    var proiettile = magazzino[i];\\n    // Se i missili al plutonio sono difettosi,\\n    // inserirli nell''array dei missili scartati.\\n    if( proiettile.nucleoEsplosivo === ''plutonio'' ) {\\n      proiettiliScartati.push( proiettile );\\n    }\\n    // Se i missili al plasma sono difettosi,\\n    // inserirli nell''array dei missili scartati.\\n    if( proiettile.nucleoEsplosivo === ''plasma'' ) {\\n      caricatoreTorretta.push( proiettile  );\\n    }\\n    // Se i missili sonici sono difettosi,\\n    // inserirli nell''array dei missili scartati.\\n    if( proiettile.nucleoEsplosivo === ''sonico'' ) {\\n      proiettiliScartati.push( proiettile );\\n    }\\n//###END_MODIFICABILE###\\n    if( caricatoreTorretta.length >= 10 )\\n      break;\\n  }\\n  return caricatoreTorretta;\\n}","aiutoUtilizzato":"false"},{"nomeFile":"SistemaRaffreddamento.js","codice":"/**********\\nBenvenuto nel file di raffreddamento torrette del sistema Hob-2000.\\nIl codice seguente permette di modificare la soglia di temperatura minima, cioÃ¨ la soglia di temperatura dalla quale Ã¨ possibile ricominciare a sparare in caso di surriscaldamento della torretta.\\n\\nQuesto codice vale per tutte le torrette.\\n**********/\\nvar sistemaRaffreddamento = function ( ) {\\n  T = rilevaTemperatura();\\n  // Variabile contenente la soglia di temperatura minima. raggiunta la quale la torretta si sblocca.\\n  var sogliaTemperaturaMinima = 500;\\n  \\n  if( T >= 799 ) {\\n//###START_MODIFICABILE###\\n    // Ciclo per la gestione delle pompe di raffreddamento.\\n    // La torretta deve essere raffreddata fino a che la temperatura T\\n    // non scende sotto la soglia minima.\\n    while( T >= sogliaTemperaturaMinima ) {\\n      azionaPompeRaffreddamento();\\n      T = rilevaTemperatura();\\n    }\\n//###END_MODIFICABILE###\\n  }\\n}","aiutoUtilizzato":"false"}]}', 1, 1000, 16, 0, 27, 3, 1, 220),
('xxx@hotmail.tv', 4, '{"fileVirtuali":[{"nomeFile":"ArmaSabotata.js","codice":"/**********\\nCiao, caro. Il codice che vedi di seguito Ã¨ una mia idea su come potrebbe essere un''arma sabotata da caricare al posto di quelle standard all''interno del codice del Nemico.\\nAggiusta i parametri della classe per rendere l''arma piÃ¹ consona alle tue esigenze.\\nSaluti,\\nZurlin\\n**********/\\n  \\nfunction ArmaNemicaSabotata () {\\n//###START_MODIFICABILE###\\n  // Campo per il tempo di ricarica massimo delle torrette antiterrestri.\\n  this.tempoRicaricaMassimo = 200;\\n  // Campo per la tipologia di propellente.\\n  // PiÃ¹ Ã¨ alto il numero, migliore Ã¨ il propellente.\\n  this.propellente = 3;\\n  // Campo per il numero di missili della torretta antiterrestre.\\n  this.numeroMissili = 10;\\n  // Tipologia di munizione.\\n  // PuÃ² essere \\"massima_efficacia\\" oppure \\"massima_esplosione\\".\\n  this.tipoMunizione = \\"massima_esplosione\\";\\n//###END_MODIFICABILE###\\n}","aiutoUtilizzato":"false"},{"nomeFile":"CaricamentoArma.js","codice":"/**********\\nFile di creazione delle batterie antiterrestri.\\nRicordiamo che Ã¨ necessario autenticarsi in seguito a qualunque modifica.\\n**********/\\n\\nvar inizializzaBatteriaAntiterrestri = function () {\\n//###START_MODIFICABILE###\\n  // Variabile contenente la batteria antiterrestre\\n  // di tipo standard.\\n  var batteria = new ArmaNemicaSabotata();\\n  return batteria;\\n//###END_MODIFICABILE###\\n}","aiutoUtilizzato":"false"},{"nomeFile":"HackingPassword.js","codice":"/**********\\nCiao, caro.\\nNella funzione generaPassword() hai un esempio di funzione ricorsiva per il calcolo della password necessaria per salvare le modifiche.\\nQuesto codice prova ad indovinare la password generando tutte le combinazioni possibili dei caratteri ''A'', ''B'' e ''C''.\\nNella funzione hackingPassword() queste combinazioni vengono mandate al server centrale del Nemico, continuando finchÃ© non viene approvata una delle combinazioni.\\nSpero di non aver fatto errori.\\nSaluti,\\nZurlin\\n**********/\\n\\n// Simboli utilizzati per la password.\\nvar simboli = [''A'', ''B'', ''C''];\\n/**********\\nFunzione per la generazione di tutte le password possibili.\\nProvo tutti i simboli per la prima cifra:\\n    - A * *\\n    - B * * \\n    - C * *\\nA questo punto il gioco Ã¨ fatto: per le restanti cifre * * ripeto la stessa procedura come se volessi generare tutte le combinazioni di una password di lunghezza 2:\\n    - A * * -> A A *\\n            -> A B *\\n            -> A C *\\ne cosÃ¬ via... \\n**********/\\nvar generaPassword = function ( combinazioniPossibili, combinazione, k ) {\\n  var combinazione = copiaArray( combinazione );\\n  // k indica il numero della cifra che si sta cercando di indovinare\\n//###START_MODIFICABILE###\\n  if (k === 3) {\\n//###END_MODIFICABILE###\\n    combinazioniPossibili.push( combinazione );\\n  }\\n  else {\\n  \\tvar i = 0;\\n    for( i; i < 3; i++ ) {\\n      combinazione[ k ] = simboli[ i ];\\n      generaPassword( combinazioniPossibili, combinazione, k + 1 );\\n    }\\n  }\\n}\\n\\n// Funzione per il test delle combinazioni.\\nvar hackingPassword = function () {\\n  var combinazioniPossibili = [];\\n  // Variabile con la combinazione di partenza.\\n  var combinazione = [''*'', ''*'', ''*''];\\n  // Chiamata alla funzione di generazione delle password,\\n  // che inserisce tutte quelle possibili nella variabile\\n  // combinazioniPossibili.\\n  generaPassword( combinazioniPossibili, combinazione, 0 );\\n  \\n  var hacking = false;\\n  // Questo ciclo scorre tutte le combinazioni\\n  // e le manda una ad una al server del Nemico.\\n  for ( var i = 0; i < combinazioniPossibili.length; ++i ) {\\n    // Qui viene chiamata la funzione per il test della password.\\n    hacking = autenticazioneOperatoreNonTerrestre( combinazioniPossibili[ i ] );\\n    // Se la password Ã¨ corretta, usciamo dal ciclo.\\n    if ( hacking === true ) {\\n      break;\\n    }\\n  }\\n  return hacking;\\n}","aiutoUtilizzato":"false"}]}', 1, 1150, 11, 0, 19, 11, 1, 420),
('xxx@hotmail.tv', 5, '{"fileVirtuali":[{"nomeFile":"ConfigTorrettaSx.js","codice":"/**********\\nBenvenuto nel file di configurazione della torretta sinistra del sistema Hob-2000.\\nOgni torretta contiene tre variabili fondamentali: l''energia per il compressore del gas di propulsione, l''energia per lo spostamento del cannone e la pressione del carburante del missile.\\nCambiare queste configurazioni solo se si notano malfunzionamenti nel meccanismo di sparo delle torrette.\\n**********/\\n\\n// Classe della torretta sinistra\\nfunction TorrettaSinistra ( magazzino, caricatore, compressore, generatore, mirino ) {\\n  this.magazzino = magazzino;\\n  this.mirino = mirino;\\n  this.generatore = generatore;\\n  this.caricatore = caricatore;\\n  this.compressore = compressore;\\n}\\n\\n// Funzione per il caricamento del missile.\\nTorrettaSinistra.prototype.caricaMissile = function () {\\n  for ( i = 0; i < this.magazzino.length; ++i ) {\\n    this.caricatore.immagazzinaMissile( this.magazzino[i], this.generatore );\\n  }\\n}\\n\\n// Funzione per lo spostamento del cannone.\\nTorrettaSinistra.prototype.mira = function ( x, y, energiaFornita ) {\\n  this.mirino.spostaMirino( x, y, energiaFornita, this.generatore );\\n}\\n\\n// Funzione per lo sparo.\\nTorrettaSinistra.prototype.spara = function ( x, y ) {\\n//###START_MODIFICABILE###\\n  // Variabile contenente l''energia del compressore del gas di propulsione.\\n  var energiaCompressore = 30;\\n  // Variabile contenente l''energia per lo spostamento del cannone.\\n  var energiaMirino = 10;\\n  // Variabile contenente la pressione del carburante del missile.\\n  var pressioneCarburante = 15;\\n//###END_MODIFICABILE###\\n  var missile = this.caricatore.caricaProiettile( this.generatore );  \\n  this.compressore.aumentaPressione( missile.combustibile, pressioneCarburante, \\n    energiaCompressore, this.generatore );\\n  this.mira( x, y, energiaMirino );\\n  this.caricatore.innescaFuoco( missile, this.compressore, this.generatore );\\n}","aiutoUtilizzato":"false"},{"nomeFile":"ConfigTorrettaCentro.js","codice":"/**********\\nBenvenuto nel file di configurazione della torretta centrale del sistema Hob-2000.\\nOgni torretta contiene tre variabili fondamentali: l''energia per il compressore del gas di propulsione, l''energia per lo spostamento del cannone e la pressione del carburante del missile.\\nCambiare queste configurazioni solo se si notano malfunzionamenti nel meccanismo di sparo delle torrette.\\n**********/\\n\\n// Classe della torretta centrale.\\nfunction TorrettaCentrale ( magazzino, caricatore, compressore, generatore, mirino ) {\\n  this.magazzino = magazzino;\\n  this.mirino = mirino;\\n  this.generatore = generatore;\\n  this.caricatore = caricatore;\\n  this.compressore = compressore;\\n}\\n\\n// Funzione per il caricamento del missile.\\nTorrettaCentrale.prototype.caricaMissile = function () {\\n  for ( i = 0; i < this.magazzino.length; ++i ) {\\n    this.caricatore.immagazzinaMissile( this.magazzino[i], this.generatore );\\n  }\\n}\\n\\n// Funzione per lo spostamento del cannone.\\nTorrettaCentrale.prototype.mira = function ( x, y, energiaFornita ) {\\n  this.mirino.spostaMirino( x, y, energiaFornita, this.generatore );\\n}\\n\\n// Funzione per lo sparo.\\nTorrettaCentrale.prototype.spara = function ( x, y ) {\\n//###START_MODIFICABILE###\\n  // Variabile contenente l''energia del compressore del gas di propulsione.\\n  var energiaCompressore = 30;\\n  // Variabile contenente l''energia per lo spostamento del cannone.\\n  var energiaMirino = 10;\\n  // Variabile contenente la pressione del carburante del missile.\\n  var pressioneCarburante = 15;\\n//###END_MODIFICABILE###\\n  var missile = this.caricatore.caricaProiettile( this.generatore );\\n  this.compressore.aumentaPressione( missile.combustibile, pressioneCarburante, \\n    energiaCompressore, this.generatore );\\n  this.mira( x, y, energiaMirino );\\n  this.caricatore.innescaFuoco( missile, this.compressore, this.generatore );\\n}","aiutoUtilizzato":"false"},{"nomeFile":"ConfigTorrettaDx.js","codice":"/**********\\nBenvenuto nel file di configurazione della torretta destra del sistema Hob-2000.\\nOgni torretta contiene tre variabili fondamentali: l''energia per il compressore del gas di propulsione, l''energia per lo spostamento del cannone e la pressione del carburante del missile.\\nCambiare queste configurazioni solo se si notano malfunzionamenti nel meccanismo di sparo delle torrette.\\n**********/\\n\\n// Classe della torretta destra\\nfunction TorrettaDestra ( magazzino, caricatore, compressore, generatore, mirino ) {\\n  this.magazzino = magazzino;\\n  this.mirino = mirino;\\n  this.generatore = generatore;\\n  this.caricatore = caricatore;\\n  this.compressore = compressore;\\n}\\n\\n// Funzione per il caricamento del missile.\\nTorrettaDestra.prototype.caricaMissile = function () {\\n  for ( i = 0; i < this.magazzino.length; ++i ) {\\n    this.caricatore.immagazzinaMissile( this.magazzino[i], this.generatore );\\n  }\\n}\\n\\n// Funzione per lo spostamento del cannone.\\nTorrettaDestra.prototype.mira = function ( x, y, energiaFornita ) {\\n  this.mirino.spostaMirino( x, y, energiaFornita, this.generatore );\\n}\\n\\n// Funzione per lo sparo.\\nTorrettaDestra.prototype.spara = function ( x, y ) {\\n//###START_MODIFICABILE###\\n  // Variabile contenente l''energia del compressore del gas di propulsione.\\n  var energiaCompressore = 30;\\n  // Variabile contenente l''energia per lo spostamento del cannone.\\n  var energiaMirino = 10;\\n  // Variabile contenente la pressione del carburante del missile.\\n  var pressioneCarburante = 15;\\n//###END_MODIFICABILE###\\n  var missile = this.caricatore.caricaProiettile( this.generatore );\\n  this.compressore.aumentaPressione( missile.combustibile, pressioneCarburante, \\n    energiaCompressore, this.generatore );\\n  this.mira( x, y, energiaMirino );\\n  this.caricatore.innescaFuoco( missile, this.compressore, this.generatore );\\n}","aiutoUtilizzato":"false"}]}', 7, 2050, 173, 0, 136, 104, 8, 560),
('xxx@hotmail.tv', 6, '{"fileVirtuali":[{"nomeFile":"MacchinettaCaffe.js","codice":"/**********\\nFunzione che abilita il click del mouse per azionare la macchinetta del caffÃ¨.\\nQuesta funzione potrebbe essere d''ispirazione per altri scopi...\\n**********/\\nvar azionaMacchinaCaffeConClick = function ( pulsantieraMacchinaCaffe ) {\\n  // Comandi plancia azionati da click del mouse, notare il ''click''\\n  $( pulsantieraMacchinaCaffe ).bind( ''click'', function ( eventoClick ) {\\n    // Questa parte di codice si attiva quando si clicca\\n    macchinaCaffe.faiIlCaffe();\\n  } );\\n}","aiutoUtilizzato":"false"},{"nomeFile":"TrovaTorrettaMigliore.js","codice":"/**********\\nFunzione che date le coordinate del bersaglio determina la torretta migliore, e funzionante, per colpire il bersaglio.\\n\\nQuesta funzione prende come parametri:\\n  - torretta: un array di torrette;\\n  - x: un intero che rappresenta la coordinata x;\\n  - y: un intero che rappresenta la coordinata y;\\nQuesta funzione restituisce la torretta migliore.\\n**********/\\nvar torrettaPiuVicina = function ( torrette, x, y ) {\\n  /** Funzione che restituisce true (vero) o false (falso)\\n  nel caso in cui la torretta sia o meno funzionante. */\\n  var torrettaNonFunzionante = function ( torretta ) {\\n    if( torretta.stato === BatteriaAntimissile.ATTIVA &&\\n        torretta.numeroMissili > 0 &&\\n        torretta.blocco === false )\\n      return false;\\n    else\\n      return true;\\n  } \\n  \\n  var torrettaSelezionata;\\n  if( 0 <= x && x < 170 ) {\\n    torrettaSelezionata = torrette[0];\\n  }\\n  if( 170 <= x && x < 340 ) {\\n    torrettaSelezionata = torrette[1];\\n  }\\n  if( 340 <= x && x <= 510 ) {\\n    torrettaSelezionata = torrette[2];\\n  }\\n  \\n  if( torrettaNonFunzionante(torrettaSelezionata) )\\n    torrettaSelezionata = torrette[1];\\n  if( torrettaNonFunzionante(torrettaSelezionata) )\\n    torrettaSelezionata = torrette[0];\\n  if( torrettaNonFunzionante(torrettaSelezionata) )\\n    torrettaSelezionata = torrette[2];\\n  \\n  return torrettaSelezionata;\\n}","aiutoUtilizzato":"false"},{"nomeFile":"AzionamentiPlanciaComandi.js","codice":"/**********\\nFunzione che abilita i comandi della plancia. Attualmente prendo i tasti 1, 2, 3 sulla tastiera si fa fuoco con la torretta rispettivamente sinistra, centrale e destra.\\nIl comando click Ã¨ abilitato ma non funzionante.\\n\\nLa funzione prende come parametri:\\n  - planciaComandi: classe che legge i comandi attivati;\\n  - torrette: array di torrette controllate;\\n  - mirino: classe che rappresenta il sistema di puntamento, restituisce\\n    le coordinate in cui Ã¨ attualmente tramite mirino.x() e mirino.y();\\n  - sistema: Ã¨ il sistema missilistico a cui sono rivolti i comandi.\\n**********/\\nvar azionamentoComandiPlancia = function ( planciaComandi, torrette, mirino, sistema ) {\\n  // Comandi plancia azionati da tastiera, sostituire con click mouse ed inserire selezione automatica torretta.\\n//###START_MODIFICABILE###\\n  $( planciaComandi ).bind( ''click'', function ( tastoPremuto ) {\\n    // Selezione coordinate a cui sparare\\n    var x = mirino.x;\\n    var y = mirino.y;\\n  \\n    // Selezione della torretta corrispondente, \\"which\\" significa \\"quale\\" in inglese\\n    var torrettaSelezionata = torrettaPiuVicina( torrette, x, y )\\n  \\t\\n    // Lancio del missile\\n    azionaComandoSparo( torrettaSelezionata, sistema, x, y );\\n  } );\\n//###END_MODIFICABILE###\\n}","aiutoUtilizzato":"false"}]}', 1, 1650, 23, 0, 21, 9, 1, 0);
INSERT INTO `livello_eseguito` (`email`, `idlivello`, `file_virtuali_aggiornati`, `ondate`, `punteggio`, `missili_abbattuti`, `minacce_abbattute`, `missili_lanciati`, `missili_rimasti`, `torrette_salvate`, `morti`) VALUES
('xxx@hotmail.tv', 7, '{"fileVirtuali":[{"nomeFile":"MissileTestataMultipla.js","codice":"/**********\\nCiao, caro.\\nQuesto Ã¨ un esempio di come Ã¨ implementato il missile a testata multipla.\\nUsalo pure per migliorare i missili standard terrestri.\\nSaluti,\\nZurlin\\n**********/\\n\\n// Classe esempio di missili sdoppiabili \\nfunction MissileTestataMultipla ( ) {\\n  this.obiettivoAgganciato;\\n} \\n\\n// Funzione per identificare l''obiettivo del missile.\\n// Assomiglia alla funzione miraBersaglio() del missile standard!\\nMissileTestataMultipla.prototype.identificaObiettivo = function ( obiettivi ) {\\n  // Esempio obiettivo = { x: 315, y: 145, tipo: \\"terrestre\\" }\\n  for( var i = 0; i < obiettivi.length; ++i ) {\\n    var obiettivo = obiettivi[i];\\n    if( obiettivo.tipo === \\"terrestre\\" ) {\\n      var x = obiettivo.x;\\n      var y = obiettivo.y;\\n  \\n      // Vengono memorizzare le coordinate del bersaglio.\\n      this.agganciaBersaglio( obiettivo );\\n      \\n      // Viene restituita l''altezza alla quale il missile detona e si sdoppia.\\n      var altezzaEsplosione = this.calcolaAltezzaSdoppiamento( y );\\n      return altezzaEsplosione;\\n    }\\n  }\\n}\\n\\n// Funzione per il calcolo della quota di sdoppiamento del missile.\\nMissileTestataMultipla.prototype.calcolaAltezzaSdoppiamento = function ( y ) {\\n  return ( Math.abs(430 - y) / 2 ) + y;\\n}\\n\\n// Funzione per agganciare l''obiettivo del missile.\\nMissileTestataMultipla.prototype.agganciaObiettivo = function ( obiettivo ) {\\n  this.obiettivoAgganciato = obiettivo;\\n}\\n\\n// Funzione di detonazione del missile doppio.\\n// Come puoi notare il missile si divide in due frammenti.\\n// Assomiglia alla funzione esplodi() del missile standard!\\nMissileTestataMultipla.prototype.detonazione = function ( ) {\\n  // this.obiettivo.x + 10 e this.obiettivo.x - 10\\n  // permette di indirizzare il missile in due punti diversi,\\n  // uno a 10 unitÃ  a destra del bersaglio del missile originale\\n  // ed uno a 10 unitÃ  a sinistra del bersaglio del missile originale.\\n  var frammentoMissile1 = new FrammentoMissile( this.obiettivo.x + 10, this.obiettivo.y );\\n  var frammentoMissile2 = new FrammentoMissile( this.obiettivo.x - 10, this.obiettivo.y );\\n  // Variabile che contiene i frammenti del missile.\\n  var frammentiMissile = [];\\n  frammentiMissile.push( frammentoMissile1 );\\n  frammentiMissile.push( frammentoMissile2 );\\n  \\n  return frammentiMissile;\\n}","aiutoUtilizzato":"false"},{"nomeFile":"MissileStandard.js","codice":"/**********\\nBenvenuto nel file di configurazione missili standard del sistema Hob-2000.\\nIn questo codice Ã¨ possibile modificare diverse proprietÃ  dei missili, in particolare i bersagli mirati, gli obiettivi agganciati e l''esplosione.\\n**********/\\n\\n// Classe che identifica il missile standard terrestre.\\nfunction MissileStandard ( ) { \\n  this.bersaglioAgganciato;\\n}\\n\\n// Funzione di identificazione del bersaglio\\nMissileStandard.prototype.miraBersaglio = function ( listaBersagli ) {\\n  // bersaglio = { appartieneNemico: true, x: 530, y: 95 }\\n  \\n  var numeroBersagli = listaBersagli.length;\\n  var i = 0;\\n  // Ciclo per la selezione dei bersagli di sparo.\\n  while( i <  numeroBersagli ) {\\n//###START_MODIFICABILE###\\n    var bersaglio = listaBersagli[i];\\n    if( bersaglio.appartieneNemico === true ) {\\n      var x = bersaglio.x;\\n      var y = bersaglio.y;\\n    \\n      this.agganciaObiettivo( bersaglio );\\n      \\n      // Altezza a cui avviene l''esplosione.\\n      var altezzaEsplosione = ( Math.abs(430 - y) / 2 ) + y;\\n      return altezzaEsplosione;\\n//###END_MODIFICABILE###\\n    }\\n    ++i;\\n  }\\n}\\n\\n// Funzione di aggancio del bersaglio.\\nMissileStandard.prototype.agganciaObiettivo = function ( bersaglio ) {\\n  this.bersaglioAgganciato = bersaglio;\\n}\\n\\n// Funzione di esplosione del missile standard.\\nMissileStandard.prototype.esplodi = function ( ) {\\n//###START_MODIFICABILE###\\n   var frammentoMissile1 = new FrammentoMissile( \\n     this.bersaglioAgganciato.x + 10, this.bersaglioAgganciato.y );\\n  var frammentoMissile2 = new FrammentoMissile( \\n    this.bersaglioAgganciato.x - 10, this.bersaglioAgganciato.y );\\n  var frammentiMissile = [];\\n  frammentiMissile.push( frammentoMissile1 );\\n  frammentiMissile.push( frammentoMissile2 );\\n  \\n  return frammentiMissile;\\n//###END_MODIFICABILE###\\n}","aiutoUtilizzato":"false"}]}', 1, 3150, 52, 0, 20, 10, 1, 320),
('xxx@hotmail.tv', 8, '{"fileVirtuali":[{"nomeFile":"TrasmissioniRadio.js","codice":"/**********\\nFunzione che invia i messaggi da parte delle basi sul mezzo di comunicazione.\\nIl mezzo di comunicazione Ã¨ un array di 6 elementi chiamato \\"canaliTrasmissione\\" aventi struttura: { idRadio: \\"AX1\\", messaggio: \\"[00:12] Questo Ã¨ un messaggio di prova\\" }.\\nI messaggi provenienti dalla base numero 0, ossia quella piÃ¹ a destra, vengono inseriti nel canaliTrasmissione[0] e cosÃ¬ via...\\n\\nQuesta funzione ritorna i \\"canaliTrasmissione\\" caricati con messaggi e identificatori radio opportunatamente mescolati per confondere il nemico tramite \\"mescolaCanali()\\".\\n**********/\\nfunction spedisciMessaggiBasi ( ) {  \\n  var messaggi = [];\\n  messaggi[0] = \\"[21:06] Parla base BX0, ci serve immediato aiuto, siamo sotto attacco!\\";\\n  messaggi[1] = \\"[21:04] Parla base AX1, ci serve immediato aiuto, siamo sotto attacco!\\";\\n  messaggi[2] = \\"[21:02] Parla base BX2, ci serve immediato aiuto, siamo sotto attacco!\\";\\n  messaggi[3] = \\"[21:08] Parla base AX3, ci serve immediato aiuto, siamo sotto attacco!\\";\\n  messaggi[4] = \\"[21:01] Parla base BX4, ci serve immediato aiuto, siamo sotto attacco!\\";\\n  messaggi[5] = \\"[21:02] Parla base AX5, ci serve immediato aiuto, siamo sotto attacco!\\";\\n  \\n  var canaliTrasmissione = [];\\n  canaliTrasmissione[0] = { idRadio: \\"BX0\\", messaggio: messaggi[0] };\\n  canaliTrasmissione[1] = { idRadio: \\"AX1\\", messaggio: messaggi[1] };\\n  canaliTrasmissione[2] = { idRadio: \\"BX2\\", messaggio: messaggi[2] };\\n  canaliTrasmissione[3] = { idRadio: \\"AX3\\", messaggio: messaggi[3] };\\n  canaliTrasmissione[4] = { idRadio: \\"BX4\\", messaggio: messaggi[4] };\\n  canaliTrasmissione[5] = { idRadio: \\"AX5\\", messaggio: messaggi[5] };\\n  \\n  // I canali di trasmissione vengono mescolati per confondere il nemico.\\n  mescolaCanali( canaliTrasmissione );\\n  \\n  return canaliTrasmissione;\\n}\\n\\n/**********\\nFunzione che riceve i messaggi dai canali di tramissione e li smista alle relative basi.\\ncanaliTrasmissione Ã¨ un array di 6 elementi aventi struttura: { idRadio: \\"AX1\\", messaggio: \\"[00:12] Questo Ã¨ un messaggio di prova\\" }.\\n**********/\\nfunction riceviMessaggiBasi ( canaliTrasmissione ) { \\n  // Vengono riordinati i canali di trasmissione per consentire la corretta ricezione\\n  riordinaCanali( canaliTrasmissione );\\n    \\n  var messaggiRicevuti = [];\\n  messaggiRicevuti[0] = canaliTrasmissione[0].messaggio;\\n  messaggiRicevuti[1] = canaliTrasmissione[1].messaggio;\\n  messaggiRicevuti[2] = canaliTrasmissione[2].messaggio;\\n  messaggiRicevuti[3] = canaliTrasmissione[3].messaggio;\\n  messaggiRicevuti[4] = canaliTrasmissione[4].messaggio;\\n  messaggiRicevuti[5] = canaliTrasmissione[5].messaggio;\\n  return messaggiRicevuti;\\n}","aiutoUtilizzato":"false"},{"nomeFile":"identificaBersagliPrioritari.js","codice":"/**********\\nCiao, caro.\\nQuesta funzione Ã¨ utilizzata dal vostro Nemico per determinare i bersagli terrestri da colpire. \\nCome puoi notare vengono colpite prima le basi il cui canale di trasmissione contiene\\nl''identificatore radio \\"AX\\".\\nSpero ti sia utile,\\nZurlin\\n**********/\\nvar determinaBersagliDaColpire = function ( canaleTrasmissione ) {\\n  var bersagliPrioritari = [];\\n  \\n  // Ecco come vengono identificate le basi vitali dal nemico\\n  for( var i = 0; i < canaleTrasmissione.length; ++i ) {\\n    if( c.idRadio[0] === \\"A\\" && c.idRadio[1] === \\"X\\" )\\n      bersagliPrioritari.push( basi[i] );\\n  }\\n  \\n  return bersagliPrioritari;\\n}","aiutoUtilizzato":"false"},{"nomeFile":"Decoder.js","codice":"/**********\\nQuesto Ã¨ il file per scrivere il codice delle funzioni di codifica e decodifica.\\nFanne buon uso.\\n/\\\\/\\\\/\\\\ Gen. Ortiz /\\\\/\\\\/\\\\\\n**********/\\n\\n/**********\\nFunzione per il mescolamento dei canali di trasmissione per confondere il nemico.\\nPrende come input un array di 6 elementi chiamato \\"canaliTrasmissione\\" aventi struttura: { idRadio: \\"AX1\\", messaggio: \\"[00:12] Questo Ã¨ un messaggio di prova\\" }.\\n\\nQuesta funzione deve mescolare i canali di trasmissione in modo tale che ad una base vitale sia associato il canale di tramissione di una base non vitale. Il nemico colpirÃ  con prioritÃ  quest''ultima ignorando l''altra.\\nEsempio:\\n  base in posizione 0 (non vitale) ---> canale 0\\n  base in posizione 1 (vitale)     ---> canale 1\\n  \\n  Invertendo il canale 0 con il canale 1 il nemico crederÃ  che la base non vitale occupi la posizione 1 mentre quella vitale la 0.\\n**********/\\nvar mescolaCanali = function ( canaleTrasmissione ) {\\n//###START_MODIFICABILE###\\n\\tvar temp = canaleTrasmissione[0];\\n  \\tcanaleTrasmissione[0] = canaleTrasmissione[1];\\n  \\tcanaleTrasmissione[1] = temp;\\n  \\n  \\tvar temp = canaleTrasmissione[2];\\n  \\tcanaleTrasmissione[2] = canaleTrasmissione[3];\\n  \\tcanaleTrasmissione[3] = temp;\\n  \\n  \\tvar temp = canaleTrasmissione[4];\\n  \\tcanaleTrasmissione[4] = canaleTrasmissione[5];\\n  \\tcanaleTrasmissione[5] = temp;\\n//###END_MODIFICABILE###\\n}\\n\\n\\n/**********\\nFunzione per il riordinamento dei canali di tramissione a seguito del mescolamento per confondere il nemico.\\nPrende come input un array di 6 elementi chiamato \\"canaliTrasmissione\\" aventi struttura: { idRadio: \\"AX1\\", messaggio: \\"[00:12] Questo Ã¨ un messaggio di prova\\" }.\\n**********/\\nvar riordinaCanali = function ( canaleTrasmissione ) {\\n//###START_MODIFICABILE###\\n\\tvar temp = canaleTrasmissione[1];\\n  \\tcanaleTrasmissione[1] = canaleTrasmissione[0];\\n  \\tcanaleTrasmissione[0] = temp;\\n  \\n  \\tvar temp = canaleTrasmissione[3];\\n  \\tcanaleTrasmissione[3] = canaleTrasmissione[2];\\n  \\tcanaleTrasmissione[2] = temp;\\n  \\n  \\tvar temp = canaleTrasmissione[5];\\n  \\tcanaleTrasmissione[5] = canaleTrasmissione[4];\\n//###END_MODIFICABILE###\\n//###START_MODIFICABILE###\\n//###END_MODIFICABILE###\\n//###START_MODIFICABILE###\\n  \\tcanaleTrasmissione[4] = temp;\\n//###END_MODIFICABILE###\\n}","aiutoUtilizzato":"false"}]}', 1, 2000, 26, 0, 17, 13, 1, 320),
('xxx@hotmail.tv', 9, '{"fileVirtuali":[{"nomeFile":"ComandoSparoSingolo.js","codice":"/**********\\nFunzione che comanda ad una torretta, scelta opportunamente, di lanciare un missile alla coordinata indicata.\\n\\nPrende come parametri:\\n  - x: intero che indentifica la coordinata x del bersaglio;\\n  - y: intero che indentifica la coordinata y del bersaglio;\\n  - torrette: array di torrette.\\n**********/\\nvar comandoSparoSingolo = function ( x, y, torrette ) {\\n  var indiceTorretta = sceltaTorrettaMigliore( x, y, torrette );\\n  if( indiceTorretta !== undefined ) {\\n    var torretta = torrette[indiceTorretta];\\n    torretta.cicloSparo( x, y );\\n  }\\n}","aiutoUtilizzato":"false"},{"nomeFile":"ComandoSparoMultiplo.js","codice":"/**********\\nFunzione che comanda a tutte le torrette di sparare missili lungo una linea creando uno sbarramento di fuoco in cielo.\\n\\nPrende come parametri:\\n  - ordiniDiFuoco: un array di strutture { numeroTorretta: 0, x: 416, y: 188 } dove x ed y sono le coordinate a cui sparare mentre numeroTorretta rappresenta l''identificatore della torretta a cui Ã¨ diretto l''ordine;\\n  - torrette: array di oggetti torretta le quali possiedono un indice ( torretta.indice ) e consentono lo sparo tramite il metodo torretta.cicloSparo().\\n    \\nObiettivo della funzione Ã¨ far sparare le torrette in accordo con gli ordini contenuti in ordiniDiFuoco.\\n**********/\\nvar comandoSparoMultiplo = function ( ordiniDiFuoco, torrette ) {\\n//###START_MODIFICABILE###\\n  for( var i = 0; i < ordiniDiFuoco.length; ++i ) {\\n    var o = ordiniDiFuoco[i];\\n    var x = o.x;\\n    var y = o.y;\\n    var t = o.numeroTorretta;\\n    torrette[t].cicloSparo( x, y );\\n  }\\n//###END_MODIFICABILE###\\n}","aiutoUtilizzato":"false"}]}', 2, 2450, 470, 0, 296, 154, 15, 2940),
('xxx@hotmail.tv', 10, '{"fileVirtuali":[{"nomeFile":"TorrettaAutomatica.js","codice":"/**********\\nClasse che implementa le torrette automatiche in grado di intercettare con un missile le minacce individuate.\\nLa torretta automatica viene costruita con:\\n  - posizione: struttura del tipo { x: 50, y: 430 } che identifica la posizione della torretta;\\n  - velocitaMissili: intero che descrive la velocita dei missili sparati.\\n  - xMinAreaSparo e xMaxAreaSparo: coordinate che indentificano quale area deve essere coperta dalla torretta antimissile (area compresa tra xMinAreaSparo e xMaxAreaSparo).\\n**********/\\nfunction TorrettaAutomatica ( posizione, velocitaMissili, xMinAreaSparo, xMaxAreaSparo ) {\\n  this.posizioneTorretta = posizione;\\n  this.velocitaMissili = velocitaMissili;\\n  this.xMinAreaSparo = xMinAreaSparo;\\n  this.xMaxAreaSparo = xMaxAreaSparo;\\n}\\n\\n/**********\\nFunzione che identifica il missile che sara'' intercettato. Deve essere ritornato un missile di classe MissileNemico e le cui coordinate sono comprese nell''area this.xMinAreaSparo e this.xMaxAreaSparo.\\n\\nPrende come parametro:\\n  - bersagli: array di oggetti con struttura { x: 157, y: 597, tipo: tipologia }; tipo e'' a sua volta un oggetto di classe MissileNemico o MissileTerreste. N.B.: ricordarsi di instanceof per determinare se un oggetto appartiene ad una certa classe.\\n  \\nRestituisce come valore:\\n  - un oggetto di con struttura bersaglio { x: 157, y: 597, tipo: tipologia } \\n**********/\\nTorrettaAutomatica.prototype.identificaBersaglio = function ( bersagli ) {\\n  var candidato;\\n//###START_MODIFICABILE###\\n  \\n  for( var i = 0; i < bersagli.length; ++i ) {\\n    var b = bersagli[i];\\n    if( b.tipo instanceof MissileNemico\\n      && this.xMinAreaSparo <= b.x \\n      && b.x <= this.xMaxAreaSparo ) {\\n      candidato = b;\\n      break;\\n    }\\n  }\\n  \\n//###END_MODIFICABILE###\\n  return candidato;\\n}\\n\\n/**********\\nFunzione che dato un bersaglio ricava le coordinate dove sparare il missile in grado di intercettarlo.\\n\\nPrende come parametro:\\n  - bersaglio: oggetto con struttura { x: 157, y: 597, tipo: tipologia }\\nRestituisce come valore:\\n  - un oggetto coordinata di struttura { x: 130, y: 657 }\\n**********/\\nTorrettaAutomatica.prototype.mira = function ( bersaglio ) {\\n  this.bersaglio = bersaglio;\\n  var xBersaglio = bersaglio.x;\\n  var yBersaglio = bersaglio.y;\\n  var xImpattoBersaglio = bersaglio.xArrivo;\\n  var yImpattoBersaglio = bersaglio.yArrivo;\\n  var velocitaBersaglio = bersaglio.velocita;\\n  var coordinate = coordinateIntercettaBersaglio( \\n    xBersaglio, yBersaglio, \\n    xImpattoBersaglio, yImpattoBersaglio,\\n    this.velocitaMissili, velocitaBersaglio, \\n    this.posizioneTorretta ); \\n  return coordinate;\\n}\\n\\n/**********\\nFunzione che effettua il lancio di un missile verso le coordinate, passate come parametro.\\n**********/\\nTorrettaAutomatica.prototype.sparo = function ( x, y ) {\\n  var missile = new MissileTorrettaAutomatica( x, y );\\n  missile.lancia();\\n}\\n\\n/**********\\nFunzione che descrive il processo di identificazione, mira e sparo necessari ad ogni missile per intercettare una minaccia.\\nQuesta funzione prende come parametro:\\n  - bersagliPossibili: un array di oggetti con \\n    struttura { x: 157, y: 597, tipo: tipologia } che rappresentano\\n    tutti i missili (amici e non) in volo in quel momento.    \\nObiettivo di questa funzione Ã¨ permettere l''indentificazione di un bersaglio tra quelli possibili, ricavare le coordinate per intercettarlo ed infine sparare un missile.\\n**********/\\nTorrettaAutomatica.prototype.cicloSparoAutomatico = function ( bersagliPossibili ) {\\n//###START_MODIFICABILE###\\n  // Implementare il ciclo di sparo utilizzando le funzionalitÃ \\n  // giÃ  implementate nella TorrettaAutomatica.\\n  // Ciclo sparo: \\n  //  1) identificare bersaglio;\\n  //  2) mirare;\\n  //  3) fare fuoco.\\n  // N.B.: ricordardi il this quando si richiama una funzione della classe.\\n  \\n  var b = this.identificaBersaglio( bersagliPossibili );\\n  var c = this.mira( b );\\n  this.sparo( c.x, c.y );\\n//###END_MODIFICABILE###\\n}","aiutoUtilizzato":"true"}]}', 1, -15150, 91, 1, 8, 2, 3, 100);

-- --------------------------------------------------------

--
-- Table structure for table `utente`
--

CREATE TABLE IF NOT EXISTS `utente` (
  `email` varchar(250) NOT NULL,
  `password` varchar(250) NOT NULL,
  `tutorial` int(11) NOT NULL DEFAULT '0',
  `alias` varchar(100) NOT NULL
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

--
-- Dumping data for table `utente`
--

INSERT INTO `utente` (`email`, `password`, `tutorial`, `alias`) VALUES
('a.b@gmail.it', 'password', 1, 'swagger'),
('muni@mazma.it', 'password', 1, 'ddd'),
('munic@mazma.it', 'password', 1, 'mazma'),
('sx@c.it', 'password', 0, 'hhh'),
('x.b@h.it', 'password', 1, 'aaaa'),
('xxx@hotmail.tv', 'password', 1, 'Ciaone');

--
-- Indexes for dumped tables
--

--
-- Indexes for table `livello`
--
ALTER TABLE `livello`
  ADD PRIMARY KEY (`idlivello`);

--
-- Indexes for table `livello_eseguito`
--
ALTER TABLE `livello_eseguito`
  ADD PRIMARY KEY (`email`,`idlivello`),
  ADD KEY `idlivello` (`idlivello`);

--
-- Indexes for table `utente`
--
ALTER TABLE `utente`
  ADD PRIMARY KEY (`email`);

--
-- AUTO_INCREMENT for dumped tables
--

--
-- AUTO_INCREMENT for table `livello`
--
ALTER TABLE `livello`
  MODIFY `idlivello` int(11) NOT NULL AUTO_INCREMENT,AUTO_INCREMENT=11;
--
-- Constraints for dumped tables
--

--
-- Constraints for table `livello_eseguito`
--
ALTER TABLE `livello_eseguito`
  ADD CONSTRAINT `livello_eseguito_ibfk_1` FOREIGN KEY (`idlivello`) REFERENCES `livello` (`idlivello`),
  ADD CONSTRAINT `livello_eseguito_ibfk_2` FOREIGN KEY (`email`) REFERENCES `utente` (`email`);
--
-- Database: `test`
--

/*!40101 SET CHARACTER_SET_CLIENT=@OLD_CHARACTER_SET_CLIENT */;
/*!40101 SET CHARACTER_SET_RESULTS=@OLD_CHARACTER_SET_RESULTS */;
/*!40101 SET COLLATION_CONNECTION=@OLD_COLLATION_CONNECTION */;
