{
  "nomeLivello": "Bastiani, la fortezza",
  "numeroLivello": 0,
  "costoAiuti": 200,

  "dialogoIniziale": 
    [{"nome":"Ortiz",
    "testo":"Buongiorno, capitano Simeoni! Io sono il generale Ortiz, a capo dell'Ottava Armata delle United Terrestrial Forces. Come puoi ben vedere, abbiamo appena subito un attacco del Nemico. Purtroppo le difese del pianeta Bastiani sono inutilizzabili!" },
    {"nome":"Simeoni",
    "testo":"Inutilizzabili, signore?" },
    {"nome":"Ortiz",
    "testo":"Esattamente, capitano. Come se qualcuno avesse inserito una sicura di sparo. Ed è qui che entri in gioco tu. Il tempo è poco, ma confido in te. Sai cos'è un codice sorgente? Come sicuramente ti avranno spiegato all'Accademia, ogni arma terrestre contiene una grossa parte di informatica." },
    {"nome":"Simeoni",
    "testo":"Esatto, signore." },
    {"nome":"Ortiz",
    "testo":"Questa parte di informatica consiste in un insieme di istruzioni su ciò che le armi devo fare. Tali istruzioni devono essere scritte in un linguaggio comprensibile alle armi: un linguaggio di questo genere viene chiamato linguaggio di programmazione. L'insieme di istruzioni, scritte in un linguaggio di programmazione, viene chiamato codice sorgente. Quando l'arma prende il codice sorgente, esso diventa un programma. Mi sono spiegato bene?" },
    {"nome":"Simeoni",
    "testo":"Affermativo, signore." },
    {"nome":"Ortiz",
    "testo":"Il tuo primo compito sarà quello di modificare il codice sorgente per le armi di Bastiani. I nostri tecnici ti hanno fornito una postazione di comando su cui lavorare. Ho però una brutta notizia." },
    {"nome":"Simeoni",
    "testo":"Brutta notizia, signore?" },
    {"nome":"Ortiz",
    "testo":"Il linguaggio di programmazione utilizzato per la scrittura dei programmi militare si chiama JS. Purtroppo tutti i documenti relativi a questo linguaggio sono... spariti! Non ne esiste una sola testimonianza in tutta la galassia. Archivi militari, archivi civili, biblioteche, università... nulla! Come se non fosse mai esistito." },
    {"nome":"Simeoni",
    "testo":"Bene, signore. La difficoltà è mia amica. Spero solo di essere in grado di capire questo linguaggio il prima possibile." },
    {"nome":"Ortiz",
    "testo":"Non preoccuparti, ho lasciato qualche commento di aiuto al codice. Come ben sai un commento è una parte del codice sorgente che non descrive un'istruzione, ma semplicemente aiuta chi legge il codice nel comprendere ciò che c'è scritto." },
    {"nome":"Simeoni",
    "testo":"Grazie signore." },
    {"nome":"Ortiz",
    "testo":"Di nulla. Per qualunque cosa, chiedi. Come prima cosa noterai che il sistema richiede un accesso automatico, effettuato tramite il controllo della tua retina. Se questo non funziona, non preoccuparti: raramente lo fa. Dovrai dunque eseguire un accesso manuale, modificando alcuni file che si occupano di tale controllo. Troverai comunque una descrizione più dettagliata nel documento che ti ho lasciato." },
    {"nome":"Simeoni",
    "testo":"Signorsì, signore." },
    {"nome":"Ortiz",
    "testo":"Mi aspetto grandi cose da te, capitano. Non deludermi." }],

  "dialogoFinale": [
    {"nome":"Simeoni",
    "testo":"Capitano Simeoni a rapporto, signore." },
    {"nome":"Ortiz",
    "testo":"Bel lavoro Simeoni, con quel sistema. Era ora che arrivasse qualcuno in grado di gestirlo..." },
    {"nome":"Simeoni",
    "testo":"Grazie, signore! Ho altri ordini, signore?" },
    {"nome":"Ortiz",
    "testo":"No, non per oggi. Vai a riposarti, sapendo che finalmente possiamo provare a respingere quei maledetti. Gli incursori hanno segnalato movimenti al confine del deserto... domani sarà una giornata lunga, nell'eterna notte di Bastiani." }],

  "codiceLivello": "function Livello3 ( callbackFineLivello ) {\n  CoreLevel.call( this, callbackFineLivello );\n}\n\nLivello3.prototype = Object.create( CoreLevel.prototype );\nLivello3.prototype.constructor = Livello3;\n\nLivello3.prototype.inizializzaArmiNemiche = function ( ) {\n  var areaPertenza = this.coreGame.canvas.width;\n  var ritardoMassimo = 100;\n  var xRand;\n  var velRand;\n  var ritardoRand;\n  var bersagli = this.coreGame.bersagliAttaccabili();\n  var numeroMissili = 1;\n  \n  for( var i = 0; i < numeroMissili ; i++ ) {\n    xRand = rand( 0, areaPertenza );\n    velRand = rand( 1, 1.5 );\n    ritardoRand = rand( 0, ritardoMassimo );\n    this.coreGame.missiliNemici.push( new MissileNemico( {\n      coloreTestata: 'yellow',\n      coloreScia: 'red',\n      massimoRaggioEsplosione: 30\n    }, bersagli, areaPertenza, xRand, velRand,  ritardoRand, this.coreGame) );\n  }\n}\n\nLivello3.prototype.calcolaCoefficienteOndata = function ( ) {\n  return this.numeroOndata * 1.2;\n}\n\nCoreLevel.prototype.inizializzaTorrette = function ( ) {\n  var coloreMissili = [];\n  var nSoldati = 10;\n  var Tmin = 50;\n  var Tmax = 1000;\n  var deltaTempo = 70;\n  var deltaRaffreddamento = 3;\n  var nMissili = 0;\n  \n  \/\/ Inizializzo munizioni per torrette\n  this.munizioni = [];\n  this.munizioni[0] = [];\n  this.munizioni[1] = [];\n  this.munizioni[2] = [];\n  \n  this.munizioni[0] = meccanismoCaricamento();\n  this.munizioni[1] = meccanismoCaricamento();\n  this.munizioni[2] = meccanismoCaricamento();\n  \n  var scegliColoreMissile = function ( tipo ) {\n    switch( tipo ) { \n      case 'plutonio': return '#33CCFF';\n      case 'plasma': return 'blue';\n      case 'sonico': return 'red';\n    }\n  }\n  \n  coloreMissili = [];\n  nMissili = (this.munizioni[0]).length;\n  $.each( this.munizioni[0], function ( i, m ) {\n    coloreMissili[i] = scegliColoreMissile( m.nucleoEsplosivo );    \n  } );\n  this.coreGame.aggiungiBatteriaAntimissile(\n    new BatteriaAntimissile ( 35, 410, nMissili, nSoldati, coloreMissili, Tmin, Tmax, deltaTempo, deltaRaffreddamento, this.coreGame )\n  );\n  \n  coloreMissili = [];\n  nMissili = (this.munizioni[1]).length;\n  $.each( this.munizioni[1], function ( i, m ) { \n    coloreMissili[i] = scegliColoreMissile( m.nucleoEsplosivo );\n  } );\n  this.coreGame.aggiungiBatteriaAntimissile(\n    new BatteriaAntimissile ( 255, 410, nMissili, nSoldati, coloreMissili, Tmin, Tmax, deltaTempo, deltaRaffreddamento, this.coreGame )\n  );\n  \n  coloreMissili = [];\n  nMissili = (this.munizioni[2]).length;\n  $.each( this.munizioni[2], function ( i, m ) { \n    coloreMissili[i] = scegliColoreMissile( m.nucleoEsplosivo );\n  } );\n  this.coreGame.aggiungiBatteriaAntimissile(\n    new BatteriaAntimissile ( 475, 410, nMissili, nSoldati, coloreMissili, Tmin, Tmax, deltaTempo, deltaRaffreddamento, this.coreGame )\n  );\n};\n\nLivello3.prototype.scegliTorretta = function ( x, y, tasto ) {\n  var indiceTorretta = 0;\n  switch(tasto) {\n    case 49: indiceTorretta = 0; break;\n    case 50: indiceTorretta = 1; break;\n    case 51: indiceTorretta = 2; break;\n    default: return -1;\n  }\n  \n  var torrettaAttuale = this.coreGame.batterieAntimissile[ indiceTorretta ];\n  \n  if ( torrettaAttuale.stato === BatteriaAntimissile.ATTIVA \n      && torrettaAttuale.numeroMissili > 0 \n      && torrettaAttuale.blocco === false )  \n    return indiceTorretta;\n  \n  return -1;\n};\n\nLivello3.prototype.sparo = function ( x, y, tasto ) {\n  var indiceTorretta = this.scegliTorretta( x, y, tasto );\n  \n  if( indiceTorretta === -1 )\n    return;\n  \n  var torretta = this.coreGame.batterieAntimissile[ indiceTorretta ];\n  var n = torretta.numeroMissili - 1;\n  var missile;\n  \n  if( this.munizioni[indiceTorretta][n].nucleoEsplosivo === 'plutonio' ) {\n    this.coreGame.missiliTerrestri.push( new MissileTerrestre( {\n      xDiPartenza: torretta.x,\n      yDiPartenza: torretta.y,\n      xDiArrivo: x,\n      yDiArrivo: y,\n      coloreTestata: 'yellow',\n      coloreScia: '#33CCFF',\n      massimoRaggioEsplosione: 30,\n      distanzaPerFrame: 0.5\n    }, this.coreGame ) );\n  }\n  if( this.munizioni[indiceTorretta][n].nucleoEsplosivo === 'sonico' ) {\n    this.coreGame.missiliTerrestri.push( new MissileTerrestre( {\n      xDiPartenza: torretta.x,\n      yDiPartenza: torretta.y,\n      xDiArrivo: x,\n      yDiArrivo: y,\n      coloreTestata: 'yellow',\n      coloreScia: 'red',\n      massimoRaggioEsplosione: 2,\n      distanzaPerFrame: 8\n    }, this.coreGame ) );\n  }\n  if( this.munizioni[indiceTorretta][n].nucleoEsplosivo === 'plasma' ) {\n    this.coreGame.missiliTerrestri.push( new MissileTerrestre( {\n      xDiPartenza: torretta.x,\n      yDiPartenza: torretta.y,\n      xDiArrivo: x,\n      yDiArrivo: y,\n      coloreTestata: 'yellow',\n      coloreScia: 'blue',\n      massimoRaggioEsplosione: 20,\n      distanzaPerFrame: 7\n    }, this.coreGame ) );\n  }\n  \n  this.coreGame.aggiornaPunteggioMissiliSparati();\n  torretta.numeroMissili--;\n  torretta.temperatura += 200;\n  var temperaturaMinima = this.calcolaTempMinima( torretta.temperatura );\n  torretta.temperaturaSblocco = temperaturaMinima;\n  if( torretta.temperatura >= 799 ) {\n    torretta.blocco = true;\n  }\n}\n\n\/\/ interfaccia test - codice TAB 1\n\nvar _tipo = ['plasma', 'plutonio', 'sonico'];\nvar _numeroMunizioni; \nvar _munizioni = [];\n\nvar prelevaCarico = function( ) {\n  var nMunizioniPlutonio = rand( 0, 4 );\n  var nMunizioniSoniche = 4 - nMunizioniPlutonio;\n  \n  _numeroMunizioni = 10 + 4;\n  _munizioni = [];\n  for( _i = 0; _i < _numeroMunizioni; ++_i ) {\n    var t = _tipo[0];\n    \n    var x = rand(0, 2);\n    if ( x === 1 && nMunizioniPlutonio > 0 ) { \n      t = _tipo[x]; nMunizioniPlutonio--; \n    }\n    if ( x === 2 && nMunizioniSoniche > 0 ) { \n      t = _tipo[x]; nMunizioniSoniche--; \n    }\n    _munizioni[_i] = { id: _i, nucleoEsplosivo: t };\n  }\n  \n  return _munizioni;\n}\n\n\/\/ interfaccia test - codice TAB 2\n\nLivello3.prototype.calcolaTempMinima = function ( T ) {\n  _temperatura = T\n  _deltaTemperatura = 1;\n  _contatoreCicli = 0;\n  sistemaRaffreddamento();\n  return _temperatura;\n}\n\nvar _temperatura;\nvar _contatoreCicli;\nvar _deltaTemperatura;\nvar rilevaTemperatura = function ( ) {\n  return _temperatura;\n}\n\nvar azionaPompeRaffreddamento = function ( ) {\n  _temperatura -= _deltaTemperatura;\n  _contatoreCicli++;\n}",
   
  "manuale": "Un punto molto importante del codice sorgente del sistema antimissilistico Hob-2000 riguarda il concetto di ciclo.\nUn ciclo \u00e8 formato da due cose: una condizione ed un corpo. Il corpo viene eseguito finch\u00e9 vale la condizione.\nEsistono due tipi principali di ciclo: il primo \u00e8 identificato dalla parola chiave for, il secondo dalla parola chiave while.\nIl ciclo for \u00e8 strutturato nella seguente maniera:\nvar x = 0;\nfor ( var i = 0; i < lunghezza; i++ ) {\n\tx++;\n}\nNota bene!\nLa scorciatoia i++ ha lo stesso significato dell'istruzione i = i + 1. Stesso vale per x.\nQuesta scrittura ha un significato semplice: partendo da 0, si controlla il valore di i. L'istruzione interna al for, cio\u00e8 x++, viene eseguita finch\u00e9 i, che viene incrementato ad ogni giro del ciclo, non \u00e8 lunga come lunghezza. Scomponiamo le operazioni:\n- viene creata una variabile i, che contiene in valore 0;\n- se i \u00e8 minore di lunghezza, si va avanti, altrimenti si esce dal ciclo;\n- i viene incrementato, cio\u00e8 contiene ora il valore 0+1, cio\u00e8 1;\n- si esegue il codice interno al ciclo, dunque x diventa uguale a 1;\n- si controlla se i (ora uguale a 1) \u00e8 minore di lunghezza: se lo \u00e8, si torna dentro al ciclo, altrimenti si esce.\nIl ciclo viene dunque ripetuto lunghezza volte.\nIl secondo tipo di ciclo \u00e8 quello identificato dalla parola chiave while. Eccone un esempio:\nvar x = 0;\nwhile ( x < 5 ) {\n\tx++;\n}\nIl significato di questo ciclo \u00e8 semplice: finch\u00e9 x \u00e8 minore di 5, viene eseguita la parte di codice interna al while.\nI cicli sono molto utili, soprattuto se si pensa al concetto di array. Un array \u00e8 una variabile che contiene pi\u00f9 valori. Un esempio di array pu\u00f2 essere il seguente:\nvar numeri = [1, 2, 3, 4];\nquesto array contiene i numeri da 1 a 4.\nPer inserire successivamente un elemento in un array, \u00e8 necessario utilizzare l'istruzione di push. Per esempio, se vogliamo aggiungere l'elemento 5 nell'array numeri, \u00e8 necessario effettuare la seguente istruzione:\nnumeri.push( 5 );\nL'array che risulta da questa istruzione sar\u00e0 il seguente:\n[1, 2, 3, 4, 5] \nNota bene!\nOgni elemento di un array ha un numero, che indica la sua posizione all'interno dell'array stesso. Tale numero parte da 0, e viene cos\u00ec utilizzato:\nvar a = numeri[ 0 ];\nvar b = numeri[ 4 ];\nIn questo codice, a contiene il valore 1, che occupa la posizione 0 all'interno dell'array; la variabile b contiene invece il valore 5, che occupa la posizione 4.",
  
  "fileVirtuali": [
    { "nomeFile": "MeccanismoCaricamento.js",
      "consultazione": false,
      "codice": "var meccanismoCaricamento = function ( ) {\n  var magazzino = prelevaCarico();\n  var caricatoreTorretta = [];\n  var proiettiliScartati = [];\n  \n\/\/###START_MODIFICABILE###\n  for( i = 0; i < magazzino.length; ++i ) {\n    var proiettile = magazzino[i];\n    \n    if( proiettile.nucleoEsplosivo === 'plutonio' ) {\n      caricatoreTorretta.push( proiettile );\n    }\n    \n    if( proiettile.nucleoEsplosivo === 'plasma' ) {\n      caricatoreTorretta.push( proiettile  );\n    }\n    \n    if( proiettile.nucleoEsplosivo === 'sonico' ) {\n      caricatoreTorretta.push( proiettile );\n    }\n    \n    if( caricatoreTorretta.length >= 10 )\n      break;\n  }\n\/\/###END_MODIFICABILE###\n  \n  return caricatoreTorretta;\n}",
      "test": "(\nfunction () {\n  \n  var munizioni = meccanismoCaricamento();\n  var unici = [];\n  var esito = true;\n\n  $.each( munizioni, function ( i, m ) {\n    if( _munizioni.indexOf( m ) < 0 ) { esito = false; }\n    if( m.nucleoEsplosivo !== 'plasma') { esito = false; }\n    if( unici[m.id] !== undefined ) { esito = false; }\n    \n    unici[m.id] = true;\n  });\n  return esito;\n} ) ();",
      "descrizione": "L'obiettivo \u00e8 quello di inserire nel caricatore delle torrette solo le munizioni al plasma, come detto da Prosdocimo. I due array, caricatoreTorretta e proiettiliScartati devono essere utilizzati correttamente, inserendo nel primo solo le munizioni al plasma e nel secondo solo le munizioni scartate, cio\u00e8 quelle al plutonio e quelle soniche.",
      "aiuto": "Per risolvere il caricamento errato delle munizioni, \u00e8 necessario modificare due istruzioni all'interno del for.\nLa prima \u00e8 la seguente:\nif( proiettile.nucleoEsplosivo === 'plutonio' ) {\n\tcaricatoreTorretta.push( proiettile );\n}\nche deve diventare:\nif( proiettile.nucleoEsplosivo === 'plutonio' ) {\n  proiettiliScartati.push( proiettile  );\n}\nLa seconda \u00e8 la seguente:\nif( proiettile.nucleoEsplosivo === 'sonico' ) {\n\tcaricatoreTorretta.push( proiettile );\n}\nche deve diventare:\nif( proiettile.nucleoEsplosivo === 'sonico' ) {\n  proiettiliScartati.push( proiettile  );\n}",
      "messaggioFallimento": ""
    },
    
    { "nomeFile": "SistemaRaffreddamento.js",
      "consultazione": false,
      "codice": "var sistemaRaffreddamento = function ( ) {\n  T = rilevaTemperatura();\n\/\/###START_MODIFICABILE###\n  var sogliaTemperaturaMinima = 500;\n\/\/###END_MODIFICABILE###\n  \n  if( T >= 799 ) {\n\/\/###START_MODIFICABILE###\n    while( T === sogliaTemperaturaMinima ) {\n      azionaPompeRaffreddamento();\n      T = rilevaTemperatura();\n    }\n\/\/###END_MODIFICABILE###\n  }\n}",
      "test": "( function () {\n  var esito = true;\n  \n  _deltaTemperatura = 1;\n  _temperatura = 799;\n  _contatoreCicli = 0;\n  sistemaRaffreddamento();\n  if( _temperatura + _contatoreCicli !== 799 ) {\n    esito = false;\n  }\n    \n  if( _contatoreCicli <= 0 ) {\n    esito = false;\n  }\n  \n  return esito; \n}\n) ();",
      "descrizione": "L'obiettivo \u00e8 quello di impostare la corretta gestione del sistema di raffreddamento. Il primo punto da modificare \u00e8 la soglia della temperatura minima, cio\u00e8 fino a che punto si mantiene il blocco della torretta, durante il quale le pompe di raffreddamento abbassano la temperatura.\nQuesta soglia pu\u00f2 essere abbassata a piacere, considerando che, nel momento in cui la torretta supera la temperatura di 799\u00b0C, essa si bloccher\u00e0 e rimarr\u00e0 bloccata finch\u00e9 non si raggiunger\u00e0 tale soglia.\nUna soglia bassa permette dunque di sparare a lungo ma poi rimanere bloccati per molto tempo; una soglia alta permette di sparare poco ma con un tempo di raffreddamento (e dunque di blocco) decisamente minore.\nIl secondo punto da modificare \u00e8 la condizione del ciclo while: il ciclo deve rimanere attivo se la temperatura \u00e8 maggiore o uguale alla soglia decisa in precedenza.",
      "aiuto": "Come prima cosa \u00e8 necessario decidere la soglia minima della temperatura, per esempio:\nvar sogliaTemperaturaMinima = 300;\nOvviamente \u00e8 possibile lasciarla invariata.\nSuccessivamente la condizione del ciclo deve essere modificata nel seguente modo:\nwhile( T >= sogliaTemperaturaMinima ) {",
      "messaggioFallimento": "" 
    }
  ]
}