{
  "nomeLivello": "Mellara",
  "numeroLivello": 9,
  "costoAiuti": 18000,

  "dialogoIniziale":
  [
    {"nome": "Zurlin", "testo":"ciao" }
  ],
  
  "dialogoFinale":
  [
    {"nome": "Zurlin", "testo":"ciao" }
  ],
  
  "manuale": "Ti ricordi? Un array &#xE8; una variabile che contiene pi&#xF9; valori. Un esempio di array pu&#xF2; essere il seguente:\n<pre><code>var numeri = [1, 2, 3, 4];\n<\/code><\/pre>\nquesto array contiene i numeri da 1 a 4.<br>\nPer inserire successivamente un elemento in un array, &#xE8; necessario utilizzare l&#x27;istruzione di <tt>push<\/tt>. Per esempio, se vogliamo aggiungere l&#x27;elemento 5 nell&#x27;array <tt>numeri<\/tt>, &#xE8; necessario effettuare la seguente istruzione:\n<pre><code>numeri.push( 5 );\n<\/code><\/pre>\nL&#x27;array che risulta da questa istruzione sar&#xE0; il seguente:\n<pre><code>[1, 2, 3, 4, 5]\n<\/code><\/pre>\nNota bene! Ogni elemento di un array ha un numero, che indica la sua posizione all&#x27;interno dell&#x27;array stesso. Tale numero parte da 0, e viene cos&#xEC; utilizzato:\n<pre><code>var a = numeri[ 0 ];\nvar b = numeri[ 4 ];\n<\/code><\/pre>\nIn questo codice, <tt>a<\/tt> contiene il valore 1, che occupa la posizione 0 all&#x27;interno dell&#x27;array; la variabile <tt>b<\/tt> contiene invece il valore 5, che occupa la posizione 4.\nUna <b>struttura<\/b> \u00e8 invece simile ad una classe, ma possiede solamente campi e nessuna funzione. Eccone un esempio:\n<pre><code>var soldato = {grado: \"colonnello\", matricola: 150716};\n<\/code><\/pre>\n\u00c8 possibile accedere ad un campo di una struttura in maniera molto semplice:\n<pre><code>var matricola = soldato.matricola;\n<\/code><\/pre>\nIn questo caso, la variabile <tt>matricola<\/tt> conterr\u00e0 il valore 150716. ",

  "codiceLivello": "function Livello9 ( callbackFineLivello ) {\n  CoreLevel.call( this, callbackFineLivello );\n}\n\nLivello9.prototype = Object.create( CoreLevel.prototype );\nLivello9.prototype.constructor = Livello9;\n\nLivello9.prototype.inizializzaBasi = function ( ) {\n  this.coreGame.aggiungiBase( new BaseMilitare( 80,  430, false, 100, 'red', this.coreGame ) );\n  this.coreGame.aggiungiBase( new BaseMilitare( 130,  430, true, 100, 'cyan', this.coreGame ) );  \n  this.coreGame.aggiungiBase( new BaseMilitare( 180,  430, false, 100, 'red', this.coreGame ) );\n  this.coreGame.aggiungiBase( new BaseMilitare( 300,  430, true, 100, 'cyan', this.coreGame ) );\n  this.coreGame.aggiungiBase( new BaseMilitare( 350,  430, false, 100, 'red', this.coreGame ) );\n  this.coreGame.aggiungiBase( new BaseMilitare( 400,  430, true, 100, 'cyan', this.coreGame ) );\n}\n\nLivello9.prototype.inizializzaArmiNemiche = function ( ) {\n  var areaPertenza = this.coreGame.canvas.width;\n  var ritardoMassimo = 900 * (this.numeroOndata * 0.05);\n  var velMin = 1.8 + this.numeroOndata * 0.1;\n  var velMax = 2.0 + this.numeroOndata * 0.1;\n  var numeroMissili = 30 + Math.floor( this.numeroOndata );\n  var numeroMissiliSdoppiabili = rand( 0, numeroMissili );\n  var ritardoRand;\n  var bersagli = this.coreGame.bersagliAttaccabili();\n  \n  var bersagliPrioritari = [];\n  $.each( this.coreGame.basi, function ( i, b ) {\n    if( b.vitale === false )\n      bersagliPrioritari.push( {x: b.x + 15, y: b.y - 10, tipo: b} )\n  } );\n  var bersagliNonBasi = this.coreGame.bersagliAttaccabili().filter( function( b ) {\n    if( b.tipo instanceof BaseMilitare )\n      return false;\n    return true;\n  } );\n  var bersagliPrioritariEsauriti = true;\n  $.each( bersagliPrioritari, function( i, b ) {\n    if( b.tipo.attiva === true )\n      bersagliPrioritariEsauriti = false;\n  } )\n  if( bersagliPrioritariEsauriti === true )\n    var bersagli = this.coreGame.bersagliAttaccabili();\n  else\n    var bersagli = bersagliNonBasi.concat( bersagliPrioritari );\n  \n  for( var i = 0; i < numeroMissili ; i++ ) {\n    var xRand = rand( 0, areaPertenza );\n    var velRand = rand( velMin, velMax );\n    ritardoRand = rand( 0, ritardoMassimo );\n    this.coreGame.missiliNemici.push( new MissileNemico( {\n      coloreTestata: 'yellow',\n      coloreScia: 'red',\n      massimoRaggioEsplosione: 30\n    }, bersagli, areaPertenza, xRand, velRand,  ritardoRand, this.coreGame) );\n  }\n}\n\nLivello9.prototype.calcolaCoefficienteOndata = function ( ) {\n  return this.numeroOndata * 2.5;\n}\n\nLivello9.prototype.setupListeners = function ( ) { \n  var mySelf = this;\n  $( '.gameContainer' ).off();\n  $( '.gameContainer' ).focus();\n  \n  $( '.gameContainer' ).on( 'click', function ( ) {\n    mySelf.sparo( mySelf.coreGame.mirino.x, mySelf.coreGame.mirino.y, null );\n  } );\n  $( '.gameContainer' ).bind( 'keyup', function( event ) {\n    if( event.which === 32)\n      mySelf.sparoSpeciale( mySelf.coreGame.mirino.x, mySelf.coreGame.mirino.y );\n  });\n  \n  $( '.gameContainer' ).on( 'mouseover', function( event ) {\n    mySelf.coreGame.mirino.stato = Mirino.TRACCIAMENTO;\n  });\n  $( '.gameContainer' ).on( 'mouseout', function( ) {\n    mySelf.coreGame.mirino.stato = Mirino.SPENTO;\n  });\n  $( '.gameContainer' ).on( 'mousemove', function( event ) {\n    var offset = $(\".gameContainer\").offset();\n    mySelf.coreGame.mirino.inseguiX = event.pageX - offset.left;\n    mySelf.coreGame.mirino.inseguiY = event.pageY - offset.top;\n    mySelf.coreGame.mirino.cambiaMira();\n  });\n}\n\nLivello9.prototype.scegliTorretta = function ( x, y, tasto ) {\n  var nonFunzionante = function ( torretta ) {  \n    if( torretta.stato === BatteriaAntimissile.ATTIVA &&\n        torretta.numeroMissili > 0 &&\n        torretta.blocco === false )\n      return false;\n    else\n      return true;\n  }\n  \n  var torrette = this.coreGame.batterieAntimissile;\n  var torrettaSelezionata;\n  \n  if( 0 <= x && x < 170 ) {\n    torrettaSelezionata = 0;\n  }\n  if( 170 <= x && x < 340 ) {\n    torrettaSelezionata = 1;\n  }\n  if( 340 <= x && x <= 510 ) {\n    torrettaSelezionata = 2;\n  }\n  \n  if( nonFunzionante(torrette[torrettaSelezionata]) === true )\n    torrettaSelezionata = 1;\n  if( nonFunzionante(torrette[torrettaSelezionata]) === true )\n    torrettaSelezionata = 0;\n  if( nonFunzionante(torrette[torrettaSelezionata]) === true )\n    torrettaSelezionata = 2;\n  if( nonFunzionante(torrette[torrettaSelezionata]) === true )\n    return -1;\n    \n  return torrettaSelezionata;\n}\n\nLivello9.prototype.sparo = function ( x, y, tasto ) {\n\n  var indiceTorretta = this.scegliTorretta( x, y, tasto );\n  if( indiceTorretta === -1 )\n    return;\n  \n  var torretta = this.coreGame.batterieAntimissile[indiceTorretta];\n  var x1 = x + 10;\n  var x2 = x - 10;\n  var ySdoppio = (Math.abs(430 - y) \/ 2) + y;\n    \n  var distanzaX = Math.abs( x - torretta.x );\n  var distanzaY = Math.abs( y - torretta.y );\n  this.coreGame.missiliTerrestri.push( new _MissileTerrestreDoppio( {\n    xDiPartenza: torretta.x,\n    yDiPartenza: torretta.y,\n    xDiArrivo: x,\n    yDiArrivo: y,\n    coloreTestata: 'yellow',\n    coloreScia: 'blue',\n    massimoRaggioEsplosione: 30,\n    distanzaPerFrame: 7\n  }, this.coreGame, torretta.x - distanzaX\/2, ySdoppio, 2 ) );\n  \n  this.coreGame.aggiornaPunteggioMissiliSparati();\n  torretta.numeroMissili--;\n  torretta.temperatura += 100;\n  var temperaturaMinima = 500\n  torretta.temperaturaSblocco = temperaturaMinima;\n  if( torretta.temperatura >= 799 ) {\n    torretta.blocco = true;\n  };\n}\n\nLivello9.prototype.mostraSchermataIniziale = function ( punteggio ) {\n  var mySelf = this;\n  mySelf.coreGame.disegnaStatoGioco();\n  mySelf.coreGame.disegnaBatterieAntimissile();\n  var ctx = mySelf.ctx;\n  \n  this.intervalloSchermata = setInterval( function () {\n    mySelf.coreGame.disegnaStatoGioco();\n    mySelf.coreGame.disegnaBatterieAntimissile();\n    if( mySelf.numeroSchermata === 0 ) {\n      ctx.fillStyle = mySelf.coreGame.coloreTestoSecondario;\n      ctx.textAlign = \"center\"; \n      ctx.font = 'bold 20px arial';\n      ctx.fillText( \"Punteggio: \" + punteggio, \n                   mySelf.canvas.width\/2, mySelf.canvas.height\/2 - 20 - 120 );\n      ctx.textAlign = \"start\";\n      \n      ctx.fillStyle = mySelf.coreGame.coloreTestoPrimario;\n      ctx.textAlign = \"center\"; \n      ctx.font = 'bold 20px arial';\n      ctx.fillText( 'CLICK PER INIZIARE A GIOCARE', \n                   mySelf.canvas.width\/2, mySelf.canvas.height\/2 - 20 - 50 );\n      ctx.textAlign = \"start\";\n      \n      \/\/ parte fissa\n      ctx.textAlign = \"center\";\n      ctx.font = 'bold 20px arial';\n      ctx.fillStyle = mySelf.coreGame.coloreTestoSecondario;\n      ctx.fillText( 'Ondata ' + mySelf.numeroOndata, \n                   mySelf.canvas.width\/2, mySelf.canvas.height\/2 + 20 - 50);\n      ctx.textAlign = \"start\";\n      var img = document.getElementById(\"source-mouse-click\");\n      ctx.drawImage(img, \n                    mySelf.canvas.width\/2 - 100, mySelf.canvas.height\/2 + 40, 30, 80);\n      ctx.textAlign = \"left\";\n      ctx.fillStyle = mySelf.coreGame.coloreTestoSecondario;\n      ctx.fillText(\"Fare click sinistro\", \n                   mySelf.canvas.width\/2 - 40, mySelf.canvas.height\/2 + 40 + 40);\n      ctx.fillText(\"per sparare\", \n                   mySelf.canvas.width\/2 - 40, mySelf.canvas.height\/2 + 40 + 40 + 20);\n      ctx.textAlign = \"start\";\n    } else {\n      ctx.fillStyle = mySelf.coreGame.coloreTestoSecondario;\n      ctx.textAlign = \"center\"; \n      ctx.font = 'bold 20px arial';\n      ctx.fillText( \"Punteggio: \" + punteggio, \n                   mySelf.canvas.width\/2, mySelf.canvas.height\/2 - 20 - 120 );\n      ctx.textAlign = \"start\";\n      \n      ctx.textAlign = \"center\";\n      ctx.font = 'bold 20px arial';\n      ctx.fillStyle = mySelf.coreGame.coloreTestoSecondario;\n      ctx.fillText( 'Ondata ' + mySelf.numeroOndata, \n                   mySelf.canvas.width\/2, mySelf.canvas.height\/2 + 20 - 50);\n      ctx.textAlign = \"start\";\n      var img = document.getElementById(\"source-mouse-click\");\n      ctx.drawImage(img, \n                    mySelf.canvas.width\/2 - 100, mySelf.canvas.height\/2 + 40, 30, 80);\n      ctx.textAlign = \"left\";\n      ctx.fillStyle = mySelf.coreGame.coloreTestoSecondario;\n      ctx.fillText(\"Fare click sinistro\", \n                   mySelf.canvas.width\/2 - 40, mySelf.canvas.height\/2 + 40 + 40);\n      ctx.fillText(\"per sparare\", \n                   mySelf.canvas.width\/2 - 40, mySelf.canvas.height\/2 + 40 + 40 + 20);\n      ctx.textAlign = \"start\";    \n    }\n    mySelf.numeroSchermata = (mySelf.numeroSchermata + 1) % 2;\n  }, 500 );\n  \n  $( '.gameContainer' ).off();\n  $( '.gameContainer' ).one( 'click', function() {\n    clearInterval( mySelf.intervalloSchermata );\n    mySelf.preparazioneAvvio();\n  } );                     \n}\n\nLivello9.prototype.sparoSpeciale = function ( x, y ) {  \n  var munizioniDaUtilizzare = function ( base ) {\n    var n = base.numeroMissili;\n    if ( n > 6 )\n      return n - 6;\n    if ( n > 3 )\n      return n - 3;\n    if ( n > 1 )\n      return n - 1;\n    if ( n === 1 )\n      return 1;\n    return 0;\n  }\n  var munizioniUtilizzabili = [];\n  var sommaMunizioniUtilizzabili = 0;\n  $.each( this.coreGame.batterieAntimissile, function ( i, b ) {\n    if( b.stato === BatteriaAntimissile.ATTIVA ) {\n      munizioniUtilizzabili[i] = munizioniDaUtilizzare( b );\n      sommaMunizioniUtilizzabili += munizioniDaUtilizzare( b );\n    }\n  } );\n  \n  var area = 30 * sommaMunizioniUtilizzabili;\n  var inizio = x - area\/2;\n  var fine = x + area\/2;\n  var contatore = 0;\n  \n  var ordineDiFuoco = [];\n  while( sommaMunizioniUtilizzabili > 0 ) {\n    $.each( this.coreGame.batterieAntimissile, function ( i, b ) {\n      if( b.stato === BatteriaAntimissile.ATTIVA \n         && munizioniUtilizzabili[i] > 0) {\n        \n        --munizioniUtilizzabili[i];\n        --sommaMunizioniUtilizzabili;\n        \n        var torretta = b;\n        \n        var xSparo = inizio + (contatore * 30);\n        var ySparo = y;\n        ordineDiFuoco.push ({ x: xSparo, y: ySparo, numeroTorretta: i });\n        \n        ++contatore;\n      }\n    } );\n  }\n    \n  var torrette = [];\n  torrette[0] = new _TorrettaVirtuale ( 0 );\n  torrette[1] = new _TorrettaVirtuale ( 1 );\n  torrette[2] = new _TorrettaVirtuale ( 2 );\n\n  comandoSparoMultiplo( ordineDiFuoco, torrette );\n\n  var mySelf = this;\n  $.each( torrette, function ( i, t ) {\n    $.each( t._ordineSparo, function ( j, o ) {\n      var torretta = mySelf.coreGame.batterieAntimissile[i];\n      mySelf.coreGame.missiliTerrestri.push( new MissileTerrestre( {\n        xDiPartenza: torretta.x,\n        yDiPartenza: torretta.y,\n        xDiArrivo: o.x,\n        yDiArrivo: o.y,\n        coloreTestata: 'yellow',\n        coloreScia: 'blue',\n        massimoRaggioEsplosione: 30,\n        distanzaPerFrame: 10\n      }, mySelf.coreGame ) );\n      mySelf.coreGame.aggiornaPunteggioMissiliSparati();\n      torretta.numeroMissili--;\n    } );\n  } );\n    \n  \/\/torretta.temperatura += 100;\n  \/\/var temperaturaMinima = 500\n  \/\/torretta.temperaturaSblocco = temperaturaMinima;\n  \/\/if( torretta.temperatura >= 799 ) {\n  \/\/  torretta.blocco = true;\n  \/\/};\n}\n\nfunction _TorrettaVirtuale ( indice ) {\n  this.indice = indice;\n  this._ordineSparo = [];\n}\n\n_TorrettaVirtuale.prototype.cicloSparo = function ( x, y ) {\n  this._ordineSparo.push( { x: x, y: y } );\n}\n\nvar sceltaTorrettaMigliore = function ( x, y, _torrette ) {\n  var nonFunzionante = function ( torretta ) {  \n    if( torretta.stato === BatteriaAntimissile.ATTIVA &&\n        torretta.numeroMissili > 0 &&\n        torretta.blocco === false )\n      return false;\n    else\n      return true;\n  }\n  \n  var torrette = this.coreGame.batterieAntimissile;\n  var torrettaSelezionata;\n  \n  if( 0 <= x && x < 170 ) {\n    torrettaSelezionata = 0;\n  }\n  if( 170 <= x && x < 340 ) {\n    torrettaSelezionata = 1;\n  }\n  if( 340 <= x && x <= 510 ) {\n    torrettaSelezionata = 2;\n  }\n  \n  if( nonFunzionante(torrette[torrettaSelezionata]) === true )\n    torrettaSelezionata = 1;\n  if( nonFunzionante(torrette[torrettaSelezionata]) === true )\n    torrettaSelezionata = 0;\n  if( nonFunzionante(torrette[torrettaSelezionata]) === true )\n    torrettaSelezionata = 2;\n  if( nonFunzionante(torrette[torrettaSelezionata]) === true )\n    return undefined;\n    \n  return torrettaSelezionata;\n}",
  
  "fileVirtuali":
  [
    {"nomeFile": "ComandoSparoSingolo.js",
    "consultazione": true,
    "codice": "\/**********\nFunzione che comanda ad una torretta, scelta opportunamente, di\nlanciare un missile alla coordinata indicata.\n\nPrende come parametri:\n  - x: intero che indentifica la coordinata x del bersaglio;\n  - y: intero che indentifica la coordinata y del bersaglio;\n  - torrette: array di torrette.\n**********\/\nvar comandoSparoSingolo = function ( x, y, torrette ) {\n  var indiceTorretta = sceltaTorrettaMigliore( x, y, torrette );\n  if( indiceTorretta !== undefined ) {\n    var torretta = torrette[indiceTorretta];\n    torretta.cicloSparo( x, y );\n  }\n}"},
    {"nomeFile": "ComandoSparoMultiplo.js",
    "consultazione": false,
    "codice": "\/**********\nFunzione che comanda a tutte le torrette di sparare missili\nlungo una linea creando uno sbarramento di fuoco in cielo.\n\nPrende come parametri:\n  - ordiniDiFuoco: un array di oggetti con struttura \n    { numeroTorretta: 0, x: 416, y: 188 } dove x ed\n    y sono le coordinate a cui sparare mentre numeroTorretta\n    rappresenta l'identificatore della torretta a cui \u00e8 diretto\n    l'ordine;\n  - torrette: array di oggetti torretta le quali possiedono\n    un indice ( torretta.indice ) e consentono lo sparo\n    tramite il metodo torretta.cicloSparo().\n    \nObiettivo della funzione \u00e8 far sparare le torrette in accordo\ncon gli ordini contenuti in ordiniDiFuoco.\n**********\/\nvar comandoSparoMultiplo = function ( ordiniDiFuoco, torrette ) {\n\/\/###START_MODIFICABILE###\n  \/\/ Implementare la funzione!\n\/\/###END_MODIFICABILE###\n}",
    "test": "(\nfunction () {\n  var esito = true;\n\n  var torrette = [];\n  torrette[0] = new _TorrettaVirtuale ( 0 );\n  torrette[1] = new _TorrettaVirtuale ( 1 );\n  torrette[2] = new _TorrettaVirtuale ( 2 );\n\n  var ordiniDiFuoco = [];\n  for( var i = 0; i < rand(4, 4); ++i ) {\n    ordiniDiFuoco[i] = {\n      numeroTorretta: rand(0, 2),\n      x: rand(0, 510),\n      y: rand(0, 300)\n    }\n  }\n\n  var ordiniPerTorretta = [];\n  $.each( ordiniDiFuoco, function ( i, o ) {\n    ordiniPerTorretta[o.numeroTorretta] = [];\n  } );\n  $.each( ordiniDiFuoco, function ( i, o ) {\n    ordiniPerTorretta[o.numeroTorretta].push( {x: o.x, y: o.y} );\n  } );\n\n  comandoSparoMultiplo( ordiniDiFuoco, torrette );\n\n  $.each( torrette, function ( i, t ) {\n    if( ordiniPerTorretta[t.indice] === undefined )\n      return false;\n\n    var ordineTest = ordiniPerTorretta[t.indice];\n    var ordineUtente = t._ordineSparo;\n\n    ordineTest.sort( function( a, b ) { return a.x < b.x; } );\n    ordineUtente.sort( function( a, b ) { return a.x < b.x; } );\n\n    if( ordineTest.length !== ordineUtente.length )\n      esito = false;\n    else {\n      $.each( ordineTest, function ( j, o1 ) {\n        var o2 = ordineUtente[j];\n        if( o1.x !== o2.x || o1.y != o2.y )\n          esito = false;  \n      } );\n    }\n  } );\n\n  return esito;\n}\n) ();",
    "descrizione": "L'obiettivo \u00e8 la creazione di un'arma speciale in grado di eseguire un attacco speciale coordinato tra tutte le torrette, creando uno sbarramento di fuoco.<br>\nTale arma viene attivata premendo la barra spaziatrice.<br>\nIspirandoti alla funzione <tt>comandoSparoSingolo()<\/tt> dovrai implementare la funzione <tt>comandoSparoMultiplo()<\/tt>, in grado di fornire alle torrette gli ordini di sparo con le coordinate sulle quali dirigere i propri missili.",
    "aiuto": "L'implementazione della funzione <tt>comandoSparoMultiplo()<\/tt> pu\u00f2 essere cos\u00ec pensata:\n<pre><code>var l = ordiniDiFuoco.length;\nfor( var i = 0; i < l; ++i ) {\n  var ordine = ordiniDiFuoco[i];\n  var indiceTorretta = ordine.numeroTorretta;\n  var x = ordine.x;\n  var y = ordine.y;\n  var torretta = torrette[indiceTorretta];\n  torretta.cicloSparo( x, y );\n}",
    "messaggioFallimento": "Sparo multiplo non implementato correttamente."}
  ]
}