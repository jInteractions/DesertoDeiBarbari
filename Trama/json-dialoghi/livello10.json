{
  "nomeLivello": "La Divoratrice",
  "numeroLivello": 10,
  "costoAiuti": 20000,

  "dialogoIniziale":
  [
    {"nome": "Mellara",
    "testo": "Buongiorno a tutti. La Divoratrice &#xE8; stata avvistata non lontano dell&#x27;orbita di Angustina. Dobbiamo prepararci, perch&#xE9; sar&#xE0; qui a breve."},
    {"nome": "Ortiz",
    "testo": "Zurlin, Simeoni e Prosdocimo, siete pronti?"},
    {"nome": "Zurlin",
    "testo": "Pronta e combattiva, caro."},
    {"nome": "Simeoni",
    "testo": "Pronto, signore."},
    {"nome": "Prosdocimo",
    "testo": "Attenti! Eh eh eh."},
    {"nome": "Mellara",
    "testo": "Mi piace vedervi di buon umore. Spero che comprendiate comunque la gravit&#xE0; del momento. Qualcuno ha delle idee su come risolvere la questione Divoratrice?"},
    {"nome": "Ortiz",
    "testo": "La Divoratrice &#xE8; un&#x27;astronave di classe 0, grande il doppio della nave presidenziale e decisamente meglio armata. Possiede due torrette automatiche sui lati, che sparano a bersagli fermi ed in movimento."},
    {"nome": "Mellara",
    "testo": "L&#x27;attacco dei faragi viene accompagnato da dieci navi di classe 3 in orbita, che supportano la discesa della Divoratrice."},
    {"nome": "Ortiz",
    "testo": "La Divoratrice ha un unico punto debole: la pancia dell&#x27;astronave presenta infatti uno sfiato per i gas necessari al caricamento del polverizzatore. Sarebbe bene colpirla con l&#x27;arma pi&#xF9; grossa che abbiamo..."},
    {"nome": "Simeoni",
    "testo": "Potremmo costruire un missile nucleare, indirizzato con sufficiente precisione, per entrare in questo sfiato."},
    {"nome": "Zurlin",
    "testo": "Buona idea caro, anche se le torrette automatiche lo distruggerebbero appena uscito dalla rampa di lancio."},
    {"nome": "Prosdocimo",
    "testo": "Eh eh eh, acuta osservazione. Il problema sono le torrette automatiche..."},
    {"nome": "Mellara",
    "testo": "Protette da un campo di forza, dunque impossibili da abbattere con i missili che usiamo solitamente."},
    {"nome": "Simeoni",
    "testo": "Dobbiamo scortare il missile nucleare usando una torretta... ma in questo modo non riusciremmo a concentrarci sulle navi di classe 3 che ci bombardano dall&#x27;orbita."},
    {"nome": "Prosdocimo",
    "testo": "Beh, per quello ho un&#x27;ideuccia... eh eh eh. Ho sviluppato qualche pezzo di codice, per testare se fosse fossibile creare una tipologia di torretta in grado di puntare e sparare automaticamente ad un bersaglio."},
    {"nome": "Ortiz",
    "testo": "Saresti in grado di concluderlo?"},
    {"nome": "Prosdocimo",
    "testo": "Beh aiutato da loro sicuramente. Eh eh eh."},
    {"nome": "Zurlin",
    "testo": "Quindi scorteremmo il missile nucleare con la torretta centrale, comandata manualmente. Ai lati avremo due torrette automatiche, che ci permettono di non pensare ai missili lanciati dalle navi di classe 3. Il missile nucleare centra lo sfiato e bum! I faragi se ne tornano da dove sono venuti."},
    {"nome": "Simeoni",
    "testo": "Direi che abbiamo un piano."},
    {"nome": "Mellara",
    "testo": "Buona fortuna, soldati. Il destino della galassia &#xE8; nelle vostre mani, ma non credo sia necessario ricordarvelo."}
  ],
  
  "dialogoFinale":
  [
    {"nome": "Simeoni",
    "testo": "Ce l&#x27;abbiamo fatta! Ah ah ah!"},
    {"nome": "Ortiz",
    "testo": "Ben gli sta a quei faragi."},
    {"nome": "Mellara",
    "testo": "La galassia &#xE8; salva. Non sappiamo se torneranno o meno, ma quello che importa &#xE8; aver dimostrato che due culture che si uniscono sono meglio di due culture che si combattono."},
    {"nome": "Ortiz",
    "testo": "Adesso arriva il lavoro grosso. Entra in campo la diplomazia, mentre noi soldati... beh torneremo a marcire su pianeti come Bastiani."},
    {"nome": "Simeoni",
    "testo": "Del resto &#xE8; il nostro lavoro, generale. Prova ad immaginare: se non fossi mai stato su Bastiani, non si sarebbe forse mai arrivati a questa alleanza."},
    {"nome": "Ortiz",
    "testo": "&#xC8; giusto vederla cos&#xEC;."},
    {"nome": "Prosdocimo",
    "testo": "Abbiamo finito con i discorsi sul destino, la vita, l&#x27;universo e tutto quanto? Andiamo a festeggiare! Eh eh eh."},
    {"nome": "Zurlin",
    "testo": "Simeoni, posso parlarti un attimo? In privato."},
    {"nome": "Simeoni",
    "testo": "Certo."},
    {"nome": "Zurlin",
    "testo": "Bene, ora che siamo soli, caro... cio&#xE8;, colonnello. Adesso siamo alleati, quindi..."},
    {"nome": "Simeoni",
    "testo": "Cosa vuoi chiedermi, Zurlin?"},
    {"nome": "Zurlin",
    "testo": "Mi stai simpatico, questo te l&#x27;ho gi&#xE0; detto... mi piacerebbe che venissi su Tronk, con me. So che la tua curiosit&#xE0; prima o poi ti ci porter&#xE0;... ma vorrei che fosse adesso."},
    {"nome": "Simeoni",
    "testo": "Avevo effettivamente intenzione di venire, Zurlin. Magari posso congedarmi dall&#x27;esercito... e insegnare la programmazione! Ai bambini ibridi e terrestri... pensa: la prima scuola di programmazione mista!"},
    {"nome": "Zurlin",
    "testo": "Sarebbe fantastico..."},
    {"nome": "Simeoni",
    "testo": "Allora &#xE8; deciso! Verr&#xF2; con te su Tronk."},
    {"nome": "Zurlin",
    "testo": "Come sono contenta!"},
    {"nome": "Simeoni",
    "testo": "Ora torniamo ai festeggiamenti. Poi, un po&#x27; di meritato riposo e... domani sentir&#xF2; il generale per il mio congedo. Ma ora festeggiamo, su! Che domani avremo un&#x27;altra lunga giornata, nell&#x27;eterna notte di Bastiani..."}
  ],
  
  "manuale": "L'ultima parola chiave importante per comprendere il linguaggio JS \u00e8 <b>instanceof<\/b>.<br>\n<i>instanceof<\/i> viene utilizzata per capire se un oggetto appartiene o meno ad una classe.<br>\nPrendi l'esempio seguente, dove vengono creati alcuni oggetti:\n<pre><code>var fucile = new Arma();\nvar padella = new Utensile();\n<\/code><\/pre>\nI due oggetti sono stati creati da due classi diverse, ma possono essere facilmente riconosciute. Prendi per esempio la funzione seguente:\n<pre><code>var assegnaArma = function ( oggetto, soldato ) {\n  if ( oggetto instanceof Arma ) {\n    soldato.arma = oggetto;\n  }\n}\n<\/code><\/pre>\nChiamando tale funzione con l'oggetto <tt>padella<\/tt> non viene assegnata nessuna arma al soldato, perch\u00e9 <tt>padella<\/tt> \u00e8 di tipo <tt>Utensile<\/tt>, e non di tipo <tt>Arma<\/tt>. Se invece viene chiamata passandogli l'oggetto <tt>fucile<\/tt>, il soldato ricever\u00e0 il fucile come arma, perch\u00e9 <tt>fucile<\/tt> \u00e8 di tipo <tt>Arma<\/tt>.",

  "codiceLivello": "var _missiliSparati = [];\n\nvar diff = function ( a1, a2 ) {\n  var newA = a1.filter( function( x ) {\n    return a2.indexOf( x ) < 0;\n  } );\n  return newA;\n}\n\nfunction Livello10 ( callbackFineLivello ) {\n  CoreLevel.call( this, callbackFineLivello );\n}\n\nLivello10.prototype = Object.create( CoreLevel.prototype );\nLivello10.prototype.constructor = Livello10;\n\nLivello10.prototype.inizializzaLivello = function ( numeroOndata ) {\n  var mySelf = this;\n  \n  this.numeroOndata = numeroOndata;\n  \n  this.inizializzaMirino();\n  this.coreGame = new CoreGame( this.canvas, this.mirino, {\n    coloreSfondo: 'black',\n    coloreTerreno: 'red',\n    coloreTestoPrimario: 'blue',\n    coloreTestoSecondario: 'red'\n  });\n  var coeff = this.calcolaCoefficienteOndata();\n  this.coreGame.aggiornaCoefficienteOndata( coeff );\n  this.inizializzaTorrette();\n  \n  if( this.numeroOndata === 1 ) {\n    this.inizializzaBasi();\n  } else {\n    $.each( this.basi, function ( indice, base ) {\n      base.coreGame = mySelf.coreGame\n    } );\n    mySelf.coreGame.basi = mySelf.basi;\n  }\n  \n  this.inizializzaArmiNemiche();\n  this.inizializzaArmiTerrestri();\n}\n\nLivello10.prototype.inizializzaTorrette = function ( ) {\n  var coloreMissili = [ 'yellow', 'yellow', 'yellow', 'yellow', 'yellow', 'yellow', 'yellow', 'yellow', 'yellow', 'yellow' ];\n  \n  var mySelf = this;\n  \n  var filtroSx = function ( missile ) {\n    return ( missile.y > 10 && missile.x < mySelf.canvas.width\/2 && missile instanceof MissileNemico );\n  };\n  var filtroDx = function ( missile ) {\n    return ( missile.y > 10 && missile.x >= mySelf.canvas.width\/2 && missile instanceof MissileNemico );\n  };\n  \n  var opzioniBatteria1 = { \n    x: 35, \n    y: 410, \n    nMissili: 0, \n    nSoldati: 10, \n    colori: coloreMissili, \n    Tmin: 50, \n    Tmax: 1000, \n    deltaTempo: 70, \n    deltaRaffreddamento: 3\n  };\n  this.coreGame.aggiungiBatteriaAntimissile ( \n    new _TorrettaAutomaticaInterfaccia( 0, opzioniBatteria1, 100, true, filtroSx, true, 15, 10, 'yellow', this.coreGame) );\n  this.coreGame.aggiungiBatteriaAntimissile ( \n    new BatteriaAntimissile( 255, 410, 10, 10, coloreMissili, 50, 1000, 70, 10, this.coreGame ) );\n  var opzioniBatteria2 = { \n    x: 475, \n    y: 410, \n    nMissili: 0, \n    nSoldati: 10, \n    colori: coloreMissili, \n    Tmin: 50, \n    Tmax: 1000, \n    deltaTempo: 70, \n    deltaRaffreddamento: 3\n  };\n  this.coreGame.aggiungiBatteriaAntimissile ( \n    new _TorrettaAutomaticaInterfaccia( 2, opzioniBatteria2, 100, true, filtroDx, true, 15, 10, 'yellow', this.coreGame ) );  \n}\n\nLivello10.prototype.inizializzaArmiTerrestri = function ( ) {\n  this.missileNucleare = new MissileNucleare( 255, 410, 255, this.coreGame.minacce[ 0 ].y + 53, this.coreGame );\n  this.coreGame.missiliTerrestri.push( this.missileNucleare );\n}\n\nLivello10.prototype.inizializzaArmiNemiche = function ( ) {\n  var ampiezzaAreaPertenza = 50;\n  var ritardoMassimo = 1000;\n  var xRand;\n  var velRand;\n  var ritardoRand;\n  var bersagli = this.coreGame.bersagliAttaccabili();\n  var numeroMissili = 100;\n    \n  for( var i = 0; i < numeroMissili \/ 2 ; i++ ) {\n    xRand = rand( 0, ampiezzaAreaPertenza );\n    velRand = rand( 5, 5 );\n    ritardoRand = rand( 0, ritardoMassimo );\n    this.coreGame.missiliNemici.push( new MissileNemico( {\n      coloreTestata: 'yellow',\n      coloreScia: 'red',\n      massimoRaggioEsplosione: 10\n    }, bersagli, this.canvas.width, xRand, velRand,  ritardoRand, this.coreGame) );\n  }\n  \n  for( var i = numeroMissili \/ 2; i < numeroMissili; i++ ) {\n    xRand = rand( this.canvas.width - ampiezzaAreaPertenza, this.canvas.width );\n    velRand = rand( 5, 5 );\n    ritardoRand = rand( 0, ritardoMassimo );\n    this.coreGame.missiliNemici.push( new MissileNemico( {\n      coloreTestata: 'yellow',\n      coloreScia: 'red',\n      massimoRaggioEsplosione: 10\n    }, bersagli, this.canvas.width, xRand, velRand,  ritardoRand, this.coreGame ) );\n  }\n  \n  var astronaveNemica = new AstronaveNemica( this.ctx, this.coreGame );\n  this.coreGame.aggiungiMinaccia( astronaveNemica );\n  \n  var opzioniBatteria1 = {\n    x: astronaveNemica.x + 40, \n    y: astronaveNemica.y + 54, \n    nMissili: 0, \n    nSoldati: 10, \n    colori: [], \n    Tmin: 50, \n    Tmax: 1000, \n    deltaTempo: 70, \n    deltaRaffreddamento: 3\n  };\n  \n  var filtro = function ( missile ) {\n    return ( missile.y < 500 && missile.y > astronaveNemica.y && missile instanceof MissileNucleare );\n  };\n  \n  this.coreGame.aggiungiBatteriaAntimissile ( \n    new _TorrettaAutomatica( 0, opzioniBatteria1, -10000 + (this.numeroOndata*100), false, filtro, false, 0.5, 10, '#97F52D', this.coreGame) );\n  var opzioniBatteria2 = { \n    x: astronaveNemica.x + 260, \n    y: astronaveNemica.y + 54, \n    nMissili: 0, \n    nSoldati: 10, \n    colori: [], \n    Tmin: 50, \n    Tmax: 1000, \n    deltaTempo: 70, \n    deltaRaffreddamento: 3\n  };\n  this.coreGame.aggiungiBatteriaAntimissile ( \n    new _TorrettaAutomatica( 0, opzioniBatteria2, -10000 + (this.numeroOndata*100), false, filtro, false, 0.5, 10, '#97F52F', this.coreGame) );\n}\n\nLivello10.prototype.calcolaCoefficienteOndata = function ( ) {\n  return this.numeroOndata * 3.0;\n}\n\nLivello10.prototype.setupListeners = function ( ) { \n  var mySelf = this;\n  $( '.gameContainer' ).off();\n  $( '.gameContainer' ).focus();\n  \n  $( '.gameContainer' ).on( 'click', function ( ) {\n    mySelf.sparo( mySelf.coreGame.mirino.x, mySelf.coreGame.mirino.y, null );\n  } );\n  \n  $( '.gameContainer' ).on( 'mouseover', function( event ) {\n    mySelf.coreGame.mirino.stato = Mirino.TRACCIAMENTO;\n  });\n  $( '.gameContainer' ).on( 'mouseout', function( ) {\n    mySelf.coreGame.mirino.stato = Mirino.SPENTO;\n  });\n  $( '.gameContainer' ).on( 'mousemove', function( event ) {\n    var offset = $(\".gameContainer\").offset();\n    mySelf.coreGame.mirino.inseguiX = event.pageX - offset.left;\n    mySelf.coreGame.mirino.inseguiY = event.pageY - offset.top;\n    mySelf.coreGame.mirino.cambiaMira();\n  });\n}\n\nLivello10.prototype.scegliTorretta = function ( x, y, tasto ) {\n  var nonFunzionante = function ( torretta ) {  \n    if( torretta.stato === BatteriaAntimissile.ATTIVA &&\n        torretta.numeroMissili > 0 &&\n        torretta.blocco === false )\n      return false;\n    else\n      return true;\n  }\n  \n  var torrette = this.coreGame.batterieAntimissile;\n  var torrettaSelezionata = 1;\n  \n  if( nonFunzionante(torrette[torrettaSelezionata]) === true )\n    return -1;\n    \n  return torrettaSelezionata;\n}\n\nLivello10.prototype.sparo = function ( x, y, tasto ) {\n  var indiceTorretta = this.scegliTorretta( x, y, tasto );\n  if( indiceTorretta === -1 )\n    return;\n  \n  var torretta = this.coreGame.batterieAntimissile[indiceTorretta];\n  \n  this.coreGame.missiliTerrestri.push( new MissileTerrestre( {\n    xDiPartenza: torretta.x,\n    yDiPartenza: torretta.y,\n    xDiArrivo: x,\n    yDiArrivo: y,\n    coloreTestata: 'yellow',\n    coloreScia: 'blue',\n    massimoRaggioEsplosione: 30,\n    distanzaPerFrame: 7\n  }, this.coreGame ) );\n  \n  this.coreGame.aggiornaPunteggioMissiliSparati();\n  torretta.numeroMissili--;\n  torretta.temperatura += 100;\n  var temperaturaMinima = 500\n  torretta.temperaturaSblocco = temperaturaMinima;\n  if( torretta.temperatura >= 799 ) {\n    torretta.blocco = true;\n  };\n}\n\nLivello10.prototype.verificaFineLivello = function ( ) {\n  if( this.coreGame.minacce.length === 0 ) {\n    return true;  \n  }\n  \n  \n  var indice = this.coreGame.missiliTerrestri.indexOf( this.missileNucleare );\n  if( indice < 0 && this.missileNucleare.y > this.coreGame.minacce[0].y + 53 ) {\n    return false;\n  }\n  \n  if( this.coreGame.basi.filter( function ( base ) { return base.attiva === true } ).length === 0 )  {\n    return false;\n  }\n  return undefined;\n}\n\nLivello10.prototype.mostraSchermataIniziale = function ( punteggio ) {\n  var mySelf = this;\n  mySelf.coreGame.disegnaStatoGioco();\n  mySelf.coreGame.disegnaBatterieAntimissile();\n  var ctx = mySelf.ctx;\n  \n  this.intervalloSchermata = setInterval( function () {\n    mySelf.coreGame.disegnaStatoGioco();\n    mySelf.coreGame.disegnaBatterieAntimissile();\n    if( mySelf.numeroSchermata === 0 ) {\n      ctx.fillStyle = mySelf.coreGame.coloreTestoSecondario;\n      ctx.textAlign = \"center\"; \n      ctx.font = 'bold 20px arial';\n      ctx.fillText( \"Punteggio: \" + punteggio, \n                   mySelf.canvas.width\/2, mySelf.canvas.height\/2 - 20 - 120 );\n      ctx.textAlign = \"start\";\n      \n      ctx.fillStyle = mySelf.coreGame.coloreTestoPrimario;\n      ctx.textAlign = \"center\"; \n      ctx.font = 'bold 20px arial';\n      ctx.fillText( 'CLICK PER INIZIARE A GIOCARE', \n                   mySelf.canvas.width\/2, mySelf.canvas.height\/2 - 20 - 50 );\n      ctx.textAlign = \"start\";\n      \n      \/\/ parte fissa\n      ctx.textAlign = \"center\";\n      ctx.font = 'bold 20px arial';\n      ctx.fillStyle = mySelf.coreGame.coloreTestoSecondario;\n      ctx.fillText( 'Ondata ' + mySelf.numeroOndata, \n                   mySelf.canvas.width\/2, mySelf.canvas.height\/2 + 20 - 50);\n      ctx.textAlign = \"start\";\n      var img = document.getElementById(\"source-mouse-click\");\n      ctx.drawImage(img, \n                    mySelf.canvas.width\/2 - 100, mySelf.canvas.height\/2 + 40, 30, 80);\n      ctx.textAlign = \"left\";\n      ctx.fillStyle = mySelf.coreGame.coloreTestoSecondario;\n      ctx.fillText(\"Fare click sinistro\", \n                   mySelf.canvas.width\/2 - 40, mySelf.canvas.height\/2 + 40 + 40);\n      ctx.fillText(\"per sparare\", \n                   mySelf.canvas.width\/2 - 40, mySelf.canvas.height\/2 + 40 + 40 + 20);\n      ctx.textAlign = \"start\";\n    } else {\n      ctx.fillStyle = mySelf.coreGame.coloreTestoSecondario;\n      ctx.textAlign = \"center\"; \n      ctx.font = 'bold 20px arial';\n      ctx.fillText( \"Punteggio: \" + punteggio, \n                   mySelf.canvas.width\/2, mySelf.canvas.height\/2 - 20 - 120 );\n      ctx.textAlign = \"start\";\n      \n      ctx.textAlign = \"center\";\n      ctx.font = 'bold 20px arial';\n      ctx.fillStyle = mySelf.coreGame.coloreTestoSecondario;\n      ctx.fillText( 'Ondata ' + mySelf.numeroOndata, \n                   mySelf.canvas.width\/2, mySelf.canvas.height\/2 + 20 - 50);\n      ctx.textAlign = \"start\";\n      var img = document.getElementById(\"source-mouse-click\");\n      ctx.drawImage(img, \n                    mySelf.canvas.width\/2 - 100, mySelf.canvas.height\/2 + 40, 30, 80);\n      ctx.textAlign = \"left\";\n      ctx.fillStyle = mySelf.coreGame.coloreTestoSecondario;\n      ctx.fillText(\"Fare click sinistro\", \n                   mySelf.canvas.width\/2 - 40, mySelf.canvas.height\/2 + 40 + 40);\n      ctx.fillText(\"per sparare\", \n                   mySelf.canvas.width\/2 - 40, mySelf.canvas.height\/2 + 40 + 40 + 20);\n      ctx.textAlign = \"start\";    \n    }\n    mySelf.numeroSchermata = (mySelf.numeroSchermata + 1) % 2;\n  }, 500 );\n  \n  $( '.gameContainer' ).off();\n  $( '.gameContainer' ).one( 'click', function() {\n    clearInterval( mySelf.intervalloSchermata );\n    mySelf.preparazioneAvvio();\n  } );                     \n}\n\nfunction _MissileTorretta ( parametri, torretta, coreGame ) {\n  this.torretta = torretta;\n  this.coreGame = coreGame;\n  MissileTerrestre.call( this, parametri, coreGame );\n}\n\n_MissileTorretta.prototype = Object.create( MissileTerrestre.prototype );\n_MissileTorretta.prototype.constructor = _MissileTorretta;\n\n_MissileTorretta.prototype.update = function () {\n  if(this.yDiPartenza <= this.yDiArrivo) {\n    if( this.stato === Missile.ATTIVO && this.y >= this.yDiArrivo  ) {\n      this.x = this.xDiArrivo;\n      this.y = this.yDiArrivo;\n      this.stato = Missile.ESPLOSIONE;\n    }\n  }\n  else {\n    if( this.stato === Missile.ATTIVO && this.y <= this.yDiArrivo ) {\n      this.x = this.xDiArrivo;\n      this.y = this.yDiArrivo;\n      this.stato = Missile.ESPLOSIONE;\n    } \n  }\n  \n  if( this.stato === Missile.ATTIVO ) {\n    this.x += this.dx;\n    this.y += this.dy;\n  } else {\n    this.esplodi();\n  }\n}\n\n_MissileTorretta.prototype.disegna = function ( ctx, coreGame ) {\n  Missile.prototype.disegna.call( this, ctx, coreGame );\n}\n\nfunction MissileNucleare ( xDiPartenza, yDiPartenza, xDiArrivo, yDiArrivo, coreGame ) {\n  MissileTerrestre.call( this, {\n    xDiPartenza: xDiPartenza,\n    yDiPartenza: yDiPartenza,\n    xDiArrivo: xDiArrivo,\n    yDiArrivo: yDiArrivo,\n    coloreTestata: 'white',\n    coloreScia: 'white',\/\/'yellow',\n    massimoRaggioEsplosione: 50,\n    distanzaPerFrame: 0.4\n  }, coreGame );\n  this.coloreCorpo = 'white' \/\/#FF00FF';\n}\n\nMissileNucleare.prototype = Object.create( MissileTerrestre.prototype );\nMissileNucleare.prototype.constructor = MissileNucleare;\n\nMissileNucleare.prototype.disegna = function ( ctx, coreGame ) {\n  this.animazioneColore = (this.animazioneColore + 1) % Missile.COLORI.length;\n  if( this.stato === Missile.ATTIVO ) {\n    var n = 20;\n    \n    ctx.strokeStyle = this.coloreScia;\n    \/\/ctx.fillStyle = this.coloreScia;\n    ctx.lineWidth = 2;\n    ctx.beginPath();\n    ctx.moveTo( this.xDiPartenza, this.yDiPartenza );\n    ctx.lineTo( this.x, this.y );\n    ctx.closePath();\n    ctx.stroke();\n    \n    \/\/ctx.strokeStyle = this.animazioneColore;\n    ctx.fillStyle = 'white';\n    ctx.beginPath();\n    ctx.arc( this.x + this.dx*n, this.y + this.dy*2.2*n, 2, 0, 2 * Math.PI );\n    ctx.closePath();\n    ctx.fill();\n    \n    ctx.strokeStyle = this.coloreCorpo;\n    ctx.fillStyle = this.coloreCorpo;\n    ctx.lineWidth = 4;\n    ctx.beginPath();\n    ctx.moveTo( this.x + this.dx*n, this.y + this.dy*2*n );\n    ctx.lineTo( this.x - this.dx*n, this.y \/*+ this.dy*n*\/ );\n    ctx.closePath();\n    ctx.stroke(); \n  }\n  else if ( this.stato === Missile.ESPLOSIONE || \n            this.stato === Missile.IMPLOSIONE ) {\n    \n    ctx.fillStyle = 'red';\/\/Missile.COLORI[this.animazioneColore];\n    ctx.beginPath();\n    ctx.arc( this.x, this.y, this.raggioDiEsplosione, 0, 2 * Math.PI );\n    ctx.closePath();\n    \/\/ this.esplosioneAltriMissili( ctx, coreGame );\n    if ( coreGame.minacce[ 0 ].stato === AstronaveNemica.ATTIVO && this.y <= coreGame.minacce[ 0 ].y + 53 ) {\n      coreGame.minacce[ 0 ].distruggiti();\n    }\n    ctx.fill();\n  }\n}\n\nMissileNucleare.prototype.update = function () {\n  if( this.stato === Missile.ATTIVO && this.y <= this.yDiArrivo ) {\n    this.x = this.xDiArrivo;\n    this.y = this.yDiArrivo;\n    this.stato = Missile.ESPLOSIONE;\n  }\n  if( this.stato === Missile.ATTIVO ) {\n    this.x += this.dx;\n    this.y += this.dy;\n  } else {\n    this.esplodi();\n  }\n}\n\nMissileNucleare.prototype.esplodi = function () {  \n  if( this.stato === Missile.ESPLOSIONE ) {\n    this.raggioDiEsplosione += 2;\n  }\n  if( this.raggioDiEsplosione > this.massimoRaggioEsplosione ) {\n    this.stato = Missile.IMPLOSIONE;\n  }  \n  if( this.stato === Missile.IMPLOSIONE ) {\n    this.raggioDiEsplosione -= 1;\n  }\n  if( this.raggioDiEsplosione < 0 ) {\n    this.stato = Missile.ESPLOSO;\n  }\n}\n\nfunction _TorrettaAutomatica ( indice, opzioniBatteria, tempoRicarica, disegnaScritte, funzioneDiFiltroMissili, aggancio, velMissili, raggioEsplosione, coloreScia, coreGame ) {\n  this.indice = indice;\n  \n  \/\/ Chiamata al costruttore della classe base\n  BatteriaAntimissile.call(\n    this, \n    opzioniBatteria.x, \n    opzioniBatteria.y, \n    opzioniBatteria.nMissili, \n    opzioniBatteria.nSoldati, \n    opzioniBatteria.colori, \n    opzioniBatteria.Tmin, \n    opzioniBatteria.Tmax, \n    opzioniBatteria.deltaTempo, \n    opzioniBatteria.deltaRaffreddamento,\n    coreGame\n  );\n  \n  \/\/ Impostazioni torretta\n  this.tempoRicarica = tempoRicarica;\n  this.disegnaScritte = disegnaScritte;\n  this.coreGame = coreGame;\n  this.funzioneDiFiltroMissili = funzioneDiFiltroMissili;\n  this.aggancio = aggancio;\n  \n  \/\/ Impostazione missili sparati\n  this.velMissili = velMissili;\n  this.raggioDiEsplosione = raggioEsplosione;\n  this.coloreScia = coloreScia;\n  \n  \/\/ Stato interno\n  this.bersagliAgganciati = [];\n  this.missilePronto = true;\n  \n  if( this.tempoRicarica < 0 )\n    this.timerRicarica = setTimeout( \n      this.ricarica.bind( this, this ), rand(0, Math.abs( this.tempoRicarica )) );\n  else\n     this.timerRicarica = setTimeout( \n      this.ricarica.bind( this, this ), this.tempoRicarica );\n  };\n\n\/\/ Ereditariet\u00e0 da BatteriaAntimissile\n_TorrettaAutomatica.prototype = Object.create( BatteriaAntimissile.prototype );\n_TorrettaAutomatica.prototype.constructor = _TorrettaAutomatica;\n\n_TorrettaAutomatica.prototype.avvia = function ( ) {\n  if( this.tempoRicarica < 0 )\n    this.timerRicarica = setTimeout( \n      this.ricarica.bind( this, this ), rand(0, Math.abs( this.tempoRicarica )) );\n  else\n     this.timerRicarica = setTimeout( \n      this.ricarica.bind( this, this ), this.tempoRicarica );\n  }\n\n_TorrettaAutomatica.prototype.stop = function ( ) {\n  clearTimeout(this.timerRicarica);\n}\n\n_TorrettaAutomatica.prototype.ricarica = function ( mySelf ) {\n  mySelf.missilePronto = true;\n}\n\n_TorrettaAutomatica.prototype.update = function ( ) {\n  \/\/ Chiamo update classe base\n  BatteriaAntimissile.prototype.update.call( this );\n  \n  if( this.stato !== BatteriaAntimissile.ATTIVA )\n    return;\n  if( this.missilePronto !== true )\n    return;    \n    \n  var bersaglio = this.identificaBersaglio();\n  if( bersaglio !== undefined ) {\n    var coordinate = this.mira( bersaglio );\n    if( coordinate.status === true ) {\n      var missileSparato = this.spara( coordinate );\n      this.bersagliAgganciati.push( bersaglio );\n    }\n  }\n}\n\n_TorrettaAutomatica.prototype.identificaBersaglio = function ( ) {\n  var mySelf = this;\n  var missiliInGioco = this.coreGame.missiliNemici.concat(\n    this.coreGame.missiliTerrestri );\n  \n  missiliInGioco = missiliInGioco.filter( function ( m ) { \n    return m.stato === Missile.ATTIVO;\n  } );\n  \n  \/\/ Escludo i missili lanciati da me\n  missiliInGioco = missiliInGioco.filter( function ( m ) { \n    if( m instanceof _MissileTorretta )\n      if ( m.torretta === mySelf )\n        return false;\n    return true;\n  } );\n  \n  if( this.aggancio === true ) {\n    \/\/ Esludo i missili gi\u00e0 agganciati\n    missiliInGioco = diff(missiliInGioco, this.bersagliAgganciati); \n  }\n    \n  \/\/ Applico un filtro proprio della torretta\n  missiliInGioco = missiliInGioco.filter( this.funzioneDiFiltroMissili );\n  \/\/ Ordino per altezza\n  missiliInGioco.sort( function ( a, b ) {\n    var distanzaA = Math.sqrt(Math.pow(a.x - mySelf.x, 2) + Math.pow(a.y - mySelf.y, 2));\n    var distanzaB = Math.sqrt(Math.pow(b.x - mySelf.x, 2) + Math.pow(b.y - mySelf.y, 2));\n    return distanzaA <= distanzaB;    \n  } );    \n  \/\/ Prelevo il primo\n  return missiliInGioco.pop();\n}\n\n_TorrettaAutomatica.prototype.mira = function ( bersaglio ) {\n  var xi1 = bersaglio.x, \n      yi1 = bersaglio.y, \n      xf1 = bersaglio.xDiArrivo, \n      yf1 = bersaglio.yDiArrivo, \n      speed1 = bersaglio.velCaduta, \n      dx1 = bersaglio.dx, \n      dy1 = bersaglio.dy, \n      xi2 = this.x, \n      yi2 = this.y,\n      speed2 = this.velMissili;\n  \n  var distance1 = Math.sqrt(Math.pow(xf1 - xi1, 2) + \n\t\t\tMath.pow(yf1 - yi1, 2));\n  var distanceX1 = xf1 - xi1;\n  var distanceY1 = yf1 - yi1;\n  var time1 = distance1 \/ speed1;\n  \/*\n  console.log(\"originale:\")\n  console.log(\n    xi1,\n    yi1,\n    xf1,\n    yf1,\n    speed1,\n    dx1,\n    dy1,\n    xi2,\n    yi2  \n  );\n  console.log(\"----------------\")*\/\n    \n  for(var t1 = 0.0; t1 < time1; t1 += 1) {\n    var x1 = xi1 + dx1 * t1;\n    var y1 = yi1 + dy1 * t1;\n\n    var distanceX2 = x1 - xi2;\n    var distanceY2 = y1 - yi2;\n    var distance2 = Math.sqrt(Math.pow(distanceX2, 2) \n      + Math.pow(distanceY2, 2));\n    var t2 = distance2 \/ speed2;\n    var time2 = Math.ceil(distance2 \/ speed2);\n        \n    if( t1 - time2 === 0 ) { \n      var anticipoX = 2;\n      var anticipoY = 2;\n      return { status: true, x: x1 + anticipoX*dx1, y: y1 + anticipoY*dy1 };\n    }\n  }\n  return {status: false, x: 0, y: 0};\n}\n\n_TorrettaAutomatica.prototype.spara = function ( coordinate ) {\n  --this.nMissili;\n  this.temperatura += 5; \/\/this.aumentoTemperatura;\n  \n  var missile = new _MissileTorretta( {\n    xDiPartenza: this.x,\n    yDiPartenza: this.y,\n    xDiArrivo: coordinate.x,\n    yDiArrivo: coordinate.y,\n    coloreTestata: 'yellow',\n    coloreScia: this.coloreScia,\n    massimoRaggioEsplosione: this.raggioDiEsplosione,\n    distanzaPerFrame: this.velMissili }, this, this.coreGame );\n  this.coreGame.missiliTerrestri.push(missile);\n  \n  clearTimeout(this.timerRicarica);\n  if( this.tempoRicarica < 0 )\n    this.timerRicarica = setTimeout( \n      this.ricarica.bind( this, this ), rand(0, Math.abs( this.tempoRicarica )) );\n  else\n     this.timerRicarica = setTimeout( \n      this.ricarica.bind( this, this ), this.tempoRicarica );\n  this.missilePronto = false;\n  \n  return missile;\n}\n\n_TorrettaAutomatica.prototype.disegna = function ( ctx ) {\nthis.animazioneColore = (this.animazioneColore + 1) % Missile.COLORI.length;\n  if( this.stato === BatteriaAntimissile.ATTIVA && this.disegnaScritte === true ) {\n    var txt = \"[AUTO]\";\n    \/\/ Scrivi temperatura\n    var coloreTesto = 'black';    \n    ctx.fillStyle = coloreTesto;\n    ctx.font = 'bold 12px arial';\n    var dx = ctx.measureText(txt).width;\n    var dy = ctx.measureText(txt).height;\n    ctx.fillText( txt, this.x - dx\/2, this.y + 45 );\n  }\n    \n  \/\/ Anima esplosione\n  if( this.stato === BatteriaAntimissile.ESPLOSIONE || \n      this.stato === BatteriaAntimissile.IMPLOSIONE ) {\n    ctx.fillStyle = BatteriaAntimissile.COLORI[this.animazioneColore];\n    ctx.beginPath();\n    ctx.arc( this.x, this.y, this.raggioDiEsplosione, 0, 2 * Math.PI );\n    ctx.closePath();\n    ctx.fill();\n  }\n}\n\n_TorrettaAutomatica.prototype.distruggiti = function ( ) {\n  \/\/ Chiamo distruggiti classe base\n  this.stop();\n  BatteriaAntimissile.prototype.distruggiti.call( this );\n}\n\nfunction _TorrettaAutomaticaInterfaccia ( indice, opzioniBatteria, tempoRicarica, disegnaScritte, funzioneDiFiltroMissili, aggancio, velMissili, raggioEsplosione, coloreScia, coreGame ) {\n   _TorrettaAutomatica.call( this, indice, opzioniBatteria, tempoRicarica, disegnaScritte,\n    funzioneDiFiltroMissili, aggancio, velMissili, raggioEsplosione, coloreScia, coreGame );\n};\n\n_TorrettaAutomaticaInterfaccia.prototype = Object.create( _TorrettaAutomatica.prototype );\n_TorrettaAutomaticaInterfaccia.prototype.constructor = _TorrettaAutomaticaInterfaccia;\n\n_TorrettaAutomaticaInterfaccia.prototype.update = function ( ) {\n  \/\/ Chiamo update classe base\n  BatteriaAntimissile.prototype.update.call( this );\n\n  if( this.stato !== BatteriaAntimissile.ATTIVA )\n    return;\n  if( this.missilePronto !== true )\n    return; \n  \n  \n  var torrettaFittizia = new TorrettaAutomatica( this.indice, { x: this.x, y: this.y }, this.velMissili );\n  \n\n  var mySelf = this;\n  var missiliInGioco = this.coreGame.missiliNemici.concat(\n    this.coreGame.missiliTerrestri );\n  missiliInGioco = missiliInGioco.filter( function ( m ) { \n    return m.stato === Missile.ATTIVO;\n  } );\n  \/\/ Escludo i missili lanciati da me\n  missiliInGioco = missiliInGioco.filter( function ( m ) { \n    if( m instanceof _MissileTorretta )\n      if ( m.torretta === mySelf )\n        return false;\n    return true;\n  } );\n  if( this.aggancio === true ) {\n    \/\/ Esludo i missili gi\u00e0 agganciati\n    missiliInGioco = diff(missiliInGioco, this.bersagliAgganciati); \n  }\n  \/\/ Applico un filtro proprio della torretta\n  missiliInGioco = missiliInGioco.filter( this.funzioneDiFiltroMissili );\n  \/\/console.log(missiliInGioco)\n  var bersagli = [];\n  $.each( missiliInGioco, function ( i, m ) {\n    var ogg = { \n      x: m.x, \n      y: m.y, \n      xArrivo: m.xDiArrivo, \n      yArrivo: m.yDiArrivo, \n      velocita: m.velCaduta, \n      tipo: m }\n    bersagli.push( ogg );\n  } );\n  \n  \/\/console.log( bersagli )\n  \n  var bersaglio = torrettaFittizia.identificaBersaglio( bersagli );\n  \n  if( bersaglio !== undefined ) {\n    \n    var coordinate = torrettaFittizia.mira( bersaglio );\n    \/\/console.log(this.mira( bersaglio.tipo ));\n    \/\/console.log( coordinate );\n    \n    if( coordinate.status === true ) {\n      _missiliSparati = [];\n      torrettaFittizia.sparo( coordinate.x, coordinate.y );\n      \n      if( _missiliSparati.length !== 1 )\n        return;\n      \n      var missileSparato = this.spara( { status: null, x: _missiliSparati[0].x, y: _missiliSparati[0].y } );\n      this.bersagliAgganciati.push( bersaglio.tipo );\n    }\n  }\n}\n\nfunction MissileTorrettaAutomatica ( x, y ) {\n  this.x = x;\n  this.y = y;\n  \n  this.velocita = 10;\n  this.raggioEsplosione = 10;\n} \n\nMissileTorrettaAutomatica.prototype.lancia = function ( ) {\n  _missiliSparati.push( this );\n}\n\nvar coordinateIntercettaBersaglio = function ( \n    xBersaglio, yBersaglio, \n    xArrivo, yArrivo,\n    velocitaMissili, velocitaBersaglio, \n    posizioneTorretta ) {\n      \n  var distanzaX = xArrivo - xBersaglio;\n  var distanzaY = yArrivo - yBersaglio;\n  var scala = ( function ( d ) {\n    var distanza = Math.sqrt( Math.pow( distanzaX, 2 ) + Math.pow( distanzaY, 2 ) );\n    return distanza \/ d;\n  })( velocitaBersaglio );\n  \n      \n  var xi1 = xBersaglio; \n  var yi1 = yBersaglio;\n  var xf1 = xArrivo;\n  var yf1 = yArrivo; \n  var speed1 = velocitaBersaglio;\n  var dx1 = distanzaX \/ scala;\n  var dy1 = distanzaY \/ scala;\n  var xi2 = posizioneTorretta.x;\n  var yi2 = posizioneTorretta.y;\n  var speed2 = velocitaMissili;\n      \n  \/*\n  console.log(\"nuovo:\")\n  console.log(\n    xi1,\n    yi1,\n    xf1,\n    yf1,\n    speed1,\n    dx1,\n    dy1,\n    xi2,\n    yi2  \n  );\n  console.log(\"----------------\")*\/\n      \n  var distance1 = Math.sqrt(Math.pow(xf1 - xi1, 2) + \n\t\t\tMath.pow(yf1 - yi1, 2));\n  var distanceX1 = xf1 - xi1;\n  var distanceY1 = yf1 - yi1;\n  var time1 = distance1 \/ speed1;\n    \n  for(var t1 = 0.0; t1 < time1; t1 += 1) {\n    var x1 = xi1 + dx1 * t1;\n    var y1 = yi1 + dy1 * t1;\n\n    var distanceX2 = x1 - xi2;\n    var distanceY2 = y1 - yi2;\n    var distance2 = Math.sqrt(Math.pow(distanceX2, 2) \n      + Math.pow(distanceY2, 2));\n    var t2 = distance2 \/ speed2;\n    var time2 = Math.ceil(distance2 \/ speed2);\n    \n    if( t1 - time2 === 0 ) { \n      var anticipoX = 2;\n      var anticipoY = 2;\n      return { status: true, x: x1 + anticipoX*dx1, y: y1 + anticipoY*dy1 };\n    }\n  }\n      \n  return {status: false, x: 0, y: 0};\n      \n}",
  
  "fileVirtuali":
  [
    {"nomeFile": "OrdinamentoBersagli.js",
    "consultazione": true,
    "codice": "\/**********\nFunzione che ordina i bersagliNonOrdinati in ordine di altezza:\ni bersagli piu' vicini al suolo sono quelli piu' pericolosi.\n\nQuesta funzione prende come parametro:\n  - bersagliNonOrdinati: array di oggetti con struttura \n    { x: 157, y: 597, tipo: tipologia };\nQuesta funzione modifica permanentemente l'array passato, riordinandolo.\n**********\/\nvar ordinamentoBersagliPerAltezza = function ( bersagliNonOrdinati ) {\n  bersagliNonOrdinati.sort( function( bersaglio1, bersaglio2 ) {\n    return bersaglio1.y >= bersaglio2.y; \n  } );\n}" },
    {"nomeFile": "TorrettaAutomatica.js",
    "consultazione": false,
    "codice": "\/**********\nClasse che implementa le torrette automatiche in grado \ndi intercettare con un missile le minacce individuate.\n \nLa torretta automatica viene costruita con:\n  - numeroTorretta: intero che identifica la torretta (0 sinistra, 2 destra);\n  - posizione: struttura del tipo { x: 50, y: 430 } che identifica la posizione della torretta;\n  - velocitaMissili: intero che descrive la velocita dei missili sparati.\n**********\/\nfunction TorrettaAutomatica ( numeroTorretta, posizione, velocitaMissili ) {\n  this.numeroTorretta = numeroTorretta;\n  this.posizioneTorretta = posizione;\n  this.velocitaMissili = velocitaMissili;\n}\n\n\/**********\nFunzione che identifica il missile che sara' intercettato.\n\nPrende come parametro:\n  - bersagli: array di oggetti con struttura { x: 157, y: 597, tipo: tipologia }.\n    tipo e' a sua volta un oggetto di classe MissileNemico o MissileTerreste.\nRestituisce come valore:\n  - un oggetto di con struttura bersaglio { x: 157, y: 597, tipo: tipologia } \n**********\/\nTorrettaAutomatica.prototype.identificaBersaglio = function ( bersagli ) {\n  var lunghezzaAreaPortata = 510;\n  var altezzaAreaPortata = 460;\n  var bersagliCandidati = [];\n\/\/###START_MODIFICABILE###\n  for( var i = 0; i < bersagli.length; ++i ) {\n    var bersaglio = bersagli[i];\n    \n    if( this.numeroTorretta === 0 ) {      \n      if( bersaglio.tipo instanceof MissileNemico \n        && bersaglio.x < lunghezzaAreaPortata\/2 ) {\n        bersagliCandidati.push( bersaglio );\n      }\n    }\n  \n    if( this.numeroTorretta === 2 ) {\n      if( bersaglio.tipo instanceof MissileNemico \n        && bersaglio.x >= lunghezzaAreaPortata\/2 ) {\n        bersagliCandidati.push( bersaglio );\n        \n      }\n    }\n  }\n  ordinamentoBersagliPerAltezza( bersagliCandidati );\n  var candidato = bersagliCandidati[0];\n\/\/###END_MODIFICABILE###\n  return candidato;\n}\n\n\/**********\nFunzione che dato un bersaglio ricava le coordinate dove sparare il\nmissile in grado di intercettarlo.\n\nPrende come parametro:\n  - bersaglio: oggetto con struttura { x: 157, y: 597, tipo: tipologia }\nRestituisce come valore:\n  - un oggetto coordinata di struttura { x: 130, y: 657 }\n**********\/\nTorrettaAutomatica.prototype.mira = function ( bersaglio ) {\n  var xBersaglio = bersaglio.x;\n  var yBersaglio = bersaglio.y;\n  var xImpattoBersaglio = bersaglio.xArrivo;\n  var yImpattoBersaglio = bersaglio.yArrivo;\n  \n  var velocitaBersaglio = bersaglio.velocita;\n  \n  var coordinate = coordinateIntercettaBersaglio( \n    xBersaglio, yBersaglio, \n    xImpattoBersaglio, yImpattoBersaglio,\n    this.velocitaMissili, velocitaBersaglio, \n    this.posizioneTorretta ); \n  \n  return coordinate;\n}\n\n\/**********\nFunzione che effettua il lancio di un missile verso\nle coordinate, passate come parametro.\n**********\/\nTorrettaAutomatica.prototype.sparo = function ( x, y ) {\n  var missile = new MissileTorrettaAutomatica( x, y );\n  missile.lancia();\n}\n\n\/**********\nFunzione che descrive il processo di identificazione, mira e sparo\nnecessari ad ogni missile per intercettare una minaccia.\nQuesta funzione prende come parametro:\n  - bersagliPossibili: un array di oggetti con \n    struttura { x: 157, y: 597, tipo: tipologia } che rappresentano\n    tutti i missili (amici e non) in volo in quel momento.    \nObiettivo di questa funzione \u00e8 permettere l'indentificazione di\nun bersaglio tra quelli possibili, ricavare le coordinate per\nintercettarlo ed infine sparare un missile.\n**********\/\nTorrettaAutomatica.prototype.cicloSparoAutomatico = function ( bersagliPossibili ) {\n\/\/###START_MODIFICABILE###\n  var bersaglioAgganciato = this.identificaBersaglio( bersagliPossibili );\n  \n  var coordinate = this.mira( bersaglioAgganciato );\n  \n  this.sparo( coordinate.x, coordinate.y );\n\/\/###END_MODIFICABILE###  \n}",
    "test": "(\nfunction ( ) {\n  var esito = true;\n\n  var indiciT = [0, 2]\n  var numeroTorretta = indiciT[rand(0, 1)];\n  var x = rand( 0, 100 );\n  var y = 430\n  var torretta = new TorrettaAutomatica( numeroTorretta, {x: x, y: y}, 2 );\n  var bersagli = [];\n  var tipiBersagli = [ new MissileTerrestre( { xDiPartenza: 0,\n                        yDiPartenza: 0,\n                        xDiArrivo: 100,\n                        yDiArrivo: 100,\n                        coloreTestata: 'yellow',\n                        coloreScia: 'blue',\n                        massimoRaggioEsplosione: 30,\n                        distanzaPerFrame: 7\n                       }, null ),\n                       new MissileNemico( {\n                        coloreTestata: 'yellow',\n                        coloreScia: 'red',\n                        massimoRaggioEsplosione: 10\n                       }, [ {x: 200, y: 200} ], 0, 0, 1,  1, null ) ];\n\n  for( var i = 0; i < rand(50, 50); ++i ) {\n    bersagli.push ( { x: rand(0, 510), y: rand(150, 250), \n      xArrivo: rand(0, 510), yArrivo: 430, \n      velocita: rand(1.0, 1.0), tipo: tipiBersagli[rand(0, 1)] } );\n  }\n\n  _missiliSparati = []; \n  var candidati = bersagli.filter( function ( b ) {\n    if( numeroTorretta === 0 )\n      return (b.tipo instanceof MissileNemico && b.x < 510\/2 );\n    if( numeroTorretta === 2 )\n      return (b.tipo instanceof MissileNemico && b.x >= 510\/2);\n  } );\n  \n  ordinamentoBersagliPerAltezza( candidati );\n  var bersaglio = candidati[0];\n  \n  var coordinate = coordinateIntercettaBersaglio( bersaglio.x, bersaglio.y, \n    bersaglio.xArrivo, bersaglio.yArrivo,\n    2, bersaglio.velocita, torretta.posizioneTorretta );  \n  \n  torretta.cicloSparoAutomatico( bersagli );\n\n  if( _missiliSparati.length !== 1 ) {\n    return false;\n  }\n  \n  var missile = _missiliSparati[0];\n  if( missile.x !== coordinate.x || missile.y !== coordinate.y )\n     esito = false;\n\n  return esito;\n} ) ();",
    "descrizione": "L'obiettivo \u00e8 rendere le due torrette laterali automatiche. Per fare ci\u00f2 \u00e8 necessario scrivere la funzione che consente di identificare i bersagli corretti.<br>\nL'area di sparo \u00e8 larga 510 unit\u00e0 sull'asse <i>x<\/i>: la torretta di sinistra dovr\u00e0 occuparsi esclusivamente dei missili nemici presenti nella prima met\u00e0 di essa, dunque entro 255 unit\u00e0; la torretta destra invece si dovr\u00e0 occupare solamente dei missili nemici oltre la met\u00e0, dunque con una coordinata <i>x<\/i> maggiore di 255. Inoltre bisogna prestare attenzione affinch\u00e9 tali torrette identifichino i nostri missili come non ostili e dunque non li abbattano.<br>\nRicapitolando, dato un array chiamato <tt>bersagli<\/tt> contenente tutti i missili in volo (amici e nemici), si dovr\u00e0:\n<li> escludere i missili amici (appartenenti alla classe <tt>MissileTerrestre<\/tt>); <\/li>\n<li> includere i missili nemici (appartenenti alla classe <tt>MissileNemico<\/tt>); <\/li>\n<li> includere solo i missili nella met\u00e0 di area di sparo corrispondente alla posizione della torretta; <\/li>\n<li> ricorda: le torrette hanno un identificatore ciascuna, chiamato <tt>numeroTorretta<\/tt>; quella sinistra lo ha uguale a 0 e quella destra uguale a 2. <\/li> <br>\nUna volta individuati i candidati, si dovr\u00e0 identificare quello pi\u00f9 urgente, considerando la funzione <tt>ordinamentoBersagliPerAltezza()<\/tt>.<br>\nLa funzione <tt>identificaBersaglio()<\/tt> alla fine dovr\u00e0 ritornare uno ed un solo bersaglio.",
    "aiuto": "Un esempio di implementazione della funzione <tt>identificaBersaglio()<\/tt> pu\u00f2 essere la seguente:\n<pre><code>var lunghezzaAreaPortata = 510;\nvar altezzaAreaPortata = 460;\nvar bersagliCandidati = [];\nfor( var i = 0; i < bersagli.length; ++i ) {\n  var bersaglio = bersagli[i];\n  if( this.numeroTorretta === 0 ) {\n    if( bersaglio.tipo instanceof MissileNemico \n    && bersaglio.x < lunghezzaAreaPortata\/2 ) {\n      bersagliCandidati.push( bersaglio );\n    }\n  }\n  if( this.numeroTorretta === 2 ) {\n    if( bersaglio.tipo instanceof MissileNemico \n    && bersaglio.x >= lunghezzaAreaPortata\/2 ) {\n      bersagliCandidati.push( bersaglio );\n    }\n  }\n}\nordinamentoBersagliPerAltezza( bersagliCandidati );\nvar candidato = bersagliCandidati.pop(); \/\/ oppure bersagliCandidati[0]\nreturn candidato;\n<\/code><\/pre>",
    "messaggioFallimento": "Torretta automatica non implementata a dovere."}
  ]
}