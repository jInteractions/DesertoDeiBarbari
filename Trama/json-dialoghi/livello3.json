{
  "nomeLivello": "Il pilota",
  "numeroLivello": 3,
  "costoAiuti": 6000,

  "dialogoIniziale":
  [
    {"nome": "Prosdocimo",
    "testo": "Eh eh eh!"},
    {"nome": "Simeoni",
    "testo": "Cos&#x27;hai da ridere, Prosdocimo?"},
    {"nome": "Prosdocimo",
    "testo": "Non ti ha convocato, eh? Il generale..."},
    {"nome": "Simeoni",
    "testo": "No, effettivamente &#xE8; strano. Avr&#xE0; da fare, alla fine detiene il comando di tutta la linea di fuoco di Bastiani."},
    {"nome": "Prosdocimo",
    "testo": "Certo, certo, anche se questo &#xE8; il punto che soffre maggiormente gli attacchi del Nemico. Poi, c&#x27;&#xE8; quel pianeta misterioso..."},
    {"nome": "Simeoni",
    "testo": "Quello nel file di configurazione planetaria? Quelle scritte solo di 0 e 1? Hai ragione, c&#x27;&#xE8; qualcosa di misterioso. Ma un soldato non ha tempo per i misteri, quando c&#x27;&#xE8; una guerra da combattere."},
    {"nome": "Prosdocimo",
    "testo": "Certo, certo. Vedo che le torrette hanno qualche problema..."},
    {"nome": "Simeoni",
    "testo": "Non avvicinarti, &#xE8; pur sempre un&#x27;area militare."},
    {"nome": "Prosdocimo",
    "testo": "Eh eh eh, hai ragione. Per&#xF2; secondo me... secondo me le torrette hanno qualche problema. Per l&#x27;esattezza due: uno sulle munizioni caricate ed uno sul sistema di raffreddamento."},
    {"nome": "Simeoni",
    "testo": "A volte mi chiedo come tu faccia a sapere tutte queste cose."},
    {"nome": "Prosdocimo",
    "testo": "Non preoccuparti, pensa solo che ti sto aiutando. Per carit&#xE0; umana o amicizia: sta a te deciderlo. Comunque, lo sai che esistono diversi tipi di cariche per le munizioni,  vero?"},
    {"nome": "Simeoni",
    "testo": "Me l&#x27;hanno spiegato durante l&#x27;addestramento: munizioni al plasma, al plutonio e soniche. Qual &#xE8; il punto?"},
    {"nome": "Prosdocimo",
    "testo": "Il punto &#xE8; che quelle al plutonio e quelle soniche potrebbero essere, come dire, fallate. Eh eh eh..."},
    {"nome": "Simeoni",
    "testo": "Dunque devo utilizzare solo quelle al plasma?"},
    {"nome": "Prosdocimo",
    "testo": "Esattamente. Scarta le altre, vedrai che il sistema te lo permette."},
    {"nome": "Simeoni",
    "testo": "Per quanto riguarda il sistema di raffreddamento? Io non vedo nessun problema."},
    {"nome": "Prosdocimo",
    "testo": "Beh, se per te le torrette esplodono a causa di un problema inesistente, hai un problema tu. Eh eh eh. Il sistema di raffreddamento &#xE8; stato manomesso: le torrette invece che fermarsi quando si surriscaldano, esplodono. Bum. Eh eh eh."},
    {"nome": "Simeoni",
    "testo": "Devo controllare il codice relativo a quel sistema... grazie Prosdocimo. Ti sono debitore."},
    {"nome": "Prosdocimo",
    "testo": "Attento a dire queste cose, potrei prenderti alla lettera. Eh eh eh..."}
  ],
  
  "dialogoFinale":
  [
    {"nome": "Simeoni",
    "testo": "Capitano Simeoni a rapporto, signore."},
    {"nome": "Ortiz",
    "testo": "Ottimo lavoro Simeoni, con quelle torrette."},
    {"nome": "Simeoni",
    "testo": "Grazie, signore."},
    {"nome": "Ortiz",
    "testo": "Non dormire sugli allori, per&#xF2;. Il Nemico continua a batterci, anche se forse... le cose stanno per cambiare."},
    {"nome": "Simeoni",
    "testo": "Hai scoperto qualcosa, signore?"},
    {"nome": "Ortiz",
    "testo": "Abbiamo abbattuto un caccia nemico, a pochi chilometri da qui. Il pilota &#xE8; conciato male, ma lo stiamo sistemando. Spero di riuscire ad interrogarlo, questa notte. Potremmo ricavare grandi benefici da questo incontro. &#xC8; il primo prigioniero che riusciamo a prendere... e dunque il primo punto di contatto tra le nostre culture. Gli esseri umani non hanno mai parlato con nessuno che venisse dall&#x27;altro capo del deserto dei Barbari... sar&#xE0; sicuramente interessante."},
    {"nome": "Simeoni",
    "testo": "Immagino di non poter partecipare a questo colloquio, signore."},
    {"nome": "Ortiz",
    "testo": "Immagini bene. Ma se tutto va come deve andare... parlerai presto con lei."},
    {"nome": "Simeoni",
    "testo": "Lei?"},
    {"nome": "Ortiz",
    "testo": "Ti ho gi&#xE0; detto troppo, solo perch&#xE9; in fondo mi sei simpatico. Ora vai a dormire, capitano. Domani un&#x27;altra..."},
    {"nome": "Simeoni",
    "testo": "... lunga giornata ci attende nell&#x27;eterna notte di Bastiani."}
  ],
  
  "manuale": "Un punto molto importante del codice sorgente del sistema antimissilistico Hob-2000 riguarda il concetto di <b>ciclo<\/b>.<br>\nUn ciclo &#xE8; formato da due cose: una condizione ed un corpo. Il corpo viene eseguito finch&#xE9; vale la condizione.<br>\nEsistono due tipi principali di ciclo: il primo &#xE8; identificato dalla parola chiave <b>for<\/b>, il secondo dalla parola chiave <b>while<\/b>.<br>\nIl ciclo <i>for<\/i> &#xE8; strutturato nella seguente maniera:\n<pre><code>var x = 0;\nfor ( var i = 0; i &#x3C; lunghezza; i++ ) {\n&#x9;x++;\n}\n<\/code><\/pre>\nNota bene! La scorciatoia <tt>i++<\/tt> ha lo stesso significato dell&#x27;istruzione <tt>i = i + 1<\/tt>. Stesso vale per <tt>x++<\/tt>.<br>\nQuesta scrittura ha un significato semplice: partendo da 0, si controlla il valore di <tt>i<\/tt>. L&#x27;istruzione interna al <i>for<\/i>, cio&#xE8; <tt>x++<\/tt>, viene eseguita finch&#xE9; <tt>i<\/tt>, che viene incrementata ad ogni giro del ciclo, non &#xE8; lunga come <tt>lunghezza<\/tt>. Scomponiamo le operazioni:<br>\n<li> viene creata una variabile <tt>i<\/tt>, che contiene il valore 0;<\/li>\n<li> se <tt>i<\/tt> &#xE8; minore di <tt>lunghezza<\/tt>, si va avanti, altrimenti si esce dal ciclo;<\/li>\n<li> <tt>i<\/tt> viene incrementata, cio&#xE8; contiene ora il valore 0+1, cio&#xE8; 1;<\/li>\n<li> si esegue il codice interno al ciclo, dunque <tt>x<\/tt> diventa uguale a 1;<\/li>\n<li> si controlla se <tt>i<\/tt> (ora uguale a 1) &#xE8; minore di <tt>lunghezza<\/tt>: se lo &#xE8;, si torna dentro al ciclo, altrimenti si esce.<\/li>\nIl ciclo viene dunque ripetuto <tt>lunghezza<\/tt> volte.<br>\nIl secondo tipo di ciclo &#xE8; quello identificato dalla parola chiave <i>while<\/i>. Eccone un esempio:\n<pre><code>var x = 0;\nwhile ( x &#x3C; 5 ) {\n&#x9;x++;\n}\n<\/code><\/pre>\nIl significato di questo ciclo &#xE8; semplice: finch&#xE9; <tt>x<\/tt> &#xE8; minore di 5, viene eseguita la parte di codice interna al <i>while<\/i>.<br>\nI cicli sono molto utili, soprattuto se si pensa al concetto di <b>array<\/b>. Un array &#xE8; una variabile che contiene pi&#xF9; valori. Un esempio di array pu&#xF2; essere il seguente:\n<pre><code>var numeri = [1, 2, 3, 4];\n<\/code><\/pre>\nquesto array contiene i numeri da 1 a 4.<br>\nPer inserire successivamente un elemento in un array, &#xE8; necessario utilizzare l&#x27;istruzione di <tt>push<\/tt>. Per esempio, se vogliamo aggiungere l&#x27;elemento 5 nell&#x27;array <tt>numeri<\/tt>, &#xE8; necessario effettuare la seguente istruzione:\n<pre><code>numeri.push( 5 );\n<\/code><\/pre>\nL&#x27;array che risulta da questa istruzione sar&#xE0; il seguente:\n<pre><code>[1, 2, 3, 4, 5]\n<\/code><\/pre>\nNota bene! Ogni elemento di un array ha un numero, che indica la sua posizione all&#x27;interno dell&#x27;array stesso. Tale numero parte da 0, e viene cos&#xEC; utilizzato:\n<pre><code>var a = numeri[ 0 ];\nvar b = numeri[ 4 ];\n<\/code><\/pre>\nIn questo codice, <tt>a<\/tt> contiene il valore 1, che occupa la posizione 0 all&#x27;interno dell&#x27;array; la variabile <tt>b<\/tt> contiene invece il valore 5, che occupa la posizione 4.",

  "codiceLivello": "function Livello3 ( callbackFineLivello ) {\n  CoreLevel.call( this, callbackFineLivello );\n}\n\nLivello3.prototype = Object.create( CoreLevel.prototype );\nLivello3.prototype.constructor = Livello3;\n\nLivello3.prototype.inizializzaArmiNemiche = function () {\n  var areaPertenza = this.coreGame.canvas.width;\n  var ritardoMassimo = 300 * (this.numeroOndata * 0.05);\n  var velMin = 1.1 + this.numeroOndata * 0.05;\n  var velMax = 1.3 + this.numeroOndata * 0.05;\n  var numeroMissili = 15 + Math.floor( this.numeroOndata );\n  var ritardoRand;\n  var bersagli = this.coreGame.bersagliAttaccabili();\n  \n  for( var i = 0; i < numeroMissili ; i++ ) {\n    var xRand = rand( 0, areaPertenza );\n    var velRand = rand( velMin, velMax );\n    ritardoRand = rand( 0, ritardoMassimo );\n    this.coreGame.missiliNemici.push( new MissileNemico( {\n      coloreTestata: 'yellow',\n      coloreScia: 'red',\n      massimoRaggioEsplosione: 30\n    }, bersagli, areaPertenza, xRand, velRand,  ritardoRand, this.coreGame) );\n  }\n}\n\nLivello3.prototype.calcolaCoefficienteOndata = function ( ) {\n  return this.numeroOndata * 1.2;\n}\n\nLivello3.prototype.inizializzaTorrette = function ( ) {\n  var coloreMissili = [];\n  var nSoldati = 10;\n  var Tmin = 50;\n  var Tmax = 1000;\n  var deltaTempo = 70;\n  var deltaRaffreddamento = 3;\n  var nMissili = 0;\n  \n  \/\/ Inizializzo munizioni per torrette\n  this.munizioni = [];\n  this.munizioni[0] = [];\n  this.munizioni[1] = [];\n  this.munizioni[2] = [];\n  \n  this.munizioni[0] = meccanismoCaricamento();\n  this.munizioni[1] = meccanismoCaricamento();\n  this.munizioni[2] = meccanismoCaricamento();\n  \n  var scegliColoreMissile = function ( tipo ) {\n    switch( tipo ) { \n      case 'plutonio': return '#33CCFF';\n      case 'plasma': return 'blue';\n      case 'sonico': return 'red';\n    }\n  }\n  \n  coloreMissili = [];\n  nMissili = (this.munizioni[0]).length;\n  $.each( this.munizioni[0], function ( i, m ) {\n    coloreMissili[i] = scegliColoreMissile( m.nucleoEsplosivo );    \n  } );\n  this.coreGame.aggiungiBatteriaAntimissile(\n    new BatteriaAntimissile ( 35, 410, nMissili, nSoldati, coloreMissili, Tmin, Tmax, deltaTempo, deltaRaffreddamento, this.coreGame )\n  );\n  \n  coloreMissili = [];\n  nMissili = (this.munizioni[1]).length;\n  $.each( this.munizioni[1], function ( i, m ) { \n    coloreMissili[i] = scegliColoreMissile( m.nucleoEsplosivo );\n  } );\n  this.coreGame.aggiungiBatteriaAntimissile(\n    new BatteriaAntimissile ( 255, 410, nMissili, nSoldati, coloreMissili, Tmin, Tmax, deltaTempo, deltaRaffreddamento, this.coreGame )\n  );\n  \n  coloreMissili = [];\n  nMissili = (this.munizioni[2]).length;\n  $.each( this.munizioni[2], function ( i, m ) { \n    coloreMissili[i] = scegliColoreMissile( m.nucleoEsplosivo );\n  } );\n  this.coreGame.aggiungiBatteriaAntimissile(\n    new BatteriaAntimissile ( 475, 410, nMissili, nSoldati, coloreMissili, Tmin, Tmax, deltaTempo, deltaRaffreddamento, this.coreGame )\n  );\n};\n\nLivello3.prototype.scegliTorretta = function ( x, y, tasto ) {\n  var indiceTorretta = 0;\n  switch(tasto) {\n    case 49: indiceTorretta = 0; break;\n    case 50: indiceTorretta = 1; break;\n    case 51: indiceTorretta = 2; break;\n    default: return -1;\n  }\n  \n  var torrettaAttuale = this.coreGame.batterieAntimissile[ indiceTorretta ];\n  \n  if ( torrettaAttuale.stato === BatteriaAntimissile.ATTIVA \n      && torrettaAttuale.numeroMissili > 0 \n      && torrettaAttuale.blocco === false )  \n    return indiceTorretta;\n  \n  return -1;\n};\n\nLivello3.prototype.sparo = function ( x, y, tasto ) {\n  var indiceTorretta = this.scegliTorretta( x, y, tasto );\n  \n  if( indiceTorretta === -1 )\n    return;\n  \n  var torretta = this.coreGame.batterieAntimissile[ indiceTorretta ];\n  var n = torretta.numeroMissili - 1;\n  var missile;\n  \n  if( this.munizioni[indiceTorretta][n].nucleoEsplosivo === 'plutonio' ) {\n    this.coreGame.missiliTerrestri.push( new MissileTerrestre( {\n      xDiPartenza: torretta.x,\n      yDiPartenza: torretta.y,\n      xDiArrivo: x,\n      yDiArrivo: y,\n      coloreTestata: 'yellow',\n      coloreScia: '#33CCFF',\n      massimoRaggioEsplosione: 30,\n      distanzaPerFrame: 0.5\n    }, this.coreGame ) );\n  }\n  if( this.munizioni[indiceTorretta][n].nucleoEsplosivo === 'sonico' ) {\n    this.coreGame.missiliTerrestri.push( new MissileTerrestre( {\n      xDiPartenza: torretta.x,\n      yDiPartenza: torretta.y,\n      xDiArrivo: x,\n      yDiArrivo: y,\n      coloreTestata: 'yellow',\n      coloreScia: 'red',\n      massimoRaggioEsplosione: 2,\n      distanzaPerFrame: 8\n    }, this.coreGame ) );\n  }\n  if( this.munizioni[indiceTorretta][n].nucleoEsplosivo === 'plasma' ) {\n    this.coreGame.missiliTerrestri.push( new MissileTerrestre( {\n      xDiPartenza: torretta.x,\n      yDiPartenza: torretta.y,\n      xDiArrivo: x,\n      yDiArrivo: y,\n      coloreTestata: 'yellow',\n      coloreScia: 'blue',\n      massimoRaggioEsplosione: 20,\n      distanzaPerFrame: 7\n    }, this.coreGame ) );\n  }\n  \n  this.coreGame.aggiornaPunteggioMissiliSparati();\n  torretta.numeroMissili--;\n  torretta.temperatura += 200;\n  var temperaturaMinima = this.calcolaTempMinima( torretta.temperatura );\n  torretta.temperaturaSblocco = temperaturaMinima;\n  if( torretta.temperatura >= 799 ) {\n    torretta.blocco = true;\n  }\n}\n\n\/\/ interfaccia test - codice TAB 1\n\nvar _tipo = ['plasma', 'plutonio', 'sonico'];\nvar _numeroMunizioni; \nvar _munizioni = [];\n\nvar prelevaCarico = function( ) {\n  var nMunizioniPlutonio = rand( 0, 4 );\n  var nMunizioniSoniche = 4 - nMunizioniPlutonio;\n  \n  _numeroMunizioni = 10 + 4;\n  _munizioni = [];\n  for( _i = 0; _i < _numeroMunizioni; ++_i ) {\n    var t = _tipo[0];\n    \n    var x = rand(0, 2);\n    if ( x === 1 && nMunizioniPlutonio > 0 ) { \n      t = _tipo[x]; nMunizioniPlutonio--; \n    }\n    if ( x === 2 && nMunizioniSoniche > 0 ) { \n      t = _tipo[x]; nMunizioniSoniche--; \n    }\n    _munizioni[_i] = { id: _i, nucleoEsplosivo: t };\n  }\n  \n  return _munizioni;\n}\n\n\/\/ interfaccia test - codice TAB 2\n\nLivello3.prototype.calcolaTempMinima = function ( T ) {\n  _temperatura = T\n  _deltaTemperatura = 1;\n  _contatoreCicli = 0;\n  sistemaRaffreddamento();\n  return _temperatura;\n}\n\nvar _temperatura;\nvar _contatoreCicli;\nvar _deltaTemperatura;\nvar rilevaTemperatura = function ( ) {\n  return _temperatura;\n}\n\nvar azionaPompeRaffreddamento = function ( ) {\n  _temperatura -= _deltaTemperatura;\n  _contatoreCicli++;\n}",
  
  "fileVirtuali":
  [
    {"nomeFile": "CaricatoreMunizioni.js",
    "consultazione": false,
    "codice": "\/**********\nBenvenuto nel file di caricamento delle torrette del sistema Hob-2000.\nOgni torretta preleva dal magazzino i missili, uno ad uno,\nper inserirli automaticamente nel caricatore della torretta.\nSe sono presenti tipologie di proiettili difettose,\nmodificare il codice seguente.\n**********\/\n\n\/\/ Questo codice viene ripetuto per ogni torretta automaticamente.\nvar meccanismoCaricamento = function ( ) {\n  \/\/ Variabile contenente il carico del magazzino.\n  var magazzino = prelevaCarico();\n  \/\/ Array vuoti per il caricatore della torretta e\n  \/\/ per il deposito dei missili difettosi.\n  var caricatoreTorretta = [];\n  var proiettiliScartati = [];\n  \n\/\/###START_MODIFICABILE###\n  for( i = 0; i < magazzino.length; ++i ) {\n    \/\/ Variabile contenente il proiettile i-esimo del magazzino.\n    var proiettile = magazzino[i];\n    \/\/ Se i missili al plutonio sono difettosi,\n    \/\/ inserirli nell'array dei missili scartati.\n    if( proiettile.nucleoEsplosivo === 'plutonio' ) {\n      caricatoreTorretta.push( proiettile );\n    }\n    \/\/ Se i missili al plasma sono difettosi,\n    \/\/ inserirli nell'array dei missili scartati.\n    if( proiettile.nucleoEsplosivo === 'plasma' ) {\n      caricatoreTorretta.push( proiettile  );\n    }\n    \/\/ Se i missili sonici sono difettosi,\n    \/\/ inserirli nell'array dei missili scartati.\n    if( proiettile.nucleoEsplosivo === 'sonico' ) {\n      caricatoreTorretta.push( proiettile );\n    }\n    \n    if( caricatoreTorretta.length >= 10 )\n      break;\n  }\n\/\/###END_MODIFICABILE###\n  \n  return caricatoreTorretta;\n}",
    "test": "(\nfunction () {\n  \n  var munizioni = meccanismoCaricamento();\n  var unici = [];\n  var esito = true;\n\n  $.each( munizioni, function ( i, m ) {\n    if( _munizioni.indexOf( m ) < 0 ) { esito = false; }\n    if( m.nucleoEsplosivo !== 'plasma') { esito = false; }\n    if( unici[m.id] !== undefined ) { esito = false; }\n    \n    unici[m.id] = true;\n  });\n  return esito;\n} ) ();",
    "descrizione": "L&#x27;obiettivo &#xE8; quello di inserire nel caricatore delle torrette solo le munizioni al plasma. I due array, caricatoreTorretta e proiettiliScartati devono essere utilizzati correttamente, inserendo nel primo solo le munizioni al plasma e nel secondo solo le munizioni scartate, cio&#xE8; quelle al plutonio e quelle soniche.",
    "aiuto": "Per risolvere il caricamento errato delle munizioni, &#xE8; necessario modificare due istruzioni all&#x27;interno del for.<br>\nLa prima &#xE8; la seguente:\n<pre><code>if( proiettile.nucleoEsplosivo === &#x27;plutonio&#x27; ) {\n&#x9;caricatoreTorretta.push( proiettile );\n}\n<\/code><\/pre>\nche deve diventare:\n<pre><code>if( proiettile.nucleoEsplosivo === &#x27;plutonio&#x27; ) {\n  proiettiliScartati.push( proiettile  );\n}\n<\/code><\/pre>\nLa seconda &#xE8; la seguente:\n<pre><code>if( proiettile.nucleoEsplosivo === &#x27;sonico&#x27; ) {\n&#x9;caricatoreTorretta.push( proiettile );\n}\n<\/code><\/pre>\nche deve diventare:\n<pre><code>if( proiettile.nucleoEsplosivo === &#x27;sonico&#x27; ) {\n  proiettiliScartati.push( proiettile  );\n}\n<\/code><\/pre>",
    "messaggioFallimento": "Sono presenti ancora missili difettosi nel caricatore."},
    {"nomeFile": "SistemaRaffreddamento.js",
    "consultazione": false,
    "codice": "\/**********\nBenvenuto nel file di raffreddamento torrette del sistema Hob-2000.\nIl codice seguente permette di modificare la soglia di temperatura minima,\ncio\u00e8 la soglia di temperatura dalla quale \u00e8 possibile ricominciare\na sparare in caso di surriscaldamento della torretta.\n\nQuesto codice vale per tutte le torrette.\n**********\/\n\nvar sistemaRaffreddamento = function ( ) {\n  T = rilevaTemperatura();\n\/\/###START_MODIFICABILE###\n  \/\/ Variabile contenente la soglia di temperatura minima.\n  var sogliaTemperaturaMinima = 500;\n\/\/###END_MODIFICABILE###\n  \n  if( T >= 799 ) {\n\/\/###START_MODIFICABILE###\n    \/\/ Ciclo per la gestione delle pompe di raffreddamento.\n    \/\/ Deve rimanere attivo finch\u00e9 la temperatura T non \u00e8\n    \/\/ uguale o superiore alla soglia.\n    while( T === sogliaTemperaturaMinima ) {\n      azionaPompeRaffreddamento();\n      T = rilevaTemperatura();\n    }\n\/\/###END_MODIFICABILE###\n  }\n}",
    "test": "( function () {\n  var esito = true;\n  \n  _deltaTemperatura = 1;\n  _temperatura = 799;\n  _contatoreCicli = 0;\n  sistemaRaffreddamento();\n  if( _temperatura + _contatoreCicli !== 799 ) {\n    esito = false;\n  }\n    \n  if( _contatoreCicli <= 0 ) {\n    esito = false;\n  }\n  \n  return esito; \n}\n) ();",
    "descrizione": "L&#x27;obiettivo &#xE8; quello di impostare la corretta gestione del sistema di raffreddamento. Il primo punto da modificare &#xE8; la soglia della temperatura minima, cio&#xE8; fino a che punto si mantiene il blocco della torretta, durante il quale le pompe di raffreddamento abbassano la temperatura.\nQuesta soglia pu&#xF2; essere abbassata a piacere, considerando che, nel momento in cui la torretta supera la temperatura di 799&#xB0;C, essa si bloccher&#xE0; e rimarr&#xE0; bloccata finch&#xE9; non si raggiunger&#xE0; tale soglia.<br>\nUna soglia bassa permette dunque di sparare a lungo ma poi rimanere bloccati per molto tempo; una soglia alta permette di sparare poco ma con un tempo di raffreddamento (e dunque di blocco) decisamente minore.<br>\nIl secondo punto da modificare &#xE8; la condizione del ciclo while: il ciclo deve rimanere attivo se la temperatura &#xE8; maggiore o uguale alla soglia decisa in precedenza.",
    "aiuto": "Come prima cosa &#xE8; necessario decidere la soglia minima della temperatura, per esempio:\n<pre><code>var sogliaTemperaturaMinima = 300;\n<\/code><\/pre>\nOvviamente &#xE8; possibile lasciarla invariata.<br>\nSuccessivamente la condizione del ciclo deve essere modificata nel seguente modo:\n<pre><code>while( T &#x3E;= sogliaTemperaturaMinima )\n<\/code><\/pre>",
    "messaggioFallimento": "Il meccanismo di raffreddamento ha ancora dei problemi."}
  ]
}