{
  "nomeLivello": "Nelle fauci del Nemico",
  "numeroLivello": 4,
  "costoAiuti": 8000,

  "dialogoIniziale":
  [
    {"nome": "Ortiz",
    "testo": "Entra pure, capitano."},
    {"nome": "Simeoni",
    "testo": "Ordini, generale?"},
    {"nome": "Ortiz",
    "testo": "S&#xEC;, ma dopo. Prima vorrei parlare di un certo file di configurazione per la calibrazione planetaria delle armi. Hai usato quel file, vero? Per sistemare le torrette l&#x27;altro giorno?"},
    {"nome": "Simeoni",
    "testo": "Non lo nego, signore."},
    {"nome": "Ortiz",
    "testo": "Non avevi il permesso di ficcare il naso in quel file! Sei solo un capitano! Qui stiamo parlando di difese che vengono utilizzate in tutta la galassia! Ti rendi conto di quello che sarebbe potuto accadere, se solo avessi sbagliato a manomettere quel file? E soprattutto, chi ti ha detto dell&#x27;esistenza di quel file?"},
    {"nome": "Simeoni",
    "testo": "L&#x27;ho trovato per caso signore. Stavo cercando di risolvere i problemi al sistema di puntamento e sparo. La fretta era tanta e non ho fatto complimenti."},
    {"nome": "Ortiz",
    "testo": "Non &#xE8; che qualche membro ausiliario della base ti ha aiutato? Qui dentro c&#x27;&#xE8; molta gente che deve imparare a tenere la bocca chiusa... e me ne occuper&#xF2; personalmente! Non posso tollerare che un capitano, con la responsabilit&#xE0; delle difese di un pianeta sotto attacco scavalchi le regole in questo modo!"},
    {"nome": "Simeoni",
    "testo": "Signore, alla fine ho salvato delle vite. Le vite dei nostri soldati, dei nostri compagni. Non mi pento di quello che ho fatto. E le posso giurare di aver fatto tutto da solo."},
    {"nome": "Ortiz",
    "testo": "Hai una bella faccia tosta, a non pentirti e a giurare il falso. Dovrei sbatterti davanti alla corte marziale, ma credo nelle seconde possibilit&#xE0;: far&#xF2; finta di crederti. D&#x27;altronde sei l&#x27;unico che pu&#xF2; svolgere la prossima missione... fate entrare il prigioniero!"},
    {"nome": "Zurlin",
    "testo": "Ehi ehi ehi, gi&#xF9; quelle mani! Ho dato la mia parola sulla spontaneit&#xE0; della mia collaborazione. Non c&#x27;&#xE8; bisogno di spingere."},
    {"nome": "Ortiz",
    "testo": "Capitano, ti presento Zurlin, il pilota del Nemico abbattuto ieri."},
    {"nome": "Zurlin",
    "testo": "Ciao, caro."},
    {"nome": "Ortiz",
    "testo": "Zurlin ha promesso di collaborare con noi. Pu&#xF2; aprirci una porta per entrare nel codice delle navi del Nemico. Si sta parlando di hacking."},
    {"nome": "Simeoni",
    "testo": "Interessante. Spiegami un po&#x27;, Zurlin: cosa dovrei fare?"},
    {"nome": "Zurlin",
    "testo": "Allora caro, come prima cosa ci sar&#xE0; da creare un&#x27;arma sabotata, che poi andr&#xE0; caricata nel codice della nave, in modo che usi quella invece che quelle che utilizza normalmente. Non potrai esagerare con le modifiche... altrimenti potrebbero accorgersene subito."},
    {"nome": "Simeoni",
    "testo": "Ottimo."},
    {"nome": "Zurlin",
    "testo": "Calmo, caro. A quel punto sar&#xE0; necessario effettuare un attacco a forza bruta alla password della nave, in modo che le modifiche che hai fatto alle armi possano essere salvate nel loro sistema. Ho gi&#xE0; fatto preparare alcuni file da cui puoi partire, ma non sar&#xE0; facile, caro..."},
    {"nome": "Simeoni",
    "testo": "E smettila di chiamarmi caro."},
    {"nome": "Zurlin",
    "testo": "Certo, caro."},
    {"nome": "Ortiz",
    "testo": "Basta con i convenevoli. Simeoni, questa &#xE8; la tua ultima possibilit&#xE0;. Vedi di tenerlo bene a mente."}
  ],
  
  "dialogoFinale":
  [
    {"nome": "Ortiz",
    "testo": "Un ottimo lavoro, direi."},
    {"nome": "Simeoni",
    "testo": "Grazie, generale. Grazie... Zurlin."},
    {"nome": "Zurlin",
    "testo": "Prego, caro."},
    {"nome": "Ortiz",
    "testo": "Portate via Zurlin. Cella 42. Con te non ho ancora finito."},
    {"nome": "Zurlin",
    "testo": "Ma certo, caro."},
    {"nome": "Ortiz",
    "testo": "Bene, ora che quel... quella prigioniera se n&#x27;&#xE8; andata, passiamo a noi. Mi &#xE8; piaciuto come hai condotto l&#x27;operazione. Hai sfruttato bene la seconda possibilit&#xE0; che ti ho dato e non voglio che si dica che non premio i miei uomini. Complimenti, maggiore Simeoni."},
    {"nome": "Simeoni",
    "testo": "Maggiore? Grazie, signore."},
    {"nome": "Ortiz",
    "testo": "Non gongolare troppo. La notte eterna di Bastiani ha ancora tanto da chiederti... e dovrai farti trovare pronto. Inutile ricordarti che non tollerer&#xF2; altre interferenze come quella del file di configurazione. Sono stato chiaro, maggiore?"},
    {"nome": "Simeoni",
    "testo": "Trasparente."}
  ],
  
  "manuale": "Una <b>funzione<\/b> &#xE8; un particolare tipo di valore per una variabile, ed &#xE8; una sequenza di istruzioni che definisce una particolare operazione. Una funzione pu&#xF2; avere dei parametri in ingresso oppure dei risultati in uscita.<br>\nPer esempio, una funzione che possiede parametri in entrata e risultati in uscita &#xE8; la seguente:\n<pre><code>var calcolaSomma = function ( a, b ) {\n&#x9;return a + b;\n}\n<\/code><\/pre>\nI parametri in ingresso sono <tt>a<\/tt> e <tt>b<\/tt>, che rappresentano le variabili da sommare, mentre <b>return<\/b> &#xE8; una parola chiave, che indica che ci&#xF2; che la segue &#xE8; il risultato in uscita. Per utilizzare una funzione &#xE8; necessario chiamarla, tramite una chiamata di funzione. Ecco un esempio per la funzione <tt>calcolaSomma()<\/tt>:\n<pre><code>var risultato = calcolaSomma ( 4, 5 );\n<\/code><\/pre>\nIn <tt>risultato<\/tt> verr&#xE0; inserito il risultato della funzione, dunque 9.<br>\nUn particolare tipo di funzione &#xE8; la <b>funzione ricorsiva<\/b>, cio&#xE8; una funzione che richiama se stessa pi&#xF9; volte, in modo da produrre un determinato tipo di risultato. Un esempio di funzione ricorsiva pu&#xF2; essere quella che calcola il fattoriale di un numero:\n<pre><code>var fattoriale = function ( numero ) {\n&#x9;if ( numero &#x3C; 0 ) {\n&#x9;&#x9;return -1;\n&#x9;}\n&#x9;else if ( num == 0 ) {\n&#x9;&#x9;return 1;\n&#x9;}\n&#x9;else {\n&#x9;&#x9;return ( numero * fattoriale( numero - 1 ) );\n&#x9;}\n}\n<\/code><\/pre>\nIl risultato ritornato dalla funzione <tt>fattoriale( numero )<\/tt> sar&#xE0; il valore del fattoriale di <tt>numero<\/tt>.<br>\nL&#x27;ultimo tassello della grammatica del linguaggio di programmazione &#xE8; il concetto di <b>classe<\/b>. Una classe definisce un nuovo tipo di valore, che viene caratterizzato da una serie di caratteristiche, chiamati campi. Ecco un esempio, per la classe Soldato:\n<pre><code>\nfunction Soldato ( matricola, arma, battaglione ) {\n&#x9;this.matricola = matricola;\n&#x9;this.arma = arma;\n&#x9;this.battaglione = battaglione;\n}\n<\/code><\/pre>\nLa parola chiave <b>this<\/b> indica che la parola che segue descrive una caratteristica propria della classe.<br>\nLa classe viene poi usata per creare degli <b>oggetti<\/b>, cio&#xE8;, nel caso della classe <tt>Soldato<\/tt>, tanti soldati, ognuno con le sue caratteristiche.<br>\nUna classe viene creata tramite la parola chiave <i>function<\/i>, perch&#xE9; viene chiamata per la creazione di oggetti proprio come se fosse una funzione.<br>\nPer creare nuovi soldati, dunque, &#xE8; necessario eseguire le seguenti istruzioni:\n<pre><code>var soldatoFanteria = new Soldato ( 1, &#x22;fucile al plasma&#x22;, &#x22;UTF-8, 42 battaglione&#x22; );\nvar soldatoArtiglieria = new Soldato ( 2, &#x22;granate a rimbalzo&#x22;, &#x22;UTF-16, 30 battaglione&#x22; );\nvar soldatoScelto = new Soldato ( 3, &#x22;phaser sonici&#x22;, &#x22;UTF-32, 1 battaglione&#x22; );\n<\/code><\/pre>",

  "codiceLivello": "function Livello4 ( callbackFineLivello ) {\n  CoreLevel.call( this, callbackFineLivello );\n}\n\nLivello4.prototype = Object.create( CoreLevel.prototype );\nLivello4.prototype.constructor = Livello4;\n\nLivello4.prototype.inizializzaMirino = function () {\n  this.mirino = new Mirino( this.canvas.width \/ 2, this.canvas.height \/ 2, 10.0 );\n}\n\nLivello4.prototype.inizializzaArmiNemiche = function () {\n  var batteria;\n  \n  hackingPassword();\n  \n  if ( _login === false ) {\n    var combinazioniPossibili = [];\n    var combinazione = ['0', '0', '0'];\n    generaPassword( combinazioniPossibili, combinazione, 0 );\n    console.log( \"Password generate: \" )\n    $.each( combinazioniPossibili, function ( i, c ) {\n      var stringa = \"Tentativo #\" + (i+1) + \": \";\n      $.each( c, function( i, x ) { stringa = stringa + x + \" \"; } );\n      console.log( stringa )\n    } )\n    \n    console.log(\"Autenticazione per salvataggio modifiche al sistema Ibrido non riuscita.\");\n  } else {    \n    console.log(\"Autenticazione per il salvataggio modifiche al sistema Ibrido riuscita.\")\n  }\n  \n  if ( controlloArmaNemicaSabotata() === true && _login === true ) {\n    batteria = controlloInizializzazioneBatteriaAntiterrestri();\n  } else {\n    batteria = new BatteriaAntiterrestre();\n  } \n  \n  var areaPertenza = this.coreGame.canvas.width;\n  var ritardoMassimo = batteria.tempoRicaricaMassimo * this.numeroOndata * 0.05;\n  var xRand;\n  var velRand;\n  var ritardoRand;\n  var bersagli = this.coreGame.bersagliAttaccabili();\n  var numeroMissili = batteria.numeroMissili + Math.floor( this.numeroOndata );\n  \n  var raggio = 10;\n  \n  if ( batteria.tipoMunizione === \"massima_esplosione\" ) {\n    raggio = 30;\n  }\n    \n  for( var i = 0; i < numeroMissili ; i++ ) {\n    xRand = rand( 0, areaPertenza );\n    velRand = rand( 1.1 + this.numeroOndata * 0.05, \n      batteria.propellente\/2.6 + this.numeroOndata * 0.05 );\n    ritardoRand = rand( 0, ritardoMassimo );\n    this.coreGame.missiliNemici.push( new MissileNemico( {\n      coloreTestata: 'yellow',\n      coloreScia: 'red',\n      massimoRaggioEsplosione: raggio\n    }, bersagli, areaPertenza, xRand, velRand,  ritardoRand, this.coreGame) );\n  }\n}\n\nLivello4.prototype.sparo = function ( x, y, tasto ) {\n  var indiceTorretta = this.scegliTorretta( x, y, tasto);\n  if( indiceTorretta === -1 ) {\n    return;\n  }\n  \n  var torretta = this.coreGame.batterieAntimissile[ indiceTorretta ];\n  \n  var raggio = 30;\n  var vel = 7;\n  var incrementoTemperatura = 0;\n  var velMirino = 16;\n  \n  if( indiceTorretta === 0 ) { incrementoTemperatura = 200; vel = 10; velMirino = 30; }\n  if( indiceTorretta === 1 ) { incrementoTemperatura = 200; vel = 2.5; velMirino = 3; }\n  if( indiceTorretta === 2 ) { incrementoTemperatura = 200; vel = 5; velMirino = 30; }\n  \n  this.coreGame.mirino.distanzaPerFrame = velMirino;\n  \n  this.coreGame.missiliTerrestri.push( new MissileTerrestre( {\n    xDiPartenza: torretta.x,\n    yDiPartenza: torretta.y,\n    xDiArrivo: x,\n    yDiArrivo: y,\n    coloreTestata: 'yellow',\n    coloreScia: 'blue',\n    massimoRaggioEsplosione: raggio,\n    distanzaPerFrame: vel\n  }, this.coreGame ) );\n  this.coreGame.aggiornaPunteggioMissiliSparati();\n  torretta.numeroMissili--;\n  torretta.temperatura += incrementoTemperatura;\n  \n  torretta.temperaturaSblocco = 500;\n  if( torretta.temperatura >= 799 ) {\n    torretta.blocco = true;\n  }\n}\n\nLivello4.prototype.calcolaCoefficienteOndata = function () {\n  return this.numeroOndata * 1.2;\n}\n\n\/\/ interfaccia test - codice utente\nfunction BatteriaAntiterrestre () {\n  this.tempoRicaricaMassimo = 100;\n  this.propellente = 5;\n  this.numeroMissili = 20;\n  this.tipoMunizione = \"massima_efficacia\";\n}\n\nvar controlloArmaNemicaSabotata = function () {\n  var arma = new ArmaNemicaSabotata();\n  var risultato = true;\n  if ( arma.tempoRicaricaMassimo < 150 ) {\n    console.log( \"Attenzione: tempo di ricarica troppo basso!\" );\n    risultato = false;\n  }\n  if ( arma.tempoRicaricaMassimo > 200 ) {\n    console.log( \"Attenzione: tempo di ricarica troppo alto!\" );\n    risultato = false;\n  }\n  if ( arma.propellente < 3 ) {\n    console.log( \"Attenzione: propellente obsoleto!\" );\n    risultato = false;\n  }\n  if ( arma.propellente > 3.5 ) {\n    console.log( \"Attenzione: propellente troppo potente!\" );\n    risultato = false;\n  }\n  if ( arma.numeroMissili > 15 ) {\n    console.log( \"Attenzione: troppi missili caricati!\" );\n    risultato = false;\n  }\n  if ( arma.numeroMissili < 10 ) {\n    console.log( \"Attenzione: numero missili insufficiente!\" );\n    risultato = false;\n  }\n  if ( arma.tipoMunizione !== \"massima_esplosione\" ) {\n    console.log( \"Attenzione: tipologia di munizioni inesistente!\" );\n    risultato = false;\n  }\n  return risultato;\n}\n\nvar controlloInizializzazioneBatteriaAntiterrestri = function () {\n  var batteria = inizializzaBatteriaAntiterrestri();\n  if ( batteria instanceof ArmaNemicaSabotata ) {\n    console.log(\"Arma nemica sabotata correttamente.\");\n  } else {\n    console.log(\"Arma nemica non sabotata!\");\n  }\n  return batteria;\n}\n\nvar _simboli = ['0', '1', '2'];\n\nvar _password = [\n  _simboli[ rand( 0, 2 ) ],\n  _simboli[ rand( 0, 2 ) ],\n  _simboli[ rand( 1, 2 ) ]\n];\n\nvar _login = false;\n\nvar autenticazioneOperatoreNonTerrestre = function ( tentativo ) {\n  if (\n    tentativo[0] === _password[0]\n    && tentativo[1] === _password[1]\n    && tentativo[2] === _password[2]\n  ) {\n    console.log(\"Password trovata.\");\n    _login = true;\n    return true;\n  } else {\n    _login = false;\n    return false;\n  }\n}",
  
  "fileVirtuali":
  [
    {"nomeFile": "ArmaSabotata.js",
    "consultazione": false,
    "codice": "\/**********\nCiao, caro. Il codice che vedi di seguito \u00e8 una mia idea\nsu come potrebbe essere un'arma sabotata da caricare\nal posto di quelle standard all'interno del codice del\nNemico. Aggiusta i parametri della classe per rendere\nl'arma pi\u00f9 consona alle tue esigenze.\nSaluti,\nZurlin\n**********\/\n  \nfunction ArmaNemicaSabotata () {\n\/\/###START_MODIFICABILE###\n  \/\/ Campo per il tempo di ricarica massimo delle torrette antiterrestri.\n  this.tempoRicaricaMassimo = 100;\n  \/\/ Campo per la tipologia di propellente.\n  \/\/ Pi\u00f9 \u00e8 alto il numero, migliore \u00e8 il propellente.\n  this.propellente = 5;\n  \/\/ Campo per il numero di missili della torretta antiterrestre.\n  this.numeroMissili = 20;\n  \/\/ Tipologia di munizione.\n  \/\/ Pu\u00f2 essere \"massima_efficacia\" oppure \"massima_esplosione\".\n  this.tipoMunizione = \"massima_efficacia\";\n\/\/###END_MODIFICABILE###\n}",
    "test": "(function () {\n  var arma = new ArmaNemicaSabotata;\n  if (\n    arma.tempoRicaricaMassimo >= 150\n    && arma.tempoRicaricaMassimo <= 200\n    && arma.propellente >= 3\n    && arma.propellente <= 3.5\n    && arma.numeroMissili <= 15\n    && arma.numeroMissili >= 10\n    && arma.tipoMunizione === \"massima_esplosione\"\n  ) {\n    return true;\n  } else {\n    return false;\n  }\n}) ();",
    "descrizione": "L&#x27;obiettivo &#xE8; modificare le caratteristiche della classe dell&#x27;arma sabotata, che poi dovr&#xE0; essere caricata al posto delle armi funzionanti nel codice del Nemico. <br> Si deve dunque alzare il tempo di ricarica massimo, cio&#xE8; il tempo che ogni torretta impiega a ricaricare il cannone; poi ridurre il numero del propellente, poich&#xE9; pi&#xF9; &#xE8; basso, pi&#xF9; indica propellente scadente; poi diminuire il numero di missili contenuti nel caricatore; infine cambiare il tipo di missile da <i>massima_efficacia<\/i> a <i>massima_esplosione<\/i>. Quest&#x27;ultima modifica permette di avere un maggior numero di esplosioni a catena: aumentando infatti la carica esplosiva del missile, se viene abbattuto in aria, ne distrugger&#xE0; molti altri intorno.",
    "aiuto": "Le caratteristiche della classe andranno cambiate nel seguente modo:\n<pre><code>this.tempoRicaricaMassimo = 200;\nthis.propellente = 3;\nthis.numeroMissili = 10;\nthis.tipoMunizione = &#x22;massima_esplosione&#x22;;\n<\/code><\/pre>",
    "messaggioFallimento": "Errore nel sabotaggio dell'arma."},
    {"nomeFile": "CaricamentoArma.js",
    "consultazione": false,
    "codice": "\/**********\nFile di creazione delle batterie antiterrestri.\nRicordiamo che \u00e8 necessario autenticarsi in seguito a\nqualunque modifica.\n**********\/\n\nvar inizializzaBatteriaAntiterrestri = function () {\n\/\/###START_MODIFICABILE###\n  \/\/ Variabile contenente la batteria antiterrestre\n  \/\/ di tipo standard.\n  var batteria = new ArmaNemicaSabotata();\n  return batteria;\n\/\/###END_MODIFICABILE###\n}",
    "test": "(function () {\n  var risultato = inizializzaBatteriaAntiterrestri();\n  if ( risultato instanceof ArmaNemicaSabotata ) {\n    return true;\n  } else {\n    return false;\n  }\n}) ();",
    "descrizione": "L&#x27;obiettivo &#xE8; caricare la classe dell&#x27;arma sabotata al posto della classe delle armi normali utilizzata dal Nemico.",
    "aiuto": "Bisogna creare un oggetto non di classe BatteriaAntiterrestre(), ma di classe ArmaNemicaSabotata().\n<pre><code>var batteria = new ArmaNemicaSabotata();\n<\/code><\/pre>",
    "messaggioFallimento": "Errore di inserimento arma sabotata."},
    {"nomeFile": "HackingPassword.js",
    "consultazione": false,
    "codice": "\/**********\nCiao, caro.\nNella funzione generaPassword() hai esempio di funzione ricorsiva\nper il calcolo della password necessaria per salvare le modifiche.\nQuesto codice prova ad indivinare la password generando tutte le combinazioni\npossibili dei caratteri '0', '1' e '2'.\nNella funzione hackingPassword() queste combinazioni vengono mandate\nal server centrale del Nemico, continuando finch\u00e9 non viene approvata una\ndelle combinazioni.\nSpero di non aver fatto errori.\nSaluti,\nZurlin\n**********\/\n\n\/\/ Simboli utilizzati per la password.\nvar _simboli = ['0', '1', '2'];\n\n\/\/ Funzione per la generazione di tutte le password possibili.\nvar generaPassword = function ( combinazioniPossibili, combinazione, k ) {\n\/\/###START_MODIFICABILE###\n  if (k === 2)\n    combinazioniPossibili.push( combinazione.slice( 0 ) );\n  else {\n  \tvar i = 0;\n    for( i; i < 3; ++i ) {\n      combinazione[ k ] = _simboli[ i ];\n      generaPassword( combinazioniPossibili, combinazione, k + 1 );\n    }\n  }\n\/\/###END_MODIFICABILE###\n}\n\n\/\/ Funzione per il test delle combinazioni.\nvar hackingPassword = function () {\n  var combinazioniPossibili = [];\n  \/\/ Variabile con la combinazione di partenza.\n  var combinazione = ['0', '0', '0'];\n  \/\/ Chiamata alla funzione di generazione delle password,\n  \/\/ che inserisce tutte quelle possibili nella variabile\n  \/\/ combinazioniPossibili.\n  generaPassword( combinazioniPossibili, combinazione, 0 );\n  \n  var hacking = false;\n  \/\/ Questo ciclo scorre tutte le combinazioni\n  \/\/ e le manda una ad una al server del Nemico.\n  for ( var i = 0; i < combinazioniPossibili.length; ++i ) {\n    \/\/ Qui viene chiamata la funzione per il test della password.\n    hacking = autenticazioneOperatoreNonTerrestre( combinazioniPossibili[ i ] );\n    \/\/ Se la password \u00e8 corretta, usciamo dal ciclo.\n    if ( hacking === true ) {\n      break;\n    }\n  }\n  return hacking;\n}",
    "test": "(function () {\n  hackingPassword();\n  var risultato = _login;\n  return risultato;\n}) ();",
    "descrizione": "L&#x27;obiettivo &#xE8; creare tutte le combinazioni possibili di password per forzare il salvataggio delle nostre modifiche. L&#x27;importante &#xE8; che, essendoci tre caratteri, il ciclo e la funzione ricorsiva vengano chiamate tre volte.",
    "aiuto": "Per eseguire la ricorsione il numero corretto di volte, &#xE8; necessario modificare la funzione <tt>generaPassword()<\/tt>, in particolare il controllo effettuato dall&#x27;<i>if<\/i>:\n<pre><code>if ( k === 3 )\n<\/code><\/pre>\nQuesto per creare tutte le combinazioni possibili.",
    "messaggioFallimento": "Generazione password fallita."}
  ]
}
  
  